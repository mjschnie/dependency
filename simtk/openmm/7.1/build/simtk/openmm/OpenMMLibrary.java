/**
 * Title: Force Field X.
 *
 * Description: Force Field X - Software for Molecular Biophysics.
 *
 * Copyright: Copyright (c) Michael J. Schnieders 2001-2017.
 *
 * This file is part of Force Field X.
 *
 * Force Field X is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * Force Field X is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Force Field X; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Linking this library statically or dynamically with other modules is making a
 * combined work based on this library. Thus, the terms and conditions of the
 * GNU General Public License cover the whole combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this library with independent modules to produce an
 * executable, regardless of the license terms of these independent modules, and
 * to copy and distribute the resulting executable under terms of your choice,
 * provided that you also meet, for each linked independent module, the terms
 * and conditions of the license of that module. An independent module is a
 * module which is not derived from or based on this library. If you modify this
 * library, you may extend this exception to your version of the library, but
 * you are not obligated to do so. If you do not wish to do so, delete this
 * exception statement from your version.
 */
package simtk.openmm;

import java.util.Collections;
import java.util.Iterator;

import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>OpenMM</b> and <b>AmoebaOpenMM</b> <br>
 *
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 *
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or
 * <a href="http://bridj.googlecode.com/">BridJ</a> .
 */

//@Library("OpenMM")

@Runtime(CRuntime.class)

public class OpenMMLibrary {

    static {
        BridJ.register();
        try {
            // BridJ.getNativeLibrary("OpenMM");
            // BridJ.getNativeLibrary("OpenMMAmoeba");
        } catch (Exception e) {
            System.out.println(" Could not load native OpenMM libraries.");
        }
    }

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_Boolean implements IntValuedEnum<OpenMM_Boolean> {
        OpenMM_False(0),
        OpenMM_True(1);

        OpenMM_Boolean(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_Boolean> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_Boolean> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_CustomGBForce_NonbondedMethod implements IntValuedEnum<OpenMM_CustomGBForce_NonbondedMethod> {
        OpenMM_CustomGBForce_NoCutoff(0),
        OpenMM_CustomGBForce_CutoffNonPeriodic(1),
        OpenMM_CustomGBForce_CutoffPeriodic(2);

        OpenMM_CustomGBForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_CustomGBForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_CustomGBForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_CustomGBForce_ComputationType implements IntValuedEnum<OpenMM_CustomGBForce_ComputationType> {
        OpenMM_CustomGBForce_SingleParticle(0),
        OpenMM_CustomGBForce_ParticlePair(1),
        OpenMM_CustomGBForce_ParticlePairNoExclusions(2);

        OpenMM_CustomGBForce_ComputationType(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_CustomGBForce_ComputationType> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_CustomGBForce_ComputationType> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_CustomHbondForce_NonbondedMethod implements IntValuedEnum<OpenMM_CustomHbondForce_NonbondedMethod> {
        OpenMM_CustomHbondForce_NoCutoff(0),
        OpenMM_CustomHbondForce_CutoffNonPeriodic(1),
        OpenMM_CustomHbondForce_CutoffPeriodic(2);

        OpenMM_CustomHbondForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_CustomHbondForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_CustomHbondForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_CustomIntegrator_ComputationType implements IntValuedEnum<OpenMM_CustomIntegrator_ComputationType> {
        OpenMM_CustomIntegrator_ComputeGlobal(0),
        OpenMM_CustomIntegrator_ComputePerDof(1),
        OpenMM_CustomIntegrator_ComputeSum(2),
        OpenMM_CustomIntegrator_ConstrainPositions(3),
        OpenMM_CustomIntegrator_ConstrainVelocities(4),
        OpenMM_CustomIntegrator_UpdateContextState(5),
        OpenMM_CustomIntegrator_IfBlockStart(6),
        OpenMM_CustomIntegrator_WhileBlockStart(7),
        OpenMM_CustomIntegrator_BlockEnd(8);

        OpenMM_CustomIntegrator_ComputationType(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_CustomIntegrator_ComputationType> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_CustomIntegrator_ComputationType> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_CustomManyParticleForce_NonbondedMethod implements IntValuedEnum<OpenMM_CustomManyParticleForce_NonbondedMethod> {
        OpenMM_CustomManyParticleForce_NoCutoff(0),
        OpenMM_CustomManyParticleForce_CutoffNonPeriodic(1),
        OpenMM_CustomManyParticleForce_CutoffPeriodic(2);

        OpenMM_CustomManyParticleForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_CustomManyParticleForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_CustomManyParticleForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_CustomManyParticleForce_PermutationMode implements IntValuedEnum<OpenMM_CustomManyParticleForce_PermutationMode> {
        OpenMM_CustomManyParticleForce_SinglePermutation(0),
        OpenMM_CustomManyParticleForce_UniqueCentralParticle(1);

        OpenMM_CustomManyParticleForce_PermutationMode(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_CustomManyParticleForce_PermutationMode> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_CustomManyParticleForce_PermutationMode> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_CustomNonbondedForce_NonbondedMethod implements IntValuedEnum<OpenMM_CustomNonbondedForce_NonbondedMethod> {
        OpenMM_CustomNonbondedForce_NoCutoff(0),
        OpenMM_CustomNonbondedForce_CutoffNonPeriodic(1),
        OpenMM_CustomNonbondedForce_CutoffPeriodic(2);

        OpenMM_CustomNonbondedForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_CustomNonbondedForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_CustomNonbondedForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_GayBerneForce_NonbondedMethod implements IntValuedEnum<OpenMM_GayBerneForce_NonbondedMethod> {
        OpenMM_GayBerneForce_NoCutoff(0),
        OpenMM_GayBerneForce_CutoffNonPeriodic(1),
        OpenMM_GayBerneForce_CutoffPeriodic(2);

        OpenMM_GayBerneForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_GayBerneForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_GayBerneForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_GBSAOBCForce_NonbondedMethod implements IntValuedEnum<OpenMM_GBSAOBCForce_NonbondedMethod> {
        OpenMM_GBSAOBCForce_NoCutoff(0),
        OpenMM_GBSAOBCForce_CutoffNonPeriodic(1),
        OpenMM_GBSAOBCForce_CutoffPeriodic(2);

        OpenMM_GBSAOBCForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_GBSAOBCForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_GBSAOBCForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_MonteCarloMembraneBarostat_XYMode implements IntValuedEnum<OpenMM_MonteCarloMembraneBarostat_XYMode> {
        OpenMM_MonteCarloMembraneBarostat_XYIsotropic(0),
        OpenMM_MonteCarloMembraneBarostat_XYAnisotropic(1);

        OpenMM_MonteCarloMembraneBarostat_XYMode(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_MonteCarloMembraneBarostat_XYMode> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_MonteCarloMembraneBarostat_XYMode> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_MonteCarloMembraneBarostat_ZMode implements IntValuedEnum<OpenMM_MonteCarloMembraneBarostat_ZMode> {
        OpenMM_MonteCarloMembraneBarostat_ZFree(0),
        OpenMM_MonteCarloMembraneBarostat_ZFixed(1),
        OpenMM_MonteCarloMembraneBarostat_ConstantVolume(2);

        OpenMM_MonteCarloMembraneBarostat_ZMode(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_MonteCarloMembraneBarostat_ZMode> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_MonteCarloMembraneBarostat_ZMode> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_NonbondedForce_NonbondedMethod implements IntValuedEnum<OpenMM_NonbondedForce_NonbondedMethod> {
        OpenMM_NonbondedForce_NoCutoff(0),
        OpenMM_NonbondedForce_CutoffNonPeriodic(1),
        OpenMM_NonbondedForce_CutoffPeriodic(2),
        OpenMM_NonbondedForce_Ewald(3),
        OpenMM_NonbondedForce_PME(4);

        OpenMM_NonbondedForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_NonbondedForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_NonbondedForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : OpenMMCWrapper.h</i>
     */
    public enum OpenMM_State_DataType implements IntValuedEnum<OpenMM_State_DataType> {
        OpenMM_State_Positions(1),
        OpenMM_State_Velocities(2),
        OpenMM_State_Forces(4),
        OpenMM_State_Energy(8),
        OpenMM_State_Parameters(16),
        OpenMM_State_ParameterDerivatives(32);

        OpenMM_State_DataType(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_State_DataType> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_State_DataType> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h</i>
     */
    public enum OpenMM_AmoebaMultipoleForce_NonbondedMethod implements IntValuedEnum<OpenMM_AmoebaMultipoleForce_NonbondedMethod> {
        OpenMM_AmoebaMultipoleForce_NoCutoff(0),
        OpenMM_AmoebaMultipoleForce_PME(1);

        OpenMM_AmoebaMultipoleForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_AmoebaMultipoleForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_AmoebaMultipoleForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h</i>
     */
    public enum OpenMM_AmoebaMultipoleForce_PolarizationType implements IntValuedEnum<OpenMM_AmoebaMultipoleForce_PolarizationType> {
        OpenMM_AmoebaMultipoleForce_Mutual(0),
        OpenMM_AmoebaMultipoleForce_Direct(1),
        OpenMM_AmoebaMultipoleForce_Extrapolated(2);

        OpenMM_AmoebaMultipoleForce_PolarizationType(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_AmoebaMultipoleForce_PolarizationType> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_AmoebaMultipoleForce_PolarizationType> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h</i>
     */
    public enum OpenMM_AmoebaMultipoleForce_MultipoleAxisTypes implements IntValuedEnum<OpenMM_AmoebaMultipoleForce_MultipoleAxisTypes> {
        OpenMM_AmoebaMultipoleForce_ZThenX(0),
        OpenMM_AmoebaMultipoleForce_Bisector(1),
        OpenMM_AmoebaMultipoleForce_ZBisect(2),
        OpenMM_AmoebaMultipoleForce_ThreeFold(3),
        OpenMM_AmoebaMultipoleForce_ZOnly(4),
        OpenMM_AmoebaMultipoleForce_NoAxisType(5),
        OpenMM_AmoebaMultipoleForce_LastAxisTypeIndex(6);

        OpenMM_AmoebaMultipoleForce_MultipoleAxisTypes(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_AmoebaMultipoleForce_MultipoleAxisTypes> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_AmoebaMultipoleForce_MultipoleAxisTypes> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h</i>
     */
    public enum OpenMM_AmoebaMultipoleForce_CovalentType implements IntValuedEnum<OpenMM_AmoebaMultipoleForce_CovalentType> {
        OpenMM_AmoebaMultipoleForce_Covalent12(0),
        OpenMM_AmoebaMultipoleForce_Covalent13(1),
        OpenMM_AmoebaMultipoleForce_Covalent14(2),
        OpenMM_AmoebaMultipoleForce_Covalent15(3),
        OpenMM_AmoebaMultipoleForce_PolarizationCovalent11(4),
        OpenMM_AmoebaMultipoleForce_PolarizationCovalent12(5),
        OpenMM_AmoebaMultipoleForce_PolarizationCovalent13(6),
        OpenMM_AmoebaMultipoleForce_PolarizationCovalent14(7),
        OpenMM_AmoebaMultipoleForce_CovalentEnd(8);

        OpenMM_AmoebaMultipoleForce_CovalentType(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_AmoebaMultipoleForce_CovalentType> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_AmoebaMultipoleForce_CovalentType> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };

    /**
     * enum values<br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h</i>
     */
    public enum OpenMM_AmoebaVdwForce_NonbondedMethod implements IntValuedEnum<OpenMM_AmoebaVdwForce_NonbondedMethod> {
        OpenMM_AmoebaVdwForce_NoCutoff(0),
        OpenMM_AmoebaVdwForce_CutoffPeriodic(1);

        OpenMM_AmoebaVdwForce_NonbondedMethod(long value) {
            this.value = value;
        }
        public final long value;

        public long value() {
            return this.value;
        }

        public Iterator<OpenMM_AmoebaVdwForce_NonbondedMethod> iterator() {
            return Collections.singleton(this).iterator();
        }

        public static IntValuedEnum<OpenMM_AmoebaVdwForce_NonbondedMethod> fromValue(int value) {
            return FlagSet.fromValue(value, values());
        }
    };
    /**
     * Global Constants
     */
    public static final double OpenMM_NmPerAngstrom = 0.1;
    public static final double OpenMM_AngstromsPerNm = 10.0;
    public static final double OpenMM_PsPerFs = 0.001;
    public static final double OpenMM_FsPerPs = 1000.0;
    public static final double OpenMM_KJPerKcal = 4.184;
    public static final double OpenMM_KcalPerKJ = 1.0 / 4.184;
    public static final double OpenMM_RadiansPerDegree = 3.1415926535897932385 / 180.0;
    public static final double OpenMM_DegreesPerRadian = 180.0 / 3.1415926535897932385;
    public static final double OpenMM_SigmaPerVdwRadius = 1.7817974362806786095;

    /**
     * OpenMM_Vec3<br>
     * Original signature :
     * <code>OpenMM_Vec3 OpenMM_Vec3_scale(const OpenMM_Vec3, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:92</i>
     */
    public static native OpenMM_Vec3 OpenMM_Vec3_scale(OpenMM_Vec3 vec, double scale);

    /**
     * OpenMM_Vec3Array<br>
     * Original signature :
     * <code>OpenMM_Vec3Array* OpenMM_Vec3Array_create(int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:95</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> OpenMM_Vec3Array_create(int size) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Vec3Array_create$2(size), OpenMMLibrary.OpenMM_Vec3Array_struct.class);
    }

    @Ptr
    @Name("OpenMM_Vec3Array_create")
    protected native static long OpenMM_Vec3Array_create$2(int size);

    /**
     * Original signature :
     * <code>void OpenMM_Vec3Array_destroy(OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:96</i>
     */
    public static void OpenMM_Vec3Array_destroy(Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> array) {
        OpenMM_Vec3Array_destroy(Pointer.getPeer(array));
    }

    protected native static void OpenMM_Vec3Array_destroy(@Ptr long array);

    /**
     * Original signature :
     * <code>int OpenMM_Vec3Array_getSize(const OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:97</i>
     */
    public static int OpenMM_Vec3Array_getSize(Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> array) {
        return OpenMM_Vec3Array_getSize(Pointer.getPeer(array));
    }

    protected native static int OpenMM_Vec3Array_getSize(@Ptr long array);

    /**
     * Original signature :
     * <code>void OpenMM_Vec3Array_resize(OpenMM_Vec3Array*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:98</i>
     */
    public static void OpenMM_Vec3Array_resize(Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> array, int size) {
        OpenMM_Vec3Array_resize(Pointer.getPeer(array), size);
    }

    protected native static void OpenMM_Vec3Array_resize(@Ptr long array, int size);

    /**
     * Original signature :
     * <code>void OpenMM_Vec3Array_append(OpenMM_Vec3Array*, const OpenMM_Vec3)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:99</i>
     */
    public static void OpenMM_Vec3Array_append(Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> array, OpenMM_Vec3 vec) {
        OpenMM_Vec3Array_append(Pointer.getPeer(array), vec);
    }

    protected native static void OpenMM_Vec3Array_append(@Ptr long array, OpenMM_Vec3 vec);

    /**
     * Original signature :
     * <code>void OpenMM_Vec3Array_set(OpenMM_Vec3Array*, int, const OpenMM_Vec3)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:100</i>
     */
    public static void OpenMM_Vec3Array_set(Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> array, int index, OpenMM_Vec3 vec) {
        OpenMM_Vec3Array_set(Pointer.getPeer(array), index, vec);
    }

    protected native static void OpenMM_Vec3Array_set(@Ptr long array, int index, OpenMM_Vec3 vec);

    /**
     * Original signature :
     * <code>OpenMM_Vec3* OpenMM_Vec3Array_get(const OpenMM_Vec3Array*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:101</i>
     */
    public static Pointer<OpenMM_Vec3> OpenMM_Vec3Array_get(Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> array, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Vec3Array_get(Pointer.getPeer(array), index), OpenMM_Vec3.class);
    }

    @Ptr
    protected native static long OpenMM_Vec3Array_get(@Ptr long array, int index);

    /**
     * OpenMM_StringArray<br>
     * Original signature :
     * <code>OpenMM_StringArray* OpenMM_StringArray_create(int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:104</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_StringArray_struct> OpenMM_StringArray_create(int size) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_StringArray_create$2(size), OpenMMLibrary.OpenMM_StringArray_struct.class);
    }

    @Ptr
    @Name("OpenMM_StringArray_create")
    protected native static long OpenMM_StringArray_create$2(int size);

    /**
     * Original signature :
     * <code>void OpenMM_StringArray_destroy(OpenMM_StringArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:105</i>
     */
    public static void OpenMM_StringArray_destroy(Pointer<OpenMMLibrary.OpenMM_StringArray_struct> array) {
        OpenMM_StringArray_destroy(Pointer.getPeer(array));
    }

    protected native static void OpenMM_StringArray_destroy(@Ptr long array);

    /**
     * Original signature :
     * <code>int OpenMM_StringArray_getSize(const OpenMM_StringArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:106</i>
     */
    public static int OpenMM_StringArray_getSize(Pointer<OpenMMLibrary.OpenMM_StringArray_struct> array) {
        return OpenMM_StringArray_getSize(Pointer.getPeer(array));
    }

    protected native static int OpenMM_StringArray_getSize(@Ptr long array);

    /**
     * Original signature :
     * <code>void OpenMM_StringArray_resize(OpenMM_StringArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:107</i>
     */
    public static void OpenMM_StringArray_resize(Pointer<OpenMMLibrary.OpenMM_StringArray_struct> array, int size) {
        OpenMM_StringArray_resize(Pointer.getPeer(array), size);
    }

    protected native static void OpenMM_StringArray_resize(@Ptr long array, int size);

    /**
     * Original signature :
     * <code>void OpenMM_StringArray_append(OpenMM_StringArray*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:108</i>
     */
    public static void OpenMM_StringArray_append(Pointer<OpenMMLibrary.OpenMM_StringArray_struct> array, Pointer<Byte> string) {
        OpenMM_StringArray_append(Pointer.getPeer(array), Pointer.getPeer(string));
    }

    protected native static void OpenMM_StringArray_append(@Ptr long array, @Ptr long string);

    /**
     * Original signature :
     * <code>void OpenMM_StringArray_set(OpenMM_StringArray*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:109</i>
     */
    public static void OpenMM_StringArray_set(Pointer<OpenMMLibrary.OpenMM_StringArray_struct> array, int index, Pointer<Byte> string) {
        OpenMM_StringArray_set(Pointer.getPeer(array), index, Pointer.getPeer(string));
    }

    protected native static void OpenMM_StringArray_set(@Ptr long array, int index, @Ptr long string);

    /**
     * Original signature :
     * <code>char* OpenMM_StringArray_get(const OpenMM_StringArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:110</i>
     */
    public static Pointer<Byte> OpenMM_StringArray_get(Pointer<OpenMMLibrary.OpenMM_StringArray_struct> array, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_StringArray_get(Pointer.getPeer(array), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_StringArray_get(@Ptr long array, int index);

    /**
     * OpenMM_BondArray<br>
     * Original signature :
     * <code>OpenMM_BondArray* OpenMM_BondArray_create(int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:113</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_BondArray_struct> OpenMM_BondArray_create(int size) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_BondArray_create$2(size), OpenMMLibrary.OpenMM_BondArray_struct.class);
    }

    @Ptr
    @Name("OpenMM_BondArray_create")
    protected native static long OpenMM_BondArray_create$2(int size);

    /**
     * Original signature :
     * <code>void OpenMM_BondArray_destroy(OpenMM_BondArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:114</i>
     */
    public static void OpenMM_BondArray_destroy(Pointer<OpenMMLibrary.OpenMM_BondArray_struct> array) {
        OpenMM_BondArray_destroy(Pointer.getPeer(array));
    }

    protected native static void OpenMM_BondArray_destroy(@Ptr long array);

    /**
     * Original signature :
     * <code>int OpenMM_BondArray_getSize(const OpenMM_BondArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:115</i>
     */
    public static int OpenMM_BondArray_getSize(Pointer<OpenMMLibrary.OpenMM_BondArray_struct> array) {
        return OpenMM_BondArray_getSize(Pointer.getPeer(array));
    }

    protected native static int OpenMM_BondArray_getSize(@Ptr long array);

    /**
     * Original signature :
     * <code>void OpenMM_BondArray_resize(OpenMM_BondArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:116</i>
     */
    public static void OpenMM_BondArray_resize(Pointer<OpenMMLibrary.OpenMM_BondArray_struct> array, int size) {
        OpenMM_BondArray_resize(Pointer.getPeer(array), size);
    }

    protected native static void OpenMM_BondArray_resize(@Ptr long array, int size);

    /**
     * Original signature :
     * <code>void OpenMM_BondArray_append(OpenMM_BondArray*, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:117</i>
     */
    public static void OpenMM_BondArray_append(Pointer<OpenMMLibrary.OpenMM_BondArray_struct> array, int particle1, int particle2) {
        OpenMM_BondArray_append(Pointer.getPeer(array), particle1, particle2);
    }

    protected native static void OpenMM_BondArray_append(@Ptr long array, int particle1, int particle2);

    /**
     * Original signature :
     * <code>void OpenMM_BondArray_set(OpenMM_BondArray*, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:118</i>
     */
    public static void OpenMM_BondArray_set(Pointer<OpenMMLibrary.OpenMM_BondArray_struct> array, int index, int particle1, int particle2) {
        OpenMM_BondArray_set(Pointer.getPeer(array), index, particle1, particle2);
    }

    protected native static void OpenMM_BondArray_set(@Ptr long array, int index, int particle1, int particle2);

    /**
     * Original signature :
     * <code>void OpenMM_BondArray_get(const OpenMM_BondArray*, int, int*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:119</i>
     */
    public static void OpenMM_BondArray_get(Pointer<OpenMMLibrary.OpenMM_BondArray_struct> array, int index, Pointer<Integer> particle1, Pointer<Integer> particle2) {
        OpenMM_BondArray_get(Pointer.getPeer(array), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2));
    }

    protected native static void OpenMM_BondArray_get(@Ptr long array, int index, @Ptr long particle1, @Ptr long particle2);

    /**
     * OpenMM_ParameterArray<br>
     * Original signature :
     * <code>int OpenMM_ParameterArray_getSize(const OpenMM_ParameterArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:122</i>
     */
    public static int OpenMM_ParameterArray_getSize(Pointer<OpenMMLibrary.OpenMM_ParameterArray_struct> array) {
        return OpenMM_ParameterArray_getSize(Pointer.getPeer(array));
    }

    protected native static int OpenMM_ParameterArray_getSize(@Ptr long array);

    /**
     * Original signature :
     * <code>double OpenMM_ParameterArray_get(const OpenMM_ParameterArray*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:123</i>
     */
    public static double OpenMM_ParameterArray_get(Pointer<OpenMMLibrary.OpenMM_ParameterArray_struct> array, Pointer<Byte> name) {
        return OpenMM_ParameterArray_get(Pointer.getPeer(array), Pointer.getPeer(name));
    }

    protected native static double OpenMM_ParameterArray_get(@Ptr long array, @Ptr long name);

    /**
     * OpenMM_PropertyArray<br>
     * Original signature :
     * <code>int OpenMM_PropertyArray_getSize(const OpenMM_PropertyArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:126</i>
     */
    public static int OpenMM_PropertyArray_getSize(Pointer<OpenMMLibrary.OpenMM_PropertyArray_struct> array) {
        return OpenMM_PropertyArray_getSize(Pointer.getPeer(array));
    }

    protected native static int OpenMM_PropertyArray_getSize(@Ptr long array);

    /**
     * Original signature :
     * <code>char* OpenMM_PropertyArray_get(const OpenMM_PropertyArray*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:127</i>
     */
    public static Pointer<Byte> OpenMM_PropertyArray_get(Pointer<OpenMMLibrary.OpenMM_PropertyArray_struct> array, Pointer<Byte> name) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_PropertyArray_get(Pointer.getPeer(array), Pointer.getPeer(name)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_PropertyArray_get(@Ptr long array, @Ptr long name);

    /**
     * OpenMM_DoubleArray<br>
     * Original signature :
     * <code>OpenMM_DoubleArray* OpenMM_DoubleArray_create(int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:130</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> OpenMM_DoubleArray_create(int size) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_DoubleArray_create$2(size), OpenMMLibrary.OpenMM_DoubleArray_struct.class);
    }

    @Ptr
    @Name("OpenMM_DoubleArray_create")
    protected native static long OpenMM_DoubleArray_create$2(int size);

    /**
     * Original signature :
     * <code>void OpenMM_DoubleArray_destroy(OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:131</i>
     */
    public static void OpenMM_DoubleArray_destroy(Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> array) {
        OpenMM_DoubleArray_destroy(Pointer.getPeer(array));
    }

    protected native static void OpenMM_DoubleArray_destroy(@Ptr long array);

    /**
     * Original signature :
     * <code>int OpenMM_DoubleArray_getSize(const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:132</i>
     */
    public static int OpenMM_DoubleArray_getSize(Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> array) {
        return OpenMM_DoubleArray_getSize(Pointer.getPeer(array));
    }

    protected native static int OpenMM_DoubleArray_getSize(@Ptr long array);

    /**
     * Original signature :
     * <code>void OpenMM_DoubleArray_resize(OpenMM_DoubleArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:133</i>
     */
    public static void OpenMM_DoubleArray_resize(Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> array, int size) {
        OpenMM_DoubleArray_resize(Pointer.getPeer(array), size);
    }

    protected native static void OpenMM_DoubleArray_resize(@Ptr long array, int size);

    /**
     * Original signature :
     * <code>void OpenMM_DoubleArray_append(OpenMM_DoubleArray*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:134</i>
     */
    public static void OpenMM_DoubleArray_append(Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> array, double value) {
        OpenMM_DoubleArray_append(Pointer.getPeer(array), value);
    }

    protected native static void OpenMM_DoubleArray_append(@Ptr long array, double value);

    /**
     * Original signature :
     * <code>void OpenMM_DoubleArray_set(OpenMM_DoubleArray*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:135</i>
     */
    public static void OpenMM_DoubleArray_set(Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> array, int index, double value) {
        OpenMM_DoubleArray_set(Pointer.getPeer(array), index, value);
    }

    protected native static void OpenMM_DoubleArray_set(@Ptr long array, int index, double value);

    /**
     * Original signature :
     * <code>double OpenMM_DoubleArray_get(const OpenMM_DoubleArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:136</i>
     */
    public static double OpenMM_DoubleArray_get(Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> array, int index) {
        return OpenMM_DoubleArray_get(Pointer.getPeer(array), index);
    }

    protected native static double OpenMM_DoubleArray_get(@Ptr long array, int index);

    /**
     * OpenMM_IntArray<br>
     * Original signature :
     * <code>OpenMM_IntArray* OpenMM_IntArray_create(int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:139</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_IntArray_struct> OpenMM_IntArray_create(int size) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_IntArray_create$2(size), OpenMMLibrary.OpenMM_IntArray_struct.class);
    }

    @Ptr
    @Name("OpenMM_IntArray_create")
    protected native static long OpenMM_IntArray_create$2(int size);

    /**
     * Original signature :
     * <code>void OpenMM_IntArray_destroy(OpenMM_IntArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:140</i>
     */
    public static void OpenMM_IntArray_destroy(Pointer<OpenMMLibrary.OpenMM_IntArray_struct> array) {
        OpenMM_IntArray_destroy(Pointer.getPeer(array));
    }

    protected native static void OpenMM_IntArray_destroy(@Ptr long array);

    /**
     * Original signature :
     * <code>int OpenMM_IntArray_getSize(const OpenMM_IntArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:141</i>
     */
    public static int OpenMM_IntArray_getSize(Pointer<OpenMMLibrary.OpenMM_IntArray_struct> array) {
        return OpenMM_IntArray_getSize(Pointer.getPeer(array));
    }

    protected native static int OpenMM_IntArray_getSize(@Ptr long array);

    /**
     * Original signature :
     * <code>void OpenMM_IntArray_resize(OpenMM_IntArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:142</i>
     */
    public static void OpenMM_IntArray_resize(Pointer<OpenMMLibrary.OpenMM_IntArray_struct> array, int size) {
        OpenMM_IntArray_resize(Pointer.getPeer(array), size);
    }

    protected native static void OpenMM_IntArray_resize(@Ptr long array, int size);

    /**
     * Original signature :
     * <code>void OpenMM_IntArray_append(OpenMM_IntArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:143</i>
     */
    public static void OpenMM_IntArray_append(Pointer<OpenMMLibrary.OpenMM_IntArray_struct> array, int value) {
        OpenMM_IntArray_append(Pointer.getPeer(array), value);
    }

    protected native static void OpenMM_IntArray_append(@Ptr long array, int value);

    /**
     * Original signature :
     * <code>void OpenMM_IntArray_set(OpenMM_IntArray*, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:144</i>
     */
    public static void OpenMM_IntArray_set(Pointer<OpenMMLibrary.OpenMM_IntArray_struct> array, int index, int value) {
        OpenMM_IntArray_set(Pointer.getPeer(array), index, value);
    }

    protected native static void OpenMM_IntArray_set(@Ptr long array, int index, int value);

    /**
     * Original signature :
     * <code>int OpenMM_IntArray_get(const OpenMM_IntArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:145</i>
     */
    public static int OpenMM_IntArray_get(Pointer<OpenMMLibrary.OpenMM_IntArray_struct> array, int index) {
        return OpenMM_IntArray_get(Pointer.getPeer(array), index);
    }

    protected native static int OpenMM_IntArray_get(@Ptr long array, int index);

    /**
     * OpenMM_IntSet<br>
     * Original signature :
     * <code>OpenMM_IntSet* OpenMM_IntSet_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:148</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_IntSet_struct> OpenMM_IntSet_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_IntSet_create$2(), OpenMMLibrary.OpenMM_IntSet_struct.class);
    }

    @Ptr
    @Name("OpenMM_IntSet_create")
    protected native static long OpenMM_IntSet_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_IntSet_destroy(OpenMM_IntSet*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:149</i>
     */
    public static void OpenMM_IntSet_destroy(Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set) {
        OpenMM_IntSet_destroy(Pointer.getPeer(set));
    }

    protected native static void OpenMM_IntSet_destroy(@Ptr long set);

    /**
     * Original signature :
     * <code>int OpenMM_IntSet_getSize(const OpenMM_IntSet*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:150</i>
     */
    public static int OpenMM_IntSet_getSize(Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set) {
        return OpenMM_IntSet_getSize(Pointer.getPeer(set));
    }

    protected native static int OpenMM_IntSet_getSize(@Ptr long set);

    /**
     * Original signature :
     * <code>void OpenMM_IntSet_insert(OpenMM_IntSet*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:151</i>
     */
    public static void OpenMM_IntSet_insert(Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set, int value) {
        OpenMM_IntSet_insert(Pointer.getPeer(set), value);
    }

    protected native static void OpenMM_IntSet_insert(@Ptr long set, int value);

    /**
     * These methods need to be handled specially, since their C++ APIs cannot
     * be directly translated to C.<br>
     * Unlike the C++ versions, the return value is allocated on the heap, and
     * you must delete it yourself.<br>
     * Original signature :
     * <code>OpenMM_State* OpenMM_Context_getState(const OpenMM_Context*, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:155</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_State_struct> OpenMM_Context_getState(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, int types, int enforcePeriodicBox) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_getState(Pointer.getPeer(target), types, enforcePeriodicBox), OpenMMLibrary.OpenMM_State_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_getState(@Ptr long target, int types, int enforcePeriodicBox);

    /**
     * Original signature :
     * <code>OpenMM_State* OpenMM_Context_getState_2(const OpenMM_Context*, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:156</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_State_struct> OpenMM_Context_getState_2(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, int types, int enforcePeriodicBox, int groups) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_getState_2(Pointer.getPeer(target), types, enforcePeriodicBox, groups), OpenMMLibrary.OpenMM_State_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_getState_2(@Ptr long target, int types, int enforcePeriodicBox, int groups);

    /**
     * Original signature :
     * <code>OpenMM_StringArray* OpenMM_Platform_loadPluginsFromDirectory(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:157</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_StringArray_struct> OpenMM_Platform_loadPluginsFromDirectory(Pointer<Byte> directory) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_loadPluginsFromDirectory(Pointer.getPeer(directory)), OpenMMLibrary.OpenMM_StringArray_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Platform_loadPluginsFromDirectory(@Ptr long directory);

    /**
     * Original signature :
     * <code>OpenMM_StringArray* OpenMM_Platform_getPluginLoadFailures()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:158</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_StringArray_struct> OpenMM_Platform_getPluginLoadFailures() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getPluginLoadFailures$2(), OpenMMLibrary.OpenMM_StringArray_struct.class);
    }

    @Ptr
    @Name("OpenMM_Platform_getPluginLoadFailures")
    protected native static long OpenMM_Platform_getPluginLoadFailures$2();

    /**
     * Original signature :
     * <code>char* OpenMM_XmlSerializer_serializeSystem(const OpenMM_System*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:159</i>
     */
    public static Pointer<Byte> OpenMM_XmlSerializer_serializeSystem(Pointer<OpenMMLibrary.OpenMM_System_struct> system) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_XmlSerializer_serializeSystem(Pointer.getPeer(system)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_XmlSerializer_serializeSystem(@Ptr long system);

    /**
     * Original signature :
     * <code>char* OpenMM_XmlSerializer_serializeState(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:160</i>
     */
    public static Pointer<Byte> OpenMM_XmlSerializer_serializeState(Pointer<OpenMMLibrary.OpenMM_State_struct> state) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_XmlSerializer_serializeState(Pointer.getPeer(state)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_XmlSerializer_serializeState(@Ptr long state);

    /**
     * Original signature :
     * <code>char* OpenMM_XmlSerializer_serializeIntegrator(const OpenMM_Integrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:161</i>
     */
    public static Pointer<Byte> OpenMM_XmlSerializer_serializeIntegrator(Pointer<OpenMMLibrary.OpenMM_Integrator_struct> integrator) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_XmlSerializer_serializeIntegrator(Pointer.getPeer(integrator)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_XmlSerializer_serializeIntegrator(@Ptr long integrator);

    /**
     * Original signature :
     * <code>OpenMM_System* OpenMM_XmlSerializer_deserializeSystem(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:162</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_System_struct> OpenMM_XmlSerializer_deserializeSystem(Pointer<Byte> xml) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_XmlSerializer_deserializeSystem(Pointer.getPeer(xml)), OpenMMLibrary.OpenMM_System_struct.class);
    }

    @Ptr
    protected native static long OpenMM_XmlSerializer_deserializeSystem(@Ptr long xml);

    /**
     * Original signature :
     * <code>OpenMM_State* OpenMM_XmlSerializer_deserializeState(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:163</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_State_struct> OpenMM_XmlSerializer_deserializeState(Pointer<Byte> xml) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_XmlSerializer_deserializeState(Pointer.getPeer(xml)), OpenMMLibrary.OpenMM_State_struct.class);
    }

    @Ptr
    protected native static long OpenMM_XmlSerializer_deserializeState(@Ptr long xml);

    /**
     * Original signature :
     * <code>OpenMM_Integrator* OpenMM_XmlSerializer_deserializeIntegrator(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:164</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Integrator_struct> OpenMM_XmlSerializer_deserializeIntegrator(Pointer<Byte> xml) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_XmlSerializer_deserializeIntegrator(Pointer.getPeer(xml)), OpenMMLibrary.OpenMM_Integrator_struct.class);
    }

    @Ptr
    protected native static long OpenMM_XmlSerializer_deserializeIntegrator(@Ptr long xml);

    /**
     * Force<br>
     * Original signature :
     * <code>void OpenMM_Force_destroy(OpenMM_Force*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:167</i>
     */
    public static void OpenMM_Force_destroy(Pointer<OpenMMLibrary.OpenMM_Force_struct> target) {
        OpenMM_Force_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Force_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_Force_getForceGroup(const OpenMM_Force*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:168</i>
     */
    public static int OpenMM_Force_getForceGroup(Pointer<OpenMMLibrary.OpenMM_Force_struct> target) {
        return OpenMM_Force_getForceGroup(Pointer.getPeer(target));
    }

    protected native static int OpenMM_Force_getForceGroup(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Force_setForceGroup(OpenMM_Force*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:169</i>
     */
    public static void OpenMM_Force_setForceGroup(Pointer<OpenMMLibrary.OpenMM_Force_struct> target, int group) {
        OpenMM_Force_setForceGroup(Pointer.getPeer(target), group);
    }

    protected native static void OpenMM_Force_setForceGroup(@Ptr long target, int group);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_Force_usesPeriodicBoundaryConditions(const OpenMM_Force*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:170</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_Force_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_Force_struct> target) {
        return FlagSet.fromValue(OpenMM_Force_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_Force_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AndersenThermostat<br>
     * Original signature :
     * <code>OpenMM_AndersenThermostat* OpenMM_AndersenThermostat_create(double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:173</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> OpenMM_AndersenThermostat_create(double defaultTemperature, double defaultCollisionFrequency) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AndersenThermostat_create$2(defaultTemperature, defaultCollisionFrequency), OpenMMLibrary.OpenMM_AndersenThermostat_struct.class);
    }

    @Ptr
    @Name("OpenMM_AndersenThermostat_create")
    protected native static long OpenMM_AndersenThermostat_create$2(double defaultTemperature, double defaultCollisionFrequency);

    /**
     * Original signature :
     * <code>void OpenMM_AndersenThermostat_destroy(OpenMM_AndersenThermostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:174</i>
     */
    public static void OpenMM_AndersenThermostat_destroy(Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> target) {
        OpenMM_AndersenThermostat_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AndersenThermostat_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_AndersenThermostat_Temperature()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:175</i>
     */
    public static Pointer<Byte> OpenMM_AndersenThermostat_Temperature() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AndersenThermostat_Temperature$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_AndersenThermostat_Temperature")
    protected native static long OpenMM_AndersenThermostat_Temperature$2();

    /**
     * Original signature :
     * <code>char* OpenMM_AndersenThermostat_CollisionFrequency()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:176</i>
     */
    public static Pointer<Byte> OpenMM_AndersenThermostat_CollisionFrequency() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AndersenThermostat_CollisionFrequency$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_AndersenThermostat_CollisionFrequency")
    protected native static long OpenMM_AndersenThermostat_CollisionFrequency$2();

    /**
     * Original signature :
     * <code>double OpenMM_AndersenThermostat_getDefaultTemperature(const OpenMM_AndersenThermostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:177</i>
     */
    public static double OpenMM_AndersenThermostat_getDefaultTemperature(Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> target) {
        return OpenMM_AndersenThermostat_getDefaultTemperature(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AndersenThermostat_getDefaultTemperature(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AndersenThermostat_setDefaultTemperature(OpenMM_AndersenThermostat*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:178</i>
     */
    public static void OpenMM_AndersenThermostat_setDefaultTemperature(Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> target, double temperature) {
        OpenMM_AndersenThermostat_setDefaultTemperature(Pointer.getPeer(target), temperature);
    }

    protected native static void OpenMM_AndersenThermostat_setDefaultTemperature(@Ptr long target, double temperature);

    /**
     * Original signature :
     * <code>double OpenMM_AndersenThermostat_getDefaultCollisionFrequency(const OpenMM_AndersenThermostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:179</i>
     */
    public static double OpenMM_AndersenThermostat_getDefaultCollisionFrequency(Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> target) {
        return OpenMM_AndersenThermostat_getDefaultCollisionFrequency(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AndersenThermostat_getDefaultCollisionFrequency(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AndersenThermostat_setDefaultCollisionFrequency(OpenMM_AndersenThermostat*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:180</i>
     */
    public static void OpenMM_AndersenThermostat_setDefaultCollisionFrequency(Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> target, double frequency) {
        OpenMM_AndersenThermostat_setDefaultCollisionFrequency(Pointer.getPeer(target), frequency);
    }

    protected native static void OpenMM_AndersenThermostat_setDefaultCollisionFrequency(@Ptr long target, double frequency);

    /**
     * Original signature :
     * <code>int OpenMM_AndersenThermostat_getRandomNumberSeed(const OpenMM_AndersenThermostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:181</i>
     */
    public static int OpenMM_AndersenThermostat_getRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> target) {
        return OpenMM_AndersenThermostat_getRandomNumberSeed(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AndersenThermostat_getRandomNumberSeed(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AndersenThermostat_setRandomNumberSeed(OpenMM_AndersenThermostat*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:182</i>
     */
    public static void OpenMM_AndersenThermostat_setRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> target, int seed) {
        OpenMM_AndersenThermostat_setRandomNumberSeed(Pointer.getPeer(target), seed);
    }

    protected native static void OpenMM_AndersenThermostat_setRandomNumberSeed(@Ptr long target, int seed);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AndersenThermostat_usesPeriodicBoundaryConditions(const OpenMM_AndersenThermostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:183</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AndersenThermostat_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AndersenThermostat_struct> target) {
        return FlagSet.fromValue(OpenMM_AndersenThermostat_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AndersenThermostat_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Integrator<br>
     * Original signature :
     * <code>void OpenMM_Integrator_destroy(OpenMM_Integrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:186</i>
     */
    public static void OpenMM_Integrator_destroy(Pointer<OpenMMLibrary.OpenMM_Integrator_struct> target) {
        OpenMM_Integrator_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Integrator_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_Integrator_getStepSize(const OpenMM_Integrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:187</i>
     */
    public static double OpenMM_Integrator_getStepSize(Pointer<OpenMMLibrary.OpenMM_Integrator_struct> target) {
        return OpenMM_Integrator_getStepSize(Pointer.getPeer(target));
    }

    protected native static double OpenMM_Integrator_getStepSize(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Integrator_setStepSize(OpenMM_Integrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:188</i>
     */
    public static void OpenMM_Integrator_setStepSize(Pointer<OpenMMLibrary.OpenMM_Integrator_struct> target, double size) {
        OpenMM_Integrator_setStepSize(Pointer.getPeer(target), size);
    }

    protected native static void OpenMM_Integrator_setStepSize(@Ptr long target, double size);

    /**
     * Original signature :
     * <code>double OpenMM_Integrator_getConstraintTolerance(const OpenMM_Integrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:189</i>
     */
    public static double OpenMM_Integrator_getConstraintTolerance(Pointer<OpenMMLibrary.OpenMM_Integrator_struct> target) {
        return OpenMM_Integrator_getConstraintTolerance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_Integrator_getConstraintTolerance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Integrator_setConstraintTolerance(OpenMM_Integrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:190</i>
     */
    public static void OpenMM_Integrator_setConstraintTolerance(Pointer<OpenMMLibrary.OpenMM_Integrator_struct> target, double tol) {
        OpenMM_Integrator_setConstraintTolerance(Pointer.getPeer(target), tol);
    }

    protected native static void OpenMM_Integrator_setConstraintTolerance(@Ptr long target, double tol);

    /**
     * Original signature :
     * <code>void OpenMM_Integrator_step(OpenMM_Integrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:191</i>
     */
    public static void OpenMM_Integrator_step(Pointer<OpenMMLibrary.OpenMM_Integrator_struct> target, int steps) {
        OpenMM_Integrator_step(Pointer.getPeer(target), steps);
    }

    protected native static void OpenMM_Integrator_step(@Ptr long target, int steps);

    /**
     * BrownianIntegrator<br>
     * Original signature :
     * <code>OpenMM_BrownianIntegrator* OpenMM_BrownianIntegrator_create(double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:194</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> OpenMM_BrownianIntegrator_create(double temperature, double frictionCoeff, double stepSize) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_BrownianIntegrator_create$2(temperature, frictionCoeff, stepSize), OpenMMLibrary.OpenMM_BrownianIntegrator_struct.class);
    }

    @Ptr
    @Name("OpenMM_BrownianIntegrator_create")
    protected native static long OpenMM_BrownianIntegrator_create$2(double temperature, double frictionCoeff, double stepSize);

    /**
     * Original signature :
     * <code>void OpenMM_BrownianIntegrator_destroy(OpenMM_BrownianIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:195</i>
     */
    public static void OpenMM_BrownianIntegrator_destroy(Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> target) {
        OpenMM_BrownianIntegrator_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_BrownianIntegrator_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_BrownianIntegrator_getTemperature(const OpenMM_BrownianIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:196</i>
     */
    public static double OpenMM_BrownianIntegrator_getTemperature(Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> target) {
        return OpenMM_BrownianIntegrator_getTemperature(Pointer.getPeer(target));
    }

    protected native static double OpenMM_BrownianIntegrator_getTemperature(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_BrownianIntegrator_setTemperature(OpenMM_BrownianIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:197</i>
     */
    public static void OpenMM_BrownianIntegrator_setTemperature(Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> target, double temp) {
        OpenMM_BrownianIntegrator_setTemperature(Pointer.getPeer(target), temp);
    }

    protected native static void OpenMM_BrownianIntegrator_setTemperature(@Ptr long target, double temp);

    /**
     * Original signature :
     * <code>double OpenMM_BrownianIntegrator_getFriction(const OpenMM_BrownianIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:198</i>
     */
    public static double OpenMM_BrownianIntegrator_getFriction(Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> target) {
        return OpenMM_BrownianIntegrator_getFriction(Pointer.getPeer(target));
    }

    protected native static double OpenMM_BrownianIntegrator_getFriction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_BrownianIntegrator_setFriction(OpenMM_BrownianIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:199</i>
     */
    public static void OpenMM_BrownianIntegrator_setFriction(Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> target, double coeff) {
        OpenMM_BrownianIntegrator_setFriction(Pointer.getPeer(target), coeff);
    }

    protected native static void OpenMM_BrownianIntegrator_setFriction(@Ptr long target, double coeff);

    /**
     * Original signature :
     * <code>int OpenMM_BrownianIntegrator_getRandomNumberSeed(const OpenMM_BrownianIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:200</i>
     */
    public static int OpenMM_BrownianIntegrator_getRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> target) {
        return OpenMM_BrownianIntegrator_getRandomNumberSeed(Pointer.getPeer(target));
    }

    protected native static int OpenMM_BrownianIntegrator_getRandomNumberSeed(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_BrownianIntegrator_setRandomNumberSeed(OpenMM_BrownianIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:201</i>
     */
    public static void OpenMM_BrownianIntegrator_setRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> target, int seed) {
        OpenMM_BrownianIntegrator_setRandomNumberSeed(Pointer.getPeer(target), seed);
    }

    protected native static void OpenMM_BrownianIntegrator_setRandomNumberSeed(@Ptr long target, int seed);

    /**
     * Original signature :
     * <code>void OpenMM_BrownianIntegrator_step(OpenMM_BrownianIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:202</i>
     */
    public static void OpenMM_BrownianIntegrator_step(Pointer<OpenMMLibrary.OpenMM_BrownianIntegrator_struct> target, int steps) {
        OpenMM_BrownianIntegrator_step(Pointer.getPeer(target), steps);
    }

    protected native static void OpenMM_BrownianIntegrator_step(@Ptr long target, int steps);

    /**
     * CMAPTorsionForce<br>
     * Original signature :
     * <code>OpenMM_CMAPTorsionForce* OpenMM_CMAPTorsionForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:205</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> OpenMM_CMAPTorsionForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CMAPTorsionForce_create$2(), OpenMMLibrary.OpenMM_CMAPTorsionForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_CMAPTorsionForce_create")
    protected native static long OpenMM_CMAPTorsionForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_CMAPTorsionForce_destroy(OpenMM_CMAPTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:206</i>
     */
    public static void OpenMM_CMAPTorsionForce_destroy(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target) {
        OpenMM_CMAPTorsionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CMAPTorsionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CMAPTorsionForce_getNumMaps(const OpenMM_CMAPTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:207</i>
     */
    public static int OpenMM_CMAPTorsionForce_getNumMaps(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target) {
        return OpenMM_CMAPTorsionForce_getNumMaps(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CMAPTorsionForce_getNumMaps(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CMAPTorsionForce_getNumTorsions(const OpenMM_CMAPTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:208</i>
     */
    public static int OpenMM_CMAPTorsionForce_getNumTorsions(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target) {
        return OpenMM_CMAPTorsionForce_getNumTorsions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CMAPTorsionForce_getNumTorsions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CMAPTorsionForce_addMap(OpenMM_CMAPTorsionForce*, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:209</i>
     */
    public static int OpenMM_CMAPTorsionForce_addMap(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target, int size, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> energy) {
        return OpenMM_CMAPTorsionForce_addMap(Pointer.getPeer(target), size, Pointer.getPeer(energy));
    }

    protected native static int OpenMM_CMAPTorsionForce_addMap(@Ptr long target, int size, @Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CMAPTorsionForce_getMapParameters(const OpenMM_CMAPTorsionForce*, int, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:210</i>
     */
    public static void OpenMM_CMAPTorsionForce_getMapParameters(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target, int index, Pointer<Integer> size, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> energy) {
        OpenMM_CMAPTorsionForce_getMapParameters(Pointer.getPeer(target), index, Pointer.getPeer(size), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CMAPTorsionForce_getMapParameters(@Ptr long target, int index, @Ptr long size, @Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CMAPTorsionForce_setMapParameters(OpenMM_CMAPTorsionForce*, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:211</i>
     */
    public static void OpenMM_CMAPTorsionForce_setMapParameters(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target, int index, int size, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> energy) {
        OpenMM_CMAPTorsionForce_setMapParameters(Pointer.getPeer(target), index, size, Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CMAPTorsionForce_setMapParameters(@Ptr long target, int index, int size, @Ptr long energy);

    /**
     * Original signature :
     * <code>int OpenMM_CMAPTorsionForce_addTorsion(OpenMM_CMAPTorsionForce*, int, int, int, int, int, int, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:212</i>
     */
    public static int OpenMM_CMAPTorsionForce_addTorsion(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target, int map, int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4) {
        return OpenMM_CMAPTorsionForce_addTorsion(Pointer.getPeer(target), map, a1, a2, a3, a4, b1, b2, b3, b4);
    }

    protected native static int OpenMM_CMAPTorsionForce_addTorsion(@Ptr long target, int map, int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4);

    /**
     * Original signature :
     * <code>void OpenMM_CMAPTorsionForce_getTorsionParameters(const OpenMM_CMAPTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*, int*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:213</i>
     */
    public static void OpenMM_CMAPTorsionForce_getTorsionParameters(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target, int index, Pointer<Integer> map, Pointer<Integer> a1, Pointer<Integer> a2, Pointer<Integer> a3, Pointer<Integer> a4, Pointer<Integer> b1, Pointer<Integer> b2, Pointer<Integer> b3, Pointer<Integer> b4) {
        OpenMM_CMAPTorsionForce_getTorsionParameters(Pointer.getPeer(target), index, Pointer.getPeer(map), Pointer.getPeer(a1), Pointer.getPeer(a2), Pointer.getPeer(a3), Pointer.getPeer(a4), Pointer.getPeer(b1), Pointer.getPeer(b2), Pointer.getPeer(b3), Pointer.getPeer(b4));
    }

    protected native static void OpenMM_CMAPTorsionForce_getTorsionParameters(@Ptr long target, int index, @Ptr long map, @Ptr long a1, @Ptr long a2, @Ptr long a3, @Ptr long a4, @Ptr long b1, @Ptr long b2, @Ptr long b3, @Ptr long b4);

    /**
     * Original signature :
     * <code>void OpenMM_CMAPTorsionForce_setTorsionParameters(OpenMM_CMAPTorsionForce*, int, int, int, int, int, int, int, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:214</i>
     */
    public static void OpenMM_CMAPTorsionForce_setTorsionParameters(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target, int index, int map, int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4) {
        OpenMM_CMAPTorsionForce_setTorsionParameters(Pointer.getPeer(target), index, map, a1, a2, a3, a4, b1, b2, b3, b4);
    }

    protected native static void OpenMM_CMAPTorsionForce_setTorsionParameters(@Ptr long target, int index, int map, int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4);

    /**
     * Original signature :
     * <code>void OpenMM_CMAPTorsionForce_updateParametersInContext(OpenMM_CMAPTorsionForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:215</i>
     */
    public static void OpenMM_CMAPTorsionForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CMAPTorsionForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CMAPTorsionForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_CMAPTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_CMAPTorsionForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:216</i>
     */
    public static void OpenMM_CMAPTorsionForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_CMAPTorsionForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_CMAPTorsionForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CMAPTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_CMAPTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:217</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CMAPTorsionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CMAPTorsionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CMAPTorsionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CMAPTorsionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * CMMotionRemover<br>
     * Original signature :
     * <code>OpenMM_CMMotionRemover* OpenMM_CMMotionRemover_create(int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:220</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CMMotionRemover_struct> OpenMM_CMMotionRemover_create(int frequency) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CMMotionRemover_create$2(frequency), OpenMMLibrary.OpenMM_CMMotionRemover_struct.class);
    }

    @Ptr
    @Name("OpenMM_CMMotionRemover_create")
    protected native static long OpenMM_CMMotionRemover_create$2(int frequency);

    /**
     * Original signature :
     * <code>void OpenMM_CMMotionRemover_destroy(OpenMM_CMMotionRemover*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:221</i>
     */
    public static void OpenMM_CMMotionRemover_destroy(Pointer<OpenMMLibrary.OpenMM_CMMotionRemover_struct> target) {
        OpenMM_CMMotionRemover_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CMMotionRemover_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CMMotionRemover_getFrequency(const OpenMM_CMMotionRemover*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:222</i>
     */
    public static int OpenMM_CMMotionRemover_getFrequency(Pointer<OpenMMLibrary.OpenMM_CMMotionRemover_struct> target) {
        return OpenMM_CMMotionRemover_getFrequency(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CMMotionRemover_getFrequency(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CMMotionRemover_setFrequency(OpenMM_CMMotionRemover*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:223</i>
     */
    public static void OpenMM_CMMotionRemover_setFrequency(Pointer<OpenMMLibrary.OpenMM_CMMotionRemover_struct> target, int freq) {
        OpenMM_CMMotionRemover_setFrequency(Pointer.getPeer(target), freq);
    }

    protected native static void OpenMM_CMMotionRemover_setFrequency(@Ptr long target, int freq);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CMMotionRemover_usesPeriodicBoundaryConditions(const OpenMM_CMMotionRemover*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:224</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CMMotionRemover_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CMMotionRemover_struct> target) {
        return FlagSet.fromValue(OpenMM_CMMotionRemover_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CMMotionRemover_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * CompoundIntegrator<br>
     * Original signature :
     * <code>OpenMM_CompoundIntegrator* OpenMM_CompoundIntegrator_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:227</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> OpenMM_CompoundIntegrator_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CompoundIntegrator_create$2(), OpenMMLibrary.OpenMM_CompoundIntegrator_struct.class);
    }

    @Ptr
    @Name("OpenMM_CompoundIntegrator_create")
    protected native static long OpenMM_CompoundIntegrator_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_CompoundIntegrator_destroy(OpenMM_CompoundIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:228</i>
     */
    public static void OpenMM_CompoundIntegrator_destroy(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target) {
        OpenMM_CompoundIntegrator_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CompoundIntegrator_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CompoundIntegrator_getNumIntegrators(const OpenMM_CompoundIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:229</i>
     */
    public static int OpenMM_CompoundIntegrator_getNumIntegrators(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target) {
        return OpenMM_CompoundIntegrator_getNumIntegrators(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CompoundIntegrator_getNumIntegrators(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CompoundIntegrator_addIntegrator(OpenMM_CompoundIntegrator*, OpenMM_Integrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:230</i>
     */
    public static int OpenMM_CompoundIntegrator_addIntegrator(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target, Pointer<OpenMMLibrary.OpenMM_Integrator_struct> integrator) {
        return OpenMM_CompoundIntegrator_addIntegrator(Pointer.getPeer(target), Pointer.getPeer(integrator));
    }

    protected native static int OpenMM_CompoundIntegrator_addIntegrator(@Ptr long target, @Ptr long integrator);

    /**
     * Original signature :
     * <code>OpenMM_Integrator* OpenMM_CompoundIntegrator_getIntegrator(OpenMM_CompoundIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:231</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Integrator_struct> OpenMM_CompoundIntegrator_getIntegrator(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CompoundIntegrator_getIntegrator(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_Integrator_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CompoundIntegrator_getIntegrator(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CompoundIntegrator_getCurrentIntegrator(const OpenMM_CompoundIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:232</i>
     */
    public static int OpenMM_CompoundIntegrator_getCurrentIntegrator(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target) {
        return OpenMM_CompoundIntegrator_getCurrentIntegrator(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CompoundIntegrator_getCurrentIntegrator(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CompoundIntegrator_setCurrentIntegrator(OpenMM_CompoundIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:233</i>
     */
    public static void OpenMM_CompoundIntegrator_setCurrentIntegrator(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target, int index) {
        OpenMM_CompoundIntegrator_setCurrentIntegrator(Pointer.getPeer(target), index);
    }

    protected native static void OpenMM_CompoundIntegrator_setCurrentIntegrator(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>double OpenMM_CompoundIntegrator_getStepSize(const OpenMM_CompoundIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:234</i>
     */
    public static double OpenMM_CompoundIntegrator_getStepSize(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target) {
        return OpenMM_CompoundIntegrator_getStepSize(Pointer.getPeer(target));
    }

    protected native static double OpenMM_CompoundIntegrator_getStepSize(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CompoundIntegrator_setStepSize(OpenMM_CompoundIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:235</i>
     */
    public static void OpenMM_CompoundIntegrator_setStepSize(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target, double size) {
        OpenMM_CompoundIntegrator_setStepSize(Pointer.getPeer(target), size);
    }

    protected native static void OpenMM_CompoundIntegrator_setStepSize(@Ptr long target, double size);

    /**
     * Original signature :
     * <code>double OpenMM_CompoundIntegrator_getConstraintTolerance(const OpenMM_CompoundIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:236</i>
     */
    public static double OpenMM_CompoundIntegrator_getConstraintTolerance(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target) {
        return OpenMM_CompoundIntegrator_getConstraintTolerance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_CompoundIntegrator_getConstraintTolerance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CompoundIntegrator_setConstraintTolerance(OpenMM_CompoundIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:237</i>
     */
    public static void OpenMM_CompoundIntegrator_setConstraintTolerance(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target, double tol) {
        OpenMM_CompoundIntegrator_setConstraintTolerance(Pointer.getPeer(target), tol);
    }

    protected native static void OpenMM_CompoundIntegrator_setConstraintTolerance(@Ptr long target, double tol);

    /**
     * Original signature :
     * <code>void OpenMM_CompoundIntegrator_step(OpenMM_CompoundIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:238</i>
     */
    public static void OpenMM_CompoundIntegrator_step(Pointer<OpenMMLibrary.OpenMM_CompoundIntegrator_struct> target, int steps) {
        OpenMM_CompoundIntegrator_step(Pointer.getPeer(target), steps);
    }

    protected native static void OpenMM_CompoundIntegrator_step(@Ptr long target, int steps);

    /**
     * Context<br>
     * Original signature :
     * <code>OpenMM_Context* OpenMM_Context_create(const OpenMM_System*, OpenMM_Integrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:241</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Context_struct> OpenMM_Context_create(Pointer<OpenMMLibrary.OpenMM_System_struct> system, Pointer<OpenMMLibrary.OpenMM_Integrator_struct> integrator) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_create(Pointer.getPeer(system), Pointer.getPeer(integrator)), OpenMMLibrary.OpenMM_Context_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_create(@Ptr long system, @Ptr long integrator);

    /**
     * Original signature :
     * <code>OpenMM_Context* OpenMM_Context_create_2(const OpenMM_System*, OpenMM_Integrator*, OpenMM_Platform*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:242</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Context_struct> OpenMM_Context_create_2(Pointer<OpenMMLibrary.OpenMM_System_struct> system, Pointer<OpenMMLibrary.OpenMM_Integrator_struct> integrator, Pointer<OpenMMLibrary.OpenMM_Platform_struct> platform) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_create_2(Pointer.getPeer(system), Pointer.getPeer(integrator), Pointer.getPeer(platform)), OpenMMLibrary.OpenMM_Context_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_create_2(@Ptr long system, @Ptr long integrator, @Ptr long platform);

    /**
     * Original signature :
     * <code>OpenMM_Context* OpenMM_Context_create_3(const OpenMM_System*, OpenMM_Integrator*, OpenMM_Platform*, const OpenMM_PropertyArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:243</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Context_struct> OpenMM_Context_create_3(Pointer<OpenMMLibrary.OpenMM_System_struct> system, Pointer<OpenMMLibrary.OpenMM_Integrator_struct> integrator, Pointer<OpenMMLibrary.OpenMM_Platform_struct> platform, Pointer<OpenMMLibrary.OpenMM_PropertyArray_struct> properties) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_create_3(Pointer.getPeer(system), Pointer.getPeer(integrator), Pointer.getPeer(platform), Pointer.getPeer(properties)), OpenMMLibrary.OpenMM_Context_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_create_3(@Ptr long system, @Ptr long integrator, @Ptr long platform, @Ptr long properties);

    /**
     * Original signature :
     * <code>void OpenMM_Context_destroy(OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:244</i>
     */
    public static void OpenMM_Context_destroy(Pointer<OpenMMLibrary.OpenMM_Context_struct> target) {
        OpenMM_Context_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Context_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_System* OpenMM_Context_getSystem(const OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:245</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_System_struct> OpenMM_Context_getSystem(Pointer<OpenMMLibrary.OpenMM_Context_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_getSystem(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_System_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_getSystem(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Integrator* OpenMM_Context_getIntegrator(OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:246</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Integrator_struct> OpenMM_Context_getIntegrator(Pointer<OpenMMLibrary.OpenMM_Context_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_getIntegrator(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Integrator_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_getIntegrator(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Platform* OpenMM_Context_getPlatform(OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:247</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Platform_struct> OpenMM_Context_getPlatform(Pointer<OpenMMLibrary.OpenMM_Context_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_getPlatform(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Platform_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_getPlatform(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Context_setState(OpenMM_Context*, const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:248</i>
     */
    public static void OpenMM_Context_setState(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, Pointer<OpenMMLibrary.OpenMM_State_struct> state) {
        OpenMM_Context_setState(Pointer.getPeer(target), Pointer.getPeer(state));
    }

    protected native static void OpenMM_Context_setState(@Ptr long target, @Ptr long state);

    /**
     * Original signature :
     * <code>void OpenMM_Context_setTime(OpenMM_Context*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:249</i>
     */
    public static void OpenMM_Context_setTime(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, double time) {
        OpenMM_Context_setTime(Pointer.getPeer(target), time);
    }

    protected native static void OpenMM_Context_setTime(@Ptr long target, double time);

    /**
     * Original signature :
     * <code>void OpenMM_Context_setPositions(OpenMM_Context*, const OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:250</i>
     */
    public static void OpenMM_Context_setPositions(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> positions) {
        OpenMM_Context_setPositions(Pointer.getPeer(target), Pointer.getPeer(positions));
    }

    protected native static void OpenMM_Context_setPositions(@Ptr long target, @Ptr long positions);

    /**
     * Original signature :
     * <code>void OpenMM_Context_setVelocities(OpenMM_Context*, const OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:251</i>
     */
    public static void OpenMM_Context_setVelocities(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> velocities) {
        OpenMM_Context_setVelocities(Pointer.getPeer(target), Pointer.getPeer(velocities));
    }

    protected native static void OpenMM_Context_setVelocities(@Ptr long target, @Ptr long velocities);

    /**
     * Original signature :
     * <code>void OpenMM_Context_setVelocitiesToTemperature(OpenMM_Context*, double, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:252</i>
     */
    public static void OpenMM_Context_setVelocitiesToTemperature(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, double temperature, int randomSeed) {
        OpenMM_Context_setVelocitiesToTemperature(Pointer.getPeer(target), temperature, randomSeed);
    }

    protected native static void OpenMM_Context_setVelocitiesToTemperature(@Ptr long target, double temperature, int randomSeed);

    /**
     * Original signature :
     * <code>OpenMM_ParameterArray* OpenMM_Context_getParameters(const OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:253</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_ParameterArray_struct> OpenMM_Context_getParameters(Pointer<OpenMMLibrary.OpenMM_Context_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Context_getParameters(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_ParameterArray_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Context_getParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_Context_getParameter(const OpenMM_Context*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:254</i>
     */
    public static double OpenMM_Context_getParameter(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, Pointer<Byte> name) {
        return OpenMM_Context_getParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static double OpenMM_Context_getParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>void OpenMM_Context_setParameter(OpenMM_Context*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:255</i>
     */
    public static void OpenMM_Context_setParameter(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, Pointer<Byte> name, double value) {
        OpenMM_Context_setParameter(Pointer.getPeer(target), Pointer.getPeer(name), value);
    }

    protected native static void OpenMM_Context_setParameter(@Ptr long target, @Ptr long name, double value);

    /**
     * Original signature :
     * <code>void OpenMM_Context_setPeriodicBoxVectors(OpenMM_Context*, const OpenMM_Vec3*, const OpenMM_Vec3*, const OpenMM_Vec3*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:256</i>
     */
    public static void OpenMM_Context_setPeriodicBoxVectors(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, Pointer<OpenMM_Vec3> a, Pointer<OpenMM_Vec3> b, Pointer<OpenMM_Vec3> c) {
        OpenMM_Context_setPeriodicBoxVectors(Pointer.getPeer(target), Pointer.getPeer(a), Pointer.getPeer(b), Pointer.getPeer(c));
    }

    protected native static void OpenMM_Context_setPeriodicBoxVectors(@Ptr long target, @Ptr long a, @Ptr long b, @Ptr long c);

    /**
     * Original signature :
     * <code>void OpenMM_Context_applyConstraints(OpenMM_Context*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:257</i>
     */
    public static void OpenMM_Context_applyConstraints(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, double tol) {
        OpenMM_Context_applyConstraints(Pointer.getPeer(target), tol);
    }

    protected native static void OpenMM_Context_applyConstraints(@Ptr long target, double tol);

    /**
     * Original signature :
     * <code>void OpenMM_Context_applyVelocityConstraints(OpenMM_Context*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:258</i>
     */
    public static void OpenMM_Context_applyVelocityConstraints(Pointer<OpenMMLibrary.OpenMM_Context_struct> target, double tol) {
        OpenMM_Context_applyVelocityConstraints(Pointer.getPeer(target), tol);
    }

    protected native static void OpenMM_Context_applyVelocityConstraints(@Ptr long target, double tol);

    /**
     * Original signature :
     * <code>void OpenMM_Context_computeVirtualSites(OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:259</i>
     */
    public static void OpenMM_Context_computeVirtualSites(Pointer<OpenMMLibrary.OpenMM_Context_struct> target) {
        OpenMM_Context_computeVirtualSites(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Context_computeVirtualSites(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Context_reinitialize(OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:260</i>
     */
    public static void OpenMM_Context_reinitialize(Pointer<OpenMMLibrary.OpenMM_Context_struct> target) {
        OpenMM_Context_reinitialize(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Context_reinitialize(@Ptr long target);

    /**
     * TabulatedFunction<br>
     * Original signature :
     * <code>void OpenMM_TabulatedFunction_destroy(OpenMM_TabulatedFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:263</i>
     */
    public static void OpenMM_TabulatedFunction_destroy(Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> target) {
        OpenMM_TabulatedFunction_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_TabulatedFunction_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_TabulatedFunction* OpenMM_TabulatedFunction_Copy(const OpenMM_TabulatedFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:264</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> OpenMM_TabulatedFunction_Copy(Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_TabulatedFunction_Copy(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_TabulatedFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_TabulatedFunction_Copy(@Ptr long target);

    /**
     * Continuous1DFunction<br>
     * Original signature :
     * <code>OpenMM_Continuous1DFunction* OpenMM_Continuous1DFunction_create(const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:267</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Continuous1DFunction_struct> OpenMM_Continuous1DFunction_create(Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Continuous1DFunction_create(Pointer.getPeer(values), min, max), OpenMMLibrary.OpenMM_Continuous1DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Continuous1DFunction_create(@Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous1DFunction_destroy(OpenMM_Continuous1DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:268</i>
     */
    public static void OpenMM_Continuous1DFunction_destroy(Pointer<OpenMMLibrary.OpenMM_Continuous1DFunction_struct> target) {
        OpenMM_Continuous1DFunction_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Continuous1DFunction_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous1DFunction_getFunctionParameters(const OpenMM_Continuous1DFunction*, OpenMM_DoubleArray*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:269</i>
     */
    public static void OpenMM_Continuous1DFunction_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Continuous1DFunction_struct> target, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, Pointer<Double> min, Pointer<Double> max) {
        OpenMM_Continuous1DFunction_getFunctionParameters(Pointer.getPeer(target), Pointer.getPeer(values), Pointer.getPeer(min), Pointer.getPeer(max));
    }

    protected native static void OpenMM_Continuous1DFunction_getFunctionParameters(@Ptr long target, @Ptr long values, @Ptr long min, @Ptr long max);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous1DFunction_setFunctionParameters(OpenMM_Continuous1DFunction*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:270</i>
     */
    public static void OpenMM_Continuous1DFunction_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Continuous1DFunction_struct> target, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        OpenMM_Continuous1DFunction_setFunctionParameters(Pointer.getPeer(target), Pointer.getPeer(values), min, max);
    }

    protected native static void OpenMM_Continuous1DFunction_setFunctionParameters(@Ptr long target, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>OpenMM_Continuous1DFunction* OpenMM_Continuous1DFunction_Copy(const OpenMM_Continuous1DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:271</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Continuous1DFunction_struct> OpenMM_Continuous1DFunction_Copy(Pointer<OpenMMLibrary.OpenMM_Continuous1DFunction_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Continuous1DFunction_Copy(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Continuous1DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Continuous1DFunction_Copy(@Ptr long target);

    /**
     * Continuous2DFunction<br>
     * Original signature :
     * <code>OpenMM_Continuous2DFunction* OpenMM_Continuous2DFunction_create(int, int, const OpenMM_DoubleArray*, double, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:274</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Continuous2DFunction_struct> OpenMM_Continuous2DFunction_create(int xsize, int ysize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double xmin, double xmax, double ymin, double ymax) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Continuous2DFunction_create(xsize, ysize, Pointer.getPeer(values), xmin, xmax, ymin, ymax), OpenMMLibrary.OpenMM_Continuous2DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Continuous2DFunction_create(int xsize, int ysize, @Ptr long values, double xmin, double xmax, double ymin, double ymax);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous2DFunction_destroy(OpenMM_Continuous2DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:275</i>
     */
    public static void OpenMM_Continuous2DFunction_destroy(Pointer<OpenMMLibrary.OpenMM_Continuous2DFunction_struct> target) {
        OpenMM_Continuous2DFunction_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Continuous2DFunction_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous2DFunction_getFunctionParameters(const OpenMM_Continuous2DFunction*, int*, int*, OpenMM_DoubleArray*, double*, double*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:276</i>
     */
    public static void OpenMM_Continuous2DFunction_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Continuous2DFunction_struct> target, Pointer<Integer> xsize, Pointer<Integer> ysize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, Pointer<Double> xmin, Pointer<Double> xmax, Pointer<Double> ymin, Pointer<Double> ymax) {
        OpenMM_Continuous2DFunction_getFunctionParameters(Pointer.getPeer(target), Pointer.getPeer(xsize), Pointer.getPeer(ysize), Pointer.getPeer(values), Pointer.getPeer(xmin), Pointer.getPeer(xmax), Pointer.getPeer(ymin), Pointer.getPeer(ymax));
    }

    protected native static void OpenMM_Continuous2DFunction_getFunctionParameters(@Ptr long target, @Ptr long xsize, @Ptr long ysize, @Ptr long values, @Ptr long xmin, @Ptr long xmax, @Ptr long ymin, @Ptr long ymax);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous2DFunction_setFunctionParameters(OpenMM_Continuous2DFunction*, int, int, const OpenMM_DoubleArray*, double, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:277</i>
     */
    public static void OpenMM_Continuous2DFunction_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Continuous2DFunction_struct> target, int xsize, int ysize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double xmin, double xmax, double ymin, double ymax) {
        OpenMM_Continuous2DFunction_setFunctionParameters(Pointer.getPeer(target), xsize, ysize, Pointer.getPeer(values), xmin, xmax, ymin, ymax);
    }

    protected native static void OpenMM_Continuous2DFunction_setFunctionParameters(@Ptr long target, int xsize, int ysize, @Ptr long values, double xmin, double xmax, double ymin, double ymax);

    /**
     * Original signature :
     * <code>OpenMM_Continuous2DFunction* OpenMM_Continuous2DFunction_Copy(const OpenMM_Continuous2DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:278</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Continuous2DFunction_struct> OpenMM_Continuous2DFunction_Copy(Pointer<OpenMMLibrary.OpenMM_Continuous2DFunction_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Continuous2DFunction_Copy(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Continuous2DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Continuous2DFunction_Copy(@Ptr long target);

    /**
     * Continuous3DFunction<br>
     * Original signature :
     * <code>OpenMM_Continuous3DFunction* OpenMM_Continuous3DFunction_create(int, int, int, const OpenMM_DoubleArray*, double, double, double, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:281</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Continuous3DFunction_struct> OpenMM_Continuous3DFunction_create(int xsize, int ysize, int zsize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Continuous3DFunction_create(xsize, ysize, zsize, Pointer.getPeer(values), xmin, xmax, ymin, ymax, zmin, zmax), OpenMMLibrary.OpenMM_Continuous3DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Continuous3DFunction_create(int xsize, int ysize, int zsize, @Ptr long values, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous3DFunction_destroy(OpenMM_Continuous3DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:282</i>
     */
    public static void OpenMM_Continuous3DFunction_destroy(Pointer<OpenMMLibrary.OpenMM_Continuous3DFunction_struct> target) {
        OpenMM_Continuous3DFunction_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Continuous3DFunction_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous3DFunction_getFunctionParameters(const OpenMM_Continuous3DFunction*, int*, int*, int*, OpenMM_DoubleArray*, double*, double*, double*, double*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:283</i>
     */
    public static void OpenMM_Continuous3DFunction_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Continuous3DFunction_struct> target, Pointer<Integer> xsize, Pointer<Integer> ysize, Pointer<Integer> zsize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, Pointer<Double> xmin, Pointer<Double> xmax, Pointer<Double> ymin, Pointer<Double> ymax, Pointer<Double> zmin, Pointer<Double> zmax) {
        OpenMM_Continuous3DFunction_getFunctionParameters(Pointer.getPeer(target), Pointer.getPeer(xsize), Pointer.getPeer(ysize), Pointer.getPeer(zsize), Pointer.getPeer(values), Pointer.getPeer(xmin), Pointer.getPeer(xmax), Pointer.getPeer(ymin), Pointer.getPeer(ymax), Pointer.getPeer(zmin), Pointer.getPeer(zmax));
    }

    protected native static void OpenMM_Continuous3DFunction_getFunctionParameters(@Ptr long target, @Ptr long xsize, @Ptr long ysize, @Ptr long zsize, @Ptr long values, @Ptr long xmin, @Ptr long xmax, @Ptr long ymin, @Ptr long ymax, @Ptr long zmin, @Ptr long zmax);

    /**
     * Original signature :
     * <code>void OpenMM_Continuous3DFunction_setFunctionParameters(OpenMM_Continuous3DFunction*, int, int, int, const OpenMM_DoubleArray*, double, double, double, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:284</i>
     */
    public static void OpenMM_Continuous3DFunction_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Continuous3DFunction_struct> target, int xsize, int ysize, int zsize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax) {
        OpenMM_Continuous3DFunction_setFunctionParameters(Pointer.getPeer(target), xsize, ysize, zsize, Pointer.getPeer(values), xmin, xmax, ymin, ymax, zmin, zmax);
    }

    protected native static void OpenMM_Continuous3DFunction_setFunctionParameters(@Ptr long target, int xsize, int ysize, int zsize, @Ptr long values, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax);

    /**
     * Original signature :
     * <code>OpenMM_Continuous3DFunction* OpenMM_Continuous3DFunction_Copy(const OpenMM_Continuous3DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:285</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Continuous3DFunction_struct> OpenMM_Continuous3DFunction_Copy(Pointer<OpenMMLibrary.OpenMM_Continuous3DFunction_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Continuous3DFunction_Copy(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Continuous3DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Continuous3DFunction_Copy(@Ptr long target);

    /**
     * CustomAngleForce<br>
     * Original signature :
     * <code>OpenMM_CustomAngleForce* OpenMM_CustomAngleForce_create(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:288</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> OpenMM_CustomAngleForce_create(Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomAngleForce_create(Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomAngleForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomAngleForce_create(@Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_destroy(OpenMM_CustomAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:289</i>
     */
    public static void OpenMM_CustomAngleForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target) {
        OpenMM_CustomAngleForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomAngleForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomAngleForce_getNumAngles(const OpenMM_CustomAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:290</i>
     */
    public static int OpenMM_CustomAngleForce_getNumAngles(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target) {
        return OpenMM_CustomAngleForce_getNumAngles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomAngleForce_getNumAngles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomAngleForce_getNumPerAngleParameters(const OpenMM_CustomAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:291</i>
     */
    public static int OpenMM_CustomAngleForce_getNumPerAngleParameters(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target) {
        return OpenMM_CustomAngleForce_getNumPerAngleParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomAngleForce_getNumPerAngleParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomAngleForce_getNumGlobalParameters(const OpenMM_CustomAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:292</i>
     */
    public static int OpenMM_CustomAngleForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target) {
        return OpenMM_CustomAngleForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomAngleForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomAngleForce_getNumEnergyParameterDerivatives(const OpenMM_CustomAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:293</i>
     */
    public static int OpenMM_CustomAngleForce_getNumEnergyParameterDerivatives(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target) {
        return OpenMM_CustomAngleForce_getNumEnergyParameterDerivatives(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomAngleForce_getNumEnergyParameterDerivatives(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomAngleForce_getEnergyFunction(const OpenMM_CustomAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:294</i>
     */
    public static Pointer<Byte> OpenMM_CustomAngleForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomAngleForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomAngleForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_setEnergyFunction(OpenMM_CustomAngleForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:295</i>
     */
    public static void OpenMM_CustomAngleForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomAngleForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomAngleForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>int OpenMM_CustomAngleForce_addPerAngleParameter(OpenMM_CustomAngleForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:296</i>
     */
    public static int OpenMM_CustomAngleForce_addPerAngleParameter(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomAngleForce_addPerAngleParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomAngleForce_addPerAngleParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomAngleForce_getPerAngleParameterName(const OpenMM_CustomAngleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:297</i>
     */
    public static Pointer<Byte> OpenMM_CustomAngleForce_getPerAngleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomAngleForce_getPerAngleParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomAngleForce_getPerAngleParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_setPerAngleParameterName(OpenMM_CustomAngleForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:298</i>
     */
    public static void OpenMM_CustomAngleForce_setPerAngleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomAngleForce_setPerAngleParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomAngleForce_setPerAngleParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomAngleForce_addGlobalParameter(OpenMM_CustomAngleForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:299</i>
     */
    public static int OpenMM_CustomAngleForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomAngleForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomAngleForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomAngleForce_getGlobalParameterName(const OpenMM_CustomAngleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:300</i>
     */
    public static Pointer<Byte> OpenMM_CustomAngleForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomAngleForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomAngleForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_setGlobalParameterName(OpenMM_CustomAngleForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:301</i>
     */
    public static void OpenMM_CustomAngleForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomAngleForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomAngleForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomAngleForce_getGlobalParameterDefaultValue(const OpenMM_CustomAngleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:302</i>
     */
    public static double OpenMM_CustomAngleForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index) {
        return OpenMM_CustomAngleForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomAngleForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_setGlobalParameterDefaultValue(OpenMM_CustomAngleForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:303</i>
     */
    public static void OpenMM_CustomAngleForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomAngleForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomAngleForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_addEnergyParameterDerivative(OpenMM_CustomAngleForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:304</i>
     */
    public static void OpenMM_CustomAngleForce_addEnergyParameterDerivative(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, Pointer<Byte> name) {
        OpenMM_CustomAngleForce_addEnergyParameterDerivative(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomAngleForce_addEnergyParameterDerivative(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomAngleForce_getEnergyParameterDerivativeName(const OpenMM_CustomAngleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:305</i>
     */
    public static Pointer<Byte> OpenMM_CustomAngleForce_getEnergyParameterDerivativeName(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomAngleForce_getEnergyParameterDerivativeName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomAngleForce_getEnergyParameterDerivativeName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomAngleForce_addAngle(OpenMM_CustomAngleForce*, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:306</i>
     */
    public static int OpenMM_CustomAngleForce_addAngle(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int particle1, int particle2, int particle3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomAngleForce_addAngle(Pointer.getPeer(target), particle1, particle2, particle3, Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomAngleForce_addAngle(@Ptr long target, int particle1, int particle2, int particle3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_getAngleParameters(const OpenMM_CustomAngleForce*, int, int*, int*, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:307</i>
     */
    public static void OpenMM_CustomAngleForce_getAngleParameters(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomAngleForce_getAngleParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomAngleForce_getAngleParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_setAngleParameters(OpenMM_CustomAngleForce*, int, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:308</i>
     */
    public static void OpenMM_CustomAngleForce_setAngleParameters(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, int index, int particle1, int particle2, int particle3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomAngleForce_setAngleParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomAngleForce_setAngleParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_updateParametersInContext(OpenMM_CustomAngleForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:309</i>
     */
    public static void OpenMM_CustomAngleForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomAngleForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomAngleForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_CustomAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_CustomAngleForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:310</i>
     */
    public static void OpenMM_CustomAngleForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_CustomAngleForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_CustomAngleForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomAngleForce_usesPeriodicBoundaryConditions(const OpenMM_CustomAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:311</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomAngleForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomAngleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomAngleForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomAngleForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * CustomBondForce<br>
     * Original signature :
     * <code>OpenMM_CustomBondForce* OpenMM_CustomBondForce_create(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:314</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> OpenMM_CustomBondForce_create(Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomBondForce_create(Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomBondForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomBondForce_create(@Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_destroy(OpenMM_CustomBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:315</i>
     */
    public static void OpenMM_CustomBondForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target) {
        OpenMM_CustomBondForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomBondForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomBondForce_getNumBonds(const OpenMM_CustomBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:316</i>
     */
    public static int OpenMM_CustomBondForce_getNumBonds(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target) {
        return OpenMM_CustomBondForce_getNumBonds(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomBondForce_getNumBonds(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomBondForce_getNumPerBondParameters(const OpenMM_CustomBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:317</i>
     */
    public static int OpenMM_CustomBondForce_getNumPerBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target) {
        return OpenMM_CustomBondForce_getNumPerBondParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomBondForce_getNumPerBondParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomBondForce_getNumGlobalParameters(const OpenMM_CustomBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:318</i>
     */
    public static int OpenMM_CustomBondForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target) {
        return OpenMM_CustomBondForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomBondForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomBondForce_getNumEnergyParameterDerivatives(const OpenMM_CustomBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:319</i>
     */
    public static int OpenMM_CustomBondForce_getNumEnergyParameterDerivatives(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target) {
        return OpenMM_CustomBondForce_getNumEnergyParameterDerivatives(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomBondForce_getNumEnergyParameterDerivatives(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomBondForce_getEnergyFunction(const OpenMM_CustomBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:320</i>
     */
    public static Pointer<Byte> OpenMM_CustomBondForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomBondForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomBondForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_setEnergyFunction(OpenMM_CustomBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:321</i>
     */
    public static void OpenMM_CustomBondForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomBondForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomBondForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>int OpenMM_CustomBondForce_addPerBondParameter(OpenMM_CustomBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:322</i>
     */
    public static int OpenMM_CustomBondForce_addPerBondParameter(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomBondForce_addPerBondParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomBondForce_addPerBondParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomBondForce_getPerBondParameterName(const OpenMM_CustomBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:323</i>
     */
    public static Pointer<Byte> OpenMM_CustomBondForce_getPerBondParameterName(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomBondForce_getPerBondParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomBondForce_getPerBondParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_setPerBondParameterName(OpenMM_CustomBondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:324</i>
     */
    public static void OpenMM_CustomBondForce_setPerBondParameterName(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomBondForce_setPerBondParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomBondForce_setPerBondParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomBondForce_addGlobalParameter(OpenMM_CustomBondForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:325</i>
     */
    public static int OpenMM_CustomBondForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomBondForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomBondForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomBondForce_getGlobalParameterName(const OpenMM_CustomBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:326</i>
     */
    public static Pointer<Byte> OpenMM_CustomBondForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomBondForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomBondForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_setGlobalParameterName(OpenMM_CustomBondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:327</i>
     */
    public static void OpenMM_CustomBondForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomBondForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomBondForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomBondForce_getGlobalParameterDefaultValue(const OpenMM_CustomBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:328</i>
     */
    public static double OpenMM_CustomBondForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index) {
        return OpenMM_CustomBondForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomBondForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_setGlobalParameterDefaultValue(OpenMM_CustomBondForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:329</i>
     */
    public static void OpenMM_CustomBondForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomBondForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomBondForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_addEnergyParameterDerivative(OpenMM_CustomBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:330</i>
     */
    public static void OpenMM_CustomBondForce_addEnergyParameterDerivative(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, Pointer<Byte> name) {
        OpenMM_CustomBondForce_addEnergyParameterDerivative(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomBondForce_addEnergyParameterDerivative(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomBondForce_getEnergyParameterDerivativeName(const OpenMM_CustomBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:331</i>
     */
    public static Pointer<Byte> OpenMM_CustomBondForce_getEnergyParameterDerivativeName(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomBondForce_getEnergyParameterDerivativeName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomBondForce_getEnergyParameterDerivativeName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomBondForce_addBond(OpenMM_CustomBondForce*, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:332</i>
     */
    public static int OpenMM_CustomBondForce_addBond(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int particle1, int particle2, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomBondForce_addBond(Pointer.getPeer(target), particle1, particle2, Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomBondForce_addBond(@Ptr long target, int particle1, int particle2, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_getBondParameters(const OpenMM_CustomBondForce*, int, int*, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:333</i>
     */
    public static void OpenMM_CustomBondForce_getBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomBondForce_getBondParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomBondForce_getBondParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_setBondParameters(OpenMM_CustomBondForce*, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:334</i>
     */
    public static void OpenMM_CustomBondForce_setBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, int index, int particle1, int particle2, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomBondForce_setBondParameters(Pointer.getPeer(target), index, particle1, particle2, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomBondForce_setBondParameters(@Ptr long target, int index, int particle1, int particle2, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_updateParametersInContext(OpenMM_CustomBondForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:335</i>
     */
    public static void OpenMM_CustomBondForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomBondForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomBondForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_CustomBondForce_setUsesPeriodicBoundaryConditions(OpenMM_CustomBondForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:336</i>
     */
    public static void OpenMM_CustomBondForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_CustomBondForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_CustomBondForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomBondForce_usesPeriodicBoundaryConditions(const OpenMM_CustomBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:337</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomBondForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomBondForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomBondForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomBondForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * CustomCentroidBondForce<br>
     * Original signature :
     * <code>OpenMM_CustomCentroidBondForce* OpenMM_CustomCentroidBondForce_create(int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:340</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> OpenMM_CustomCentroidBondForce_create(int numGroups, Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCentroidBondForce_create(numGroups, Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCentroidBondForce_create(int numGroups, @Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_destroy(OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:341</i>
     */
    public static void OpenMM_CustomCentroidBondForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        OpenMM_CustomCentroidBondForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomCentroidBondForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_getNumGroupsPerBond(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:342</i>
     */
    public static int OpenMM_CustomCentroidBondForce_getNumGroupsPerBond(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return OpenMM_CustomCentroidBondForce_getNumGroupsPerBond(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCentroidBondForce_getNumGroupsPerBond(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_getNumGroups(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:343</i>
     */
    public static int OpenMM_CustomCentroidBondForce_getNumGroups(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return OpenMM_CustomCentroidBondForce_getNumGroups(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCentroidBondForce_getNumGroups(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_getNumBonds(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:344</i>
     */
    public static int OpenMM_CustomCentroidBondForce_getNumBonds(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return OpenMM_CustomCentroidBondForce_getNumBonds(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCentroidBondForce_getNumBonds(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_getNumPerBondParameters(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:345</i>
     */
    public static int OpenMM_CustomCentroidBondForce_getNumPerBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return OpenMM_CustomCentroidBondForce_getNumPerBondParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCentroidBondForce_getNumPerBondParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_getNumGlobalParameters(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:346</i>
     */
    public static int OpenMM_CustomCentroidBondForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return OpenMM_CustomCentroidBondForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCentroidBondForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_getNumEnergyParameterDerivatives(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:347</i>
     */
    public static int OpenMM_CustomCentroidBondForce_getNumEnergyParameterDerivatives(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return OpenMM_CustomCentroidBondForce_getNumEnergyParameterDerivatives(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCentroidBondForce_getNumEnergyParameterDerivatives(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_getNumTabulatedFunctions(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:348</i>
     */
    public static int OpenMM_CustomCentroidBondForce_getNumTabulatedFunctions(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return OpenMM_CustomCentroidBondForce_getNumTabulatedFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCentroidBondForce_getNumTabulatedFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_getNumFunctions(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:349</i>
     */
    public static int OpenMM_CustomCentroidBondForce_getNumFunctions(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return OpenMM_CustomCentroidBondForce_getNumFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCentroidBondForce_getNumFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCentroidBondForce_getEnergyFunction(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:350</i>
     */
    public static Pointer<Byte> OpenMM_CustomCentroidBondForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCentroidBondForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCentroidBondForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_setEnergyFunction(OpenMM_CustomCentroidBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:351</i>
     */
    public static void OpenMM_CustomCentroidBondForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomCentroidBondForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomCentroidBondForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_addPerBondParameter(OpenMM_CustomCentroidBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:352</i>
     */
    public static int OpenMM_CustomCentroidBondForce_addPerBondParameter(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomCentroidBondForce_addPerBondParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomCentroidBondForce_addPerBondParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCentroidBondForce_getPerBondParameterName(const OpenMM_CustomCentroidBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:353</i>
     */
    public static Pointer<Byte> OpenMM_CustomCentroidBondForce_getPerBondParameterName(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCentroidBondForce_getPerBondParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCentroidBondForce_getPerBondParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_setPerBondParameterName(OpenMM_CustomCentroidBondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:354</i>
     */
    public static void OpenMM_CustomCentroidBondForce_setPerBondParameterName(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomCentroidBondForce_setPerBondParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomCentroidBondForce_setPerBondParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_addGlobalParameter(OpenMM_CustomCentroidBondForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:355</i>
     */
    public static int OpenMM_CustomCentroidBondForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomCentroidBondForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomCentroidBondForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCentroidBondForce_getGlobalParameterName(const OpenMM_CustomCentroidBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:356</i>
     */
    public static Pointer<Byte> OpenMM_CustomCentroidBondForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCentroidBondForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCentroidBondForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_setGlobalParameterName(OpenMM_CustomCentroidBondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:357</i>
     */
    public static void OpenMM_CustomCentroidBondForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomCentroidBondForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomCentroidBondForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomCentroidBondForce_getGlobalParameterDefaultValue(const OpenMM_CustomCentroidBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:358</i>
     */
    public static double OpenMM_CustomCentroidBondForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index) {
        return OpenMM_CustomCentroidBondForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomCentroidBondForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_setGlobalParameterDefaultValue(OpenMM_CustomCentroidBondForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:359</i>
     */
    public static void OpenMM_CustomCentroidBondForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomCentroidBondForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomCentroidBondForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_addEnergyParameterDerivative(OpenMM_CustomCentroidBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:360</i>
     */
    public static void OpenMM_CustomCentroidBondForce_addEnergyParameterDerivative(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, Pointer<Byte> name) {
        OpenMM_CustomCentroidBondForce_addEnergyParameterDerivative(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomCentroidBondForce_addEnergyParameterDerivative(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCentroidBondForce_getEnergyParameterDerivativeName(const OpenMM_CustomCentroidBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:361</i>
     */
    public static Pointer<Byte> OpenMM_CustomCentroidBondForce_getEnergyParameterDerivativeName(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCentroidBondForce_getEnergyParameterDerivativeName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCentroidBondForce_getEnergyParameterDerivativeName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_addGroup(OpenMM_CustomCentroidBondForce*, const OpenMM_IntArray*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:362</i>
     */
    public static int OpenMM_CustomCentroidBondForce_addGroup(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> particles, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> weights) {
        return OpenMM_CustomCentroidBondForce_addGroup(Pointer.getPeer(target), Pointer.getPeer(particles), Pointer.getPeer(weights));
    }

    protected native static int OpenMM_CustomCentroidBondForce_addGroup(@Ptr long target, @Ptr long particles, @Ptr long weights);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_getGroupParameters(const OpenMM_CustomCentroidBondForce*, int, OpenMM_IntArray*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:363</i>
     */
    public static void OpenMM_CustomCentroidBondForce_getGroupParameters(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> particles, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> weights) {
        OpenMM_CustomCentroidBondForce_getGroupParameters(Pointer.getPeer(target), index, Pointer.getPeer(particles), Pointer.getPeer(weights));
    }

    protected native static void OpenMM_CustomCentroidBondForce_getGroupParameters(@Ptr long target, int index, @Ptr long particles, @Ptr long weights);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_setGroupParameters(OpenMM_CustomCentroidBondForce*, int, const OpenMM_IntArray*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:364</i>
     */
    public static void OpenMM_CustomCentroidBondForce_setGroupParameters(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> particles, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> weights) {
        OpenMM_CustomCentroidBondForce_setGroupParameters(Pointer.getPeer(target), index, Pointer.getPeer(particles), Pointer.getPeer(weights));
    }

    protected native static void OpenMM_CustomCentroidBondForce_setGroupParameters(@Ptr long target, int index, @Ptr long particles, @Ptr long weights);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_addBond(OpenMM_CustomCentroidBondForce*, const OpenMM_IntArray*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:365</i>
     */
    public static int OpenMM_CustomCentroidBondForce_addBond(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> groups, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomCentroidBondForce_addBond(Pointer.getPeer(target), Pointer.getPeer(groups), Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomCentroidBondForce_addBond(@Ptr long target, @Ptr long groups, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_getBondParameters(const OpenMM_CustomCentroidBondForce*, int, OpenMM_IntArray*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:366</i>
     */
    public static void OpenMM_CustomCentroidBondForce_getBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> groups, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomCentroidBondForce_getBondParameters(Pointer.getPeer(target), index, Pointer.getPeer(groups), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomCentroidBondForce_getBondParameters(@Ptr long target, int index, @Ptr long groups, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_setBondParameters(OpenMM_CustomCentroidBondForce*, int, const OpenMM_IntArray*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:367</i>
     */
    public static void OpenMM_CustomCentroidBondForce_setBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> groups, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomCentroidBondForce_setBondParameters(Pointer.getPeer(target), index, Pointer.getPeer(groups), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomCentroidBondForce_setBondParameters(@Ptr long target, int index, @Ptr long groups, @Ptr long parameters);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCentroidBondForce_addTabulatedFunction(OpenMM_CustomCentroidBondForce*, const char*, OpenMM_TabulatedFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:368</i>
     */
    public static int OpenMM_CustomCentroidBondForce_addTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> function) {
        return OpenMM_CustomCentroidBondForce_addTabulatedFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(function));
    }

    protected native static int OpenMM_CustomCentroidBondForce_addTabulatedFunction(@Ptr long target, @Ptr long name, @Ptr long function);

    /**
     * Original signature :
     * <code>OpenMM_TabulatedFunction* OpenMM_CustomCentroidBondForce_getTabulatedFunction(OpenMM_CustomCentroidBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:369</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> OpenMM_CustomCentroidBondForce_getTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCentroidBondForce_getTabulatedFunction(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_TabulatedFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCentroidBondForce_getTabulatedFunction(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCentroidBondForce_getTabulatedFunctionName(const OpenMM_CustomCentroidBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:370</i>
     */
    public static Pointer<Byte> OpenMM_CustomCentroidBondForce_getTabulatedFunctionName(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCentroidBondForce_getTabulatedFunctionName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCentroidBondForce_getTabulatedFunctionName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_updateParametersInContext(OpenMM_CustomCentroidBondForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:371</i>
     */
    public static void OpenMM_CustomCentroidBondForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomCentroidBondForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomCentroidBondForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCentroidBondForce_setUsesPeriodicBoundaryConditions(OpenMM_CustomCentroidBondForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:372</i>
     */
    public static void OpenMM_CustomCentroidBondForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_CustomCentroidBondForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_CustomCentroidBondForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomCentroidBondForce_usesPeriodicBoundaryConditions(const OpenMM_CustomCentroidBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:373</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomCentroidBondForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomCentroidBondForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomCentroidBondForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomCentroidBondForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * CustomCompoundBondForce<br>
     * Original signature :
     * <code>OpenMM_CustomCompoundBondForce* OpenMM_CustomCompoundBondForce_create(int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:376</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> OpenMM_CustomCompoundBondForce_create(int numParticles, Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCompoundBondForce_create(numParticles, Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCompoundBondForce_create(int numParticles, @Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_destroy(OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:377</i>
     */
    public static void OpenMM_CustomCompoundBondForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        OpenMM_CustomCompoundBondForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomCompoundBondForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_getNumParticlesPerBond(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:378</i>
     */
    public static int OpenMM_CustomCompoundBondForce_getNumParticlesPerBond(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return OpenMM_CustomCompoundBondForce_getNumParticlesPerBond(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCompoundBondForce_getNumParticlesPerBond(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_getNumBonds(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:379</i>
     */
    public static int OpenMM_CustomCompoundBondForce_getNumBonds(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return OpenMM_CustomCompoundBondForce_getNumBonds(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCompoundBondForce_getNumBonds(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_getNumPerBondParameters(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:380</i>
     */
    public static int OpenMM_CustomCompoundBondForce_getNumPerBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return OpenMM_CustomCompoundBondForce_getNumPerBondParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCompoundBondForce_getNumPerBondParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_getNumGlobalParameters(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:381</i>
     */
    public static int OpenMM_CustomCompoundBondForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return OpenMM_CustomCompoundBondForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCompoundBondForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_getNumEnergyParameterDerivatives(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:382</i>
     */
    public static int OpenMM_CustomCompoundBondForce_getNumEnergyParameterDerivatives(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return OpenMM_CustomCompoundBondForce_getNumEnergyParameterDerivatives(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCompoundBondForce_getNumEnergyParameterDerivatives(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_getNumTabulatedFunctions(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:383</i>
     */
    public static int OpenMM_CustomCompoundBondForce_getNumTabulatedFunctions(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return OpenMM_CustomCompoundBondForce_getNumTabulatedFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCompoundBondForce_getNumTabulatedFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_getNumFunctions(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:384</i>
     */
    public static int OpenMM_CustomCompoundBondForce_getNumFunctions(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return OpenMM_CustomCompoundBondForce_getNumFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomCompoundBondForce_getNumFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCompoundBondForce_getEnergyFunction(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:385</i>
     */
    public static Pointer<Byte> OpenMM_CustomCompoundBondForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCompoundBondForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCompoundBondForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_setEnergyFunction(OpenMM_CustomCompoundBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:386</i>
     */
    public static void OpenMM_CustomCompoundBondForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomCompoundBondForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomCompoundBondForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_addPerBondParameter(OpenMM_CustomCompoundBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:387</i>
     */
    public static int OpenMM_CustomCompoundBondForce_addPerBondParameter(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomCompoundBondForce_addPerBondParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomCompoundBondForce_addPerBondParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCompoundBondForce_getPerBondParameterName(const OpenMM_CustomCompoundBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:388</i>
     */
    public static Pointer<Byte> OpenMM_CustomCompoundBondForce_getPerBondParameterName(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCompoundBondForce_getPerBondParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCompoundBondForce_getPerBondParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_setPerBondParameterName(OpenMM_CustomCompoundBondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:389</i>
     */
    public static void OpenMM_CustomCompoundBondForce_setPerBondParameterName(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomCompoundBondForce_setPerBondParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomCompoundBondForce_setPerBondParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_addGlobalParameter(OpenMM_CustomCompoundBondForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:390</i>
     */
    public static int OpenMM_CustomCompoundBondForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomCompoundBondForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomCompoundBondForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCompoundBondForce_getGlobalParameterName(const OpenMM_CustomCompoundBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:391</i>
     */
    public static Pointer<Byte> OpenMM_CustomCompoundBondForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCompoundBondForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCompoundBondForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_setGlobalParameterName(OpenMM_CustomCompoundBondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:392</i>
     */
    public static void OpenMM_CustomCompoundBondForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomCompoundBondForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomCompoundBondForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomCompoundBondForce_getGlobalParameterDefaultValue(const OpenMM_CustomCompoundBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:393</i>
     */
    public static double OpenMM_CustomCompoundBondForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index) {
        return OpenMM_CustomCompoundBondForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomCompoundBondForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_setGlobalParameterDefaultValue(OpenMM_CustomCompoundBondForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:394</i>
     */
    public static void OpenMM_CustomCompoundBondForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomCompoundBondForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomCompoundBondForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_addEnergyParameterDerivative(OpenMM_CustomCompoundBondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:395</i>
     */
    public static void OpenMM_CustomCompoundBondForce_addEnergyParameterDerivative(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, Pointer<Byte> name) {
        OpenMM_CustomCompoundBondForce_addEnergyParameterDerivative(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomCompoundBondForce_addEnergyParameterDerivative(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCompoundBondForce_getEnergyParameterDerivativeName(const OpenMM_CustomCompoundBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:396</i>
     */
    public static Pointer<Byte> OpenMM_CustomCompoundBondForce_getEnergyParameterDerivativeName(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCompoundBondForce_getEnergyParameterDerivativeName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCompoundBondForce_getEnergyParameterDerivativeName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_addBond(OpenMM_CustomCompoundBondForce*, const OpenMM_IntArray*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:397</i>
     */
    public static int OpenMM_CustomCompoundBondForce_addBond(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> particles, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomCompoundBondForce_addBond(Pointer.getPeer(target), Pointer.getPeer(particles), Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomCompoundBondForce_addBond(@Ptr long target, @Ptr long particles, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_getBondParameters(const OpenMM_CustomCompoundBondForce*, int, OpenMM_IntArray*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:398</i>
     */
    public static void OpenMM_CustomCompoundBondForce_getBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> particles, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomCompoundBondForce_getBondParameters(Pointer.getPeer(target), index, Pointer.getPeer(particles), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomCompoundBondForce_getBondParameters(@Ptr long target, int index, @Ptr long particles, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_setBondParameters(OpenMM_CustomCompoundBondForce*, int, const OpenMM_IntArray*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:399</i>
     */
    public static void OpenMM_CustomCompoundBondForce_setBondParameters(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> particles, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomCompoundBondForce_setBondParameters(Pointer.getPeer(target), index, Pointer.getPeer(particles), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomCompoundBondForce_setBondParameters(@Ptr long target, int index, @Ptr long particles, @Ptr long parameters);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_addTabulatedFunction(OpenMM_CustomCompoundBondForce*, const char*, OpenMM_TabulatedFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:400</i>
     */
    public static int OpenMM_CustomCompoundBondForce_addTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> function) {
        return OpenMM_CustomCompoundBondForce_addTabulatedFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(function));
    }

    protected native static int OpenMM_CustomCompoundBondForce_addTabulatedFunction(@Ptr long target, @Ptr long name, @Ptr long function);

    /**
     * Original signature :
     * <code>OpenMM_TabulatedFunction* OpenMM_CustomCompoundBondForce_getTabulatedFunction(OpenMM_CustomCompoundBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:401</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> OpenMM_CustomCompoundBondForce_getTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCompoundBondForce_getTabulatedFunction(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_TabulatedFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCompoundBondForce_getTabulatedFunction(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomCompoundBondForce_getTabulatedFunctionName(const OpenMM_CustomCompoundBondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:402</i>
     */
    public static Pointer<Byte> OpenMM_CustomCompoundBondForce_getTabulatedFunctionName(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomCompoundBondForce_getTabulatedFunctionName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomCompoundBondForce_getTabulatedFunctionName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomCompoundBondForce_addFunction(OpenMM_CustomCompoundBondForce*, const char*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:403</i>
     */
    public static int OpenMM_CustomCompoundBondForce_addFunction(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        return OpenMM_CustomCompoundBondForce_addFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(values), min, max);
    }

    protected native static int OpenMM_CustomCompoundBondForce_addFunction(@Ptr long target, @Ptr long name, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_getFunctionParameters(const OpenMM_CustomCompoundBondForce*, int, char**, OpenMM_DoubleArray*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:404</i>
     */
    public static void OpenMM_CustomCompoundBondForce_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index, Pointer<Pointer<Byte>> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, Pointer<Double> min, Pointer<Double> max) {
        OpenMM_CustomCompoundBondForce_getFunctionParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(values), Pointer.getPeer(min), Pointer.getPeer(max));
    }

    protected native static void OpenMM_CustomCompoundBondForce_getFunctionParameters(@Ptr long target, int index, @Ptr long name, @Ptr long values, @Ptr long min, @Ptr long max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_setFunctionParameters(OpenMM_CustomCompoundBondForce*, int, const char*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:405</i>
     */
    public static void OpenMM_CustomCompoundBondForce_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, int index, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        OpenMM_CustomCompoundBondForce_setFunctionParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(values), min, max);
    }

    protected native static void OpenMM_CustomCompoundBondForce_setFunctionParameters(@Ptr long target, int index, @Ptr long name, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_updateParametersInContext(OpenMM_CustomCompoundBondForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:406</i>
     */
    public static void OpenMM_CustomCompoundBondForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomCompoundBondForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomCompoundBondForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_CustomCompoundBondForce_setUsesPeriodicBoundaryConditions(OpenMM_CustomCompoundBondForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:407</i>
     */
    public static void OpenMM_CustomCompoundBondForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_CustomCompoundBondForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_CustomCompoundBondForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomCompoundBondForce_usesPeriodicBoundaryConditions(const OpenMM_CustomCompoundBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:408</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomCompoundBondForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomCompoundBondForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomCompoundBondForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomCompoundBondForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * CustomExternalForce<br>
     * Original signature :
     * <code>OpenMM_CustomExternalForce* OpenMM_CustomExternalForce_create(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:411</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> OpenMM_CustomExternalForce_create(Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomExternalForce_create(Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomExternalForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomExternalForce_create(@Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CustomExternalForce_destroy(OpenMM_CustomExternalForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:412</i>
     */
    public static void OpenMM_CustomExternalForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target) {
        OpenMM_CustomExternalForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomExternalForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomExternalForce_getNumParticles(const OpenMM_CustomExternalForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:413</i>
     */
    public static int OpenMM_CustomExternalForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target) {
        return OpenMM_CustomExternalForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomExternalForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomExternalForce_getNumPerParticleParameters(const OpenMM_CustomExternalForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:414</i>
     */
    public static int OpenMM_CustomExternalForce_getNumPerParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target) {
        return OpenMM_CustomExternalForce_getNumPerParticleParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomExternalForce_getNumPerParticleParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomExternalForce_getNumGlobalParameters(const OpenMM_CustomExternalForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:415</i>
     */
    public static int OpenMM_CustomExternalForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target) {
        return OpenMM_CustomExternalForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomExternalForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomExternalForce_getEnergyFunction(const OpenMM_CustomExternalForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:416</i>
     */
    public static Pointer<Byte> OpenMM_CustomExternalForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomExternalForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomExternalForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomExternalForce_setEnergyFunction(OpenMM_CustomExternalForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:417</i>
     */
    public static void OpenMM_CustomExternalForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomExternalForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomExternalForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>int OpenMM_CustomExternalForce_addPerParticleParameter(OpenMM_CustomExternalForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:418</i>
     */
    public static int OpenMM_CustomExternalForce_addPerParticleParameter(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomExternalForce_addPerParticleParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomExternalForce_addPerParticleParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomExternalForce_getPerParticleParameterName(const OpenMM_CustomExternalForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:419</i>
     */
    public static Pointer<Byte> OpenMM_CustomExternalForce_getPerParticleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomExternalForce_getPerParticleParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomExternalForce_getPerParticleParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomExternalForce_setPerParticleParameterName(OpenMM_CustomExternalForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:420</i>
     */
    public static void OpenMM_CustomExternalForce_setPerParticleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomExternalForce_setPerParticleParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomExternalForce_setPerParticleParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomExternalForce_addGlobalParameter(OpenMM_CustomExternalForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:421</i>
     */
    public static int OpenMM_CustomExternalForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomExternalForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomExternalForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomExternalForce_getGlobalParameterName(const OpenMM_CustomExternalForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:422</i>
     */
    public static Pointer<Byte> OpenMM_CustomExternalForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomExternalForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomExternalForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomExternalForce_setGlobalParameterName(OpenMM_CustomExternalForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:423</i>
     */
    public static void OpenMM_CustomExternalForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomExternalForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomExternalForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomExternalForce_getGlobalParameterDefaultValue(const OpenMM_CustomExternalForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:424</i>
     */
    public static double OpenMM_CustomExternalForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int index) {
        return OpenMM_CustomExternalForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomExternalForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomExternalForce_setGlobalParameterDefaultValue(OpenMM_CustomExternalForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:425</i>
     */
    public static void OpenMM_CustomExternalForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomExternalForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomExternalForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>int OpenMM_CustomExternalForce_addParticle(OpenMM_CustomExternalForce*, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:426</i>
     */
    public static int OpenMM_CustomExternalForce_addParticle(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int particle, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomExternalForce_addParticle(Pointer.getPeer(target), particle, Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomExternalForce_addParticle(@Ptr long target, int particle, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomExternalForce_getParticleParameters(const OpenMM_CustomExternalForce*, int, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:427</i>
     */
    public static void OpenMM_CustomExternalForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int index, Pointer<Integer> particle, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomExternalForce_getParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomExternalForce_getParticleParameters(@Ptr long target, int index, @Ptr long particle, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomExternalForce_setParticleParameters(OpenMM_CustomExternalForce*, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:428</i>
     */
    public static void OpenMM_CustomExternalForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, int index, int particle, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomExternalForce_setParticleParameters(Pointer.getPeer(target), index, particle, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomExternalForce_setParticleParameters(@Ptr long target, int index, int particle, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomExternalForce_updateParametersInContext(OpenMM_CustomExternalForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:429</i>
     */
    public static void OpenMM_CustomExternalForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomExternalForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomExternalForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomExternalForce_usesPeriodicBoundaryConditions(const OpenMM_CustomExternalForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:430</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomExternalForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomExternalForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomExternalForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomExternalForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_CustomGBForce* OpenMM_CustomGBForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:440</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> OpenMM_CustomGBForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomGBForce_create$2(), OpenMMLibrary.OpenMM_CustomGBForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_CustomGBForce_create")
    protected native static long OpenMM_CustomGBForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_destroy(OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:441</i>
     */
    public static void OpenMM_CustomGBForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        OpenMM_CustomGBForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomGBForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumParticles(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:442</i>
     */
    public static int OpenMM_CustomGBForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumExclusions(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:443</i>
     */
    public static int OpenMM_CustomGBForce_getNumExclusions(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumExclusions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumExclusions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumPerParticleParameters(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:444</i>
     */
    public static int OpenMM_CustomGBForce_getNumPerParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumPerParticleParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumPerParticleParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumGlobalParameters(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:445</i>
     */
    public static int OpenMM_CustomGBForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumEnergyParameterDerivatives(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:446</i>
     */
    public static int OpenMM_CustomGBForce_getNumEnergyParameterDerivatives(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumEnergyParameterDerivatives(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumEnergyParameterDerivatives(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumTabulatedFunctions(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:447</i>
     */
    public static int OpenMM_CustomGBForce_getNumTabulatedFunctions(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumTabulatedFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumTabulatedFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumFunctions(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:448</i>
     */
    public static int OpenMM_CustomGBForce_getNumFunctions(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumComputedValues(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:449</i>
     */
    public static int OpenMM_CustomGBForce_getNumComputedValues(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumComputedValues(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumComputedValues(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_getNumEnergyTerms(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:450</i>
     */
    public static int OpenMM_CustomGBForce_getNumEnergyTerms(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getNumEnergyTerms(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomGBForce_getNumEnergyTerms(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_CustomGBForce_NonbondedMethod OpenMM_CustomGBForce_getNonbondedMethod(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:451</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_CustomGBForce_NonbondedMethod> OpenMM_CustomGBForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomGBForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_CustomGBForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_CustomGBForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setNonbondedMethod(OpenMM_CustomGBForce*, OpenMM_CustomGBForce_NonbondedMethod)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:452</i>
     */
    public static void OpenMM_CustomGBForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_CustomGBForce_NonbondedMethod> method) {
        OpenMM_CustomGBForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_CustomGBForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>double OpenMM_CustomGBForce_getCutoffDistance(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:453</i>
     */
    public static double OpenMM_CustomGBForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return OpenMM_CustomGBForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_CustomGBForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setCutoffDistance(OpenMM_CustomGBForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:454</i>
     */
    public static void OpenMM_CustomGBForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, double distance) {
        OpenMM_CustomGBForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_CustomGBForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_addPerParticleParameter(OpenMM_CustomGBForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:455</i>
     */
    public static int OpenMM_CustomGBForce_addPerParticleParameter(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomGBForce_addPerParticleParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomGBForce_addPerParticleParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomGBForce_getPerParticleParameterName(const OpenMM_CustomGBForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:456</i>
     */
    public static Pointer<Byte> OpenMM_CustomGBForce_getPerParticleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomGBForce_getPerParticleParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomGBForce_getPerParticleParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setPerParticleParameterName(OpenMM_CustomGBForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:457</i>
     */
    public static void OpenMM_CustomGBForce_setPerParticleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomGBForce_setPerParticleParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomGBForce_setPerParticleParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_addGlobalParameter(OpenMM_CustomGBForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:458</i>
     */
    public static int OpenMM_CustomGBForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomGBForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomGBForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomGBForce_getGlobalParameterName(const OpenMM_CustomGBForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:459</i>
     */
    public static Pointer<Byte> OpenMM_CustomGBForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomGBForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomGBForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setGlobalParameterName(OpenMM_CustomGBForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:460</i>
     */
    public static void OpenMM_CustomGBForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomGBForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomGBForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomGBForce_getGlobalParameterDefaultValue(const OpenMM_CustomGBForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:461</i>
     */
    public static double OpenMM_CustomGBForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index) {
        return OpenMM_CustomGBForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomGBForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setGlobalParameterDefaultValue(OpenMM_CustomGBForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:462</i>
     */
    public static void OpenMM_CustomGBForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomGBForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomGBForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_addEnergyParameterDerivative(OpenMM_CustomGBForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:463</i>
     */
    public static void OpenMM_CustomGBForce_addEnergyParameterDerivative(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<Byte> name) {
        OpenMM_CustomGBForce_addEnergyParameterDerivative(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomGBForce_addEnergyParameterDerivative(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomGBForce_getEnergyParameterDerivativeName(const OpenMM_CustomGBForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:464</i>
     */
    public static Pointer<Byte> OpenMM_CustomGBForce_getEnergyParameterDerivativeName(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomGBForce_getEnergyParameterDerivativeName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomGBForce_getEnergyParameterDerivativeName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_addParticle(OpenMM_CustomGBForce*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:465</i>
     */
    public static int OpenMM_CustomGBForce_addParticle(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomGBForce_addParticle(Pointer.getPeer(target), Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomGBForce_addParticle(@Ptr long target, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_getParticleParameters(const OpenMM_CustomGBForce*, int, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:466</i>
     */
    public static void OpenMM_CustomGBForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomGBForce_getParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomGBForce_getParticleParameters(@Ptr long target, int index, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setParticleParameters(OpenMM_CustomGBForce*, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:467</i>
     */
    public static void OpenMM_CustomGBForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomGBForce_setParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomGBForce_setParticleParameters(@Ptr long target, int index, @Ptr long parameters);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_addComputedValue(OpenMM_CustomGBForce*, const char*, const char*, OpenMM_CustomGBForce_ComputationType)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:468</i>
     */
    public static int OpenMM_CustomGBForce_addComputedValue(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<Byte> name, Pointer<Byte> expression, IntValuedEnum<OpenMMLibrary.OpenMM_CustomGBForce_ComputationType> type) {
        return OpenMM_CustomGBForce_addComputedValue(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(expression), (int) type.value());
    }

    protected native static int OpenMM_CustomGBForce_addComputedValue(@Ptr long target, @Ptr long name, @Ptr long expression, int type);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_getComputedValueParameters(const OpenMM_CustomGBForce*, int, char**, char**, OpenMM_CustomGBForce_ComputationType*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:469</i>
     */
    public static void OpenMM_CustomGBForce_getComputedValueParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Pointer<Byte>> name, Pointer<Pointer<Byte>> expression, Pointer<IntValuedEnum<OpenMMLibrary.OpenMM_CustomGBForce_ComputationType>> type) {
        OpenMM_CustomGBForce_getComputedValueParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(expression), Pointer.getPeer(type));
    }

    protected native static void OpenMM_CustomGBForce_getComputedValueParameters(@Ptr long target, int index, @Ptr long name, @Ptr long expression, @Ptr long type);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setComputedValueParameters(OpenMM_CustomGBForce*, int, const char*, const char*, OpenMM_CustomGBForce_ComputationType)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:470</i>
     */
    public static void OpenMM_CustomGBForce_setComputedValueParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Byte> name, Pointer<Byte> expression, IntValuedEnum<OpenMMLibrary.OpenMM_CustomGBForce_ComputationType> type) {
        OpenMM_CustomGBForce_setComputedValueParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(expression), (int) type.value());
    }

    protected native static void OpenMM_CustomGBForce_setComputedValueParameters(@Ptr long target, int index, @Ptr long name, @Ptr long expression, int type);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_addEnergyTerm(OpenMM_CustomGBForce*, const char*, OpenMM_CustomGBForce_ComputationType)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:471</i>
     */
    public static int OpenMM_CustomGBForce_addEnergyTerm(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<Byte> expression, IntValuedEnum<OpenMMLibrary.OpenMM_CustomGBForce_ComputationType> type) {
        return OpenMM_CustomGBForce_addEnergyTerm(Pointer.getPeer(target), Pointer.getPeer(expression), (int) type.value());
    }

    protected native static int OpenMM_CustomGBForce_addEnergyTerm(@Ptr long target, @Ptr long expression, int type);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_getEnergyTermParameters(const OpenMM_CustomGBForce*, int, char**, OpenMM_CustomGBForce_ComputationType*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:472</i>
     */
    public static void OpenMM_CustomGBForce_getEnergyTermParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Pointer<Byte>> expression, Pointer<IntValuedEnum<OpenMMLibrary.OpenMM_CustomGBForce_ComputationType>> type) {
        OpenMM_CustomGBForce_getEnergyTermParameters(Pointer.getPeer(target), index, Pointer.getPeer(expression), Pointer.getPeer(type));
    }

    protected native static void OpenMM_CustomGBForce_getEnergyTermParameters(@Ptr long target, int index, @Ptr long expression, @Ptr long type);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setEnergyTermParameters(OpenMM_CustomGBForce*, int, const char*, OpenMM_CustomGBForce_ComputationType)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:473</i>
     */
    public static void OpenMM_CustomGBForce_setEnergyTermParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Byte> expression, IntValuedEnum<OpenMMLibrary.OpenMM_CustomGBForce_ComputationType> type) {
        OpenMM_CustomGBForce_setEnergyTermParameters(Pointer.getPeer(target), index, Pointer.getPeer(expression), (int) type.value());
    }

    protected native static void OpenMM_CustomGBForce_setEnergyTermParameters(@Ptr long target, int index, @Ptr long expression, int type);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_addExclusion(OpenMM_CustomGBForce*, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:474</i>
     */
    public static int OpenMM_CustomGBForce_addExclusion(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int particle1, int particle2) {
        return OpenMM_CustomGBForce_addExclusion(Pointer.getPeer(target), particle1, particle2);
    }

    protected native static int OpenMM_CustomGBForce_addExclusion(@Ptr long target, int particle1, int particle2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_getExclusionParticles(const OpenMM_CustomGBForce*, int, int*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:475</i>
     */
    public static void OpenMM_CustomGBForce_getExclusionParticles(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2) {
        OpenMM_CustomGBForce_getExclusionParticles(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2));
    }

    protected native static void OpenMM_CustomGBForce_getExclusionParticles(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setExclusionParticles(OpenMM_CustomGBForce*, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:476</i>
     */
    public static void OpenMM_CustomGBForce_setExclusionParticles(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, int particle1, int particle2) {
        OpenMM_CustomGBForce_setExclusionParticles(Pointer.getPeer(target), index, particle1, particle2);
    }

    protected native static void OpenMM_CustomGBForce_setExclusionParticles(@Ptr long target, int index, int particle1, int particle2);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_addTabulatedFunction(OpenMM_CustomGBForce*, const char*, OpenMM_TabulatedFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:477</i>
     */
    public static int OpenMM_CustomGBForce_addTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> function) {
        return OpenMM_CustomGBForce_addTabulatedFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(function));
    }

    protected native static int OpenMM_CustomGBForce_addTabulatedFunction(@Ptr long target, @Ptr long name, @Ptr long function);

    /**
     * Original signature :
     * <code>OpenMM_TabulatedFunction* OpenMM_CustomGBForce_getTabulatedFunction(OpenMM_CustomGBForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:478</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> OpenMM_CustomGBForce_getTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomGBForce_getTabulatedFunction(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_TabulatedFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomGBForce_getTabulatedFunction(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomGBForce_getTabulatedFunctionName(const OpenMM_CustomGBForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:479</i>
     */
    public static Pointer<Byte> OpenMM_CustomGBForce_getTabulatedFunctionName(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomGBForce_getTabulatedFunctionName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomGBForce_getTabulatedFunctionName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomGBForce_addFunction(OpenMM_CustomGBForce*, const char*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:480</i>
     */
    public static int OpenMM_CustomGBForce_addFunction(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        return OpenMM_CustomGBForce_addFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(values), min, max);
    }

    protected native static int OpenMM_CustomGBForce_addFunction(@Ptr long target, @Ptr long name, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_getFunctionParameters(const OpenMM_CustomGBForce*, int, char**, OpenMM_DoubleArray*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:481</i>
     */
    public static void OpenMM_CustomGBForce_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Pointer<Byte>> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, Pointer<Double> min, Pointer<Double> max) {
        OpenMM_CustomGBForce_getFunctionParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(values), Pointer.getPeer(min), Pointer.getPeer(max));
    }

    protected native static void OpenMM_CustomGBForce_getFunctionParameters(@Ptr long target, int index, @Ptr long name, @Ptr long values, @Ptr long min, @Ptr long max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_setFunctionParameters(OpenMM_CustomGBForce*, int, const char*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:482</i>
     */
    public static void OpenMM_CustomGBForce_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, int index, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        OpenMM_CustomGBForce_setFunctionParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(values), min, max);
    }

    protected native static void OpenMM_CustomGBForce_setFunctionParameters(@Ptr long target, int index, @Ptr long name, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomGBForce_updateParametersInContext(OpenMM_CustomGBForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:483</i>
     */
    public static void OpenMM_CustomGBForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomGBForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomGBForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomGBForce_usesPeriodicBoundaryConditions(const OpenMM_CustomGBForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:484</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomGBForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomGBForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomGBForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomGBForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_CustomHbondForce* OpenMM_CustomHbondForce_create(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:491</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> OpenMM_CustomHbondForce_create(Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomHbondForce_create(Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomHbondForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomHbondForce_create(@Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_destroy(OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:492</i>
     */
    public static void OpenMM_CustomHbondForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        OpenMM_CustomHbondForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomHbondForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_getNumDonors(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:493</i>
     */
    public static int OpenMM_CustomHbondForce_getNumDonors(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getNumDonors(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomHbondForce_getNumDonors(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_getNumAcceptors(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:494</i>
     */
    public static int OpenMM_CustomHbondForce_getNumAcceptors(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getNumAcceptors(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomHbondForce_getNumAcceptors(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_getNumExclusions(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:495</i>
     */
    public static int OpenMM_CustomHbondForce_getNumExclusions(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getNumExclusions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomHbondForce_getNumExclusions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_getNumPerDonorParameters(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:496</i>
     */
    public static int OpenMM_CustomHbondForce_getNumPerDonorParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getNumPerDonorParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomHbondForce_getNumPerDonorParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_getNumPerAcceptorParameters(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:497</i>
     */
    public static int OpenMM_CustomHbondForce_getNumPerAcceptorParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getNumPerAcceptorParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomHbondForce_getNumPerAcceptorParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_getNumGlobalParameters(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:498</i>
     */
    public static int OpenMM_CustomHbondForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomHbondForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_getNumTabulatedFunctions(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:499</i>
     */
    public static int OpenMM_CustomHbondForce_getNumTabulatedFunctions(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getNumTabulatedFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomHbondForce_getNumTabulatedFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_getNumFunctions(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:500</i>
     */
    public static int OpenMM_CustomHbondForce_getNumFunctions(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getNumFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomHbondForce_getNumFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomHbondForce_getEnergyFunction(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:501</i>
     */
    public static Pointer<Byte> OpenMM_CustomHbondForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomHbondForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomHbondForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setEnergyFunction(OpenMM_CustomHbondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:502</i>
     */
    public static void OpenMM_CustomHbondForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomHbondForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomHbondForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>OpenMM_CustomHbondForce_NonbondedMethod OpenMM_CustomHbondForce_getNonbondedMethod(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:503</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_CustomHbondForce_NonbondedMethod> OpenMM_CustomHbondForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomHbondForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_CustomHbondForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_CustomHbondForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setNonbondedMethod(OpenMM_CustomHbondForce*, OpenMM_CustomHbondForce_NonbondedMethod)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:504</i>
     */
    public static void OpenMM_CustomHbondForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_CustomHbondForce_NonbondedMethod> method) {
        OpenMM_CustomHbondForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_CustomHbondForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>double OpenMM_CustomHbondForce_getCutoffDistance(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:505</i>
     */
    public static double OpenMM_CustomHbondForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return OpenMM_CustomHbondForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_CustomHbondForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setCutoffDistance(OpenMM_CustomHbondForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:506</i>
     */
    public static void OpenMM_CustomHbondForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, double distance) {
        OpenMM_CustomHbondForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_CustomHbondForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_addPerDonorParameter(OpenMM_CustomHbondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:507</i>
     */
    public static int OpenMM_CustomHbondForce_addPerDonorParameter(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomHbondForce_addPerDonorParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomHbondForce_addPerDonorParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomHbondForce_getPerDonorParameterName(const OpenMM_CustomHbondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:508</i>
     */
    public static Pointer<Byte> OpenMM_CustomHbondForce_getPerDonorParameterName(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomHbondForce_getPerDonorParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomHbondForce_getPerDonorParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setPerDonorParameterName(OpenMM_CustomHbondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:509</i>
     */
    public static void OpenMM_CustomHbondForce_setPerDonorParameterName(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomHbondForce_setPerDonorParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomHbondForce_setPerDonorParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_addPerAcceptorParameter(OpenMM_CustomHbondForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:510</i>
     */
    public static int OpenMM_CustomHbondForce_addPerAcceptorParameter(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomHbondForce_addPerAcceptorParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomHbondForce_addPerAcceptorParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomHbondForce_getPerAcceptorParameterName(const OpenMM_CustomHbondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:511</i>
     */
    public static Pointer<Byte> OpenMM_CustomHbondForce_getPerAcceptorParameterName(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomHbondForce_getPerAcceptorParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomHbondForce_getPerAcceptorParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setPerAcceptorParameterName(OpenMM_CustomHbondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:512</i>
     */
    public static void OpenMM_CustomHbondForce_setPerAcceptorParameterName(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomHbondForce_setPerAcceptorParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomHbondForce_setPerAcceptorParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_addGlobalParameter(OpenMM_CustomHbondForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:513</i>
     */
    public static int OpenMM_CustomHbondForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomHbondForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomHbondForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomHbondForce_getGlobalParameterName(const OpenMM_CustomHbondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:514</i>
     */
    public static Pointer<Byte> OpenMM_CustomHbondForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomHbondForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomHbondForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setGlobalParameterName(OpenMM_CustomHbondForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:515</i>
     */
    public static void OpenMM_CustomHbondForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomHbondForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomHbondForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomHbondForce_getGlobalParameterDefaultValue(const OpenMM_CustomHbondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:516</i>
     */
    public static double OpenMM_CustomHbondForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index) {
        return OpenMM_CustomHbondForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomHbondForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setGlobalParameterDefaultValue(OpenMM_CustomHbondForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:517</i>
     */
    public static void OpenMM_CustomHbondForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomHbondForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomHbondForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_addDonor(OpenMM_CustomHbondForce*, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:518</i>
     */
    public static int OpenMM_CustomHbondForce_addDonor(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int d1, int d2, int d3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomHbondForce_addDonor(Pointer.getPeer(target), d1, d2, d3, Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomHbondForce_addDonor(@Ptr long target, int d1, int d2, int d3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_getDonorParameters(const OpenMM_CustomHbondForce*, int, int*, int*, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:519</i>
     */
    public static void OpenMM_CustomHbondForce_getDonorParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, Pointer<Integer> d1, Pointer<Integer> d2, Pointer<Integer> d3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomHbondForce_getDonorParameters(Pointer.getPeer(target), index, Pointer.getPeer(d1), Pointer.getPeer(d2), Pointer.getPeer(d3), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomHbondForce_getDonorParameters(@Ptr long target, int index, @Ptr long d1, @Ptr long d2, @Ptr long d3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setDonorParameters(OpenMM_CustomHbondForce*, int, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:520</i>
     */
    public static void OpenMM_CustomHbondForce_setDonorParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, int d1, int d2, int d3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomHbondForce_setDonorParameters(Pointer.getPeer(target), index, d1, d2, d3, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomHbondForce_setDonorParameters(@Ptr long target, int index, int d1, int d2, int d3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_addAcceptor(OpenMM_CustomHbondForce*, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:521</i>
     */
    public static int OpenMM_CustomHbondForce_addAcceptor(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int a1, int a2, int a3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomHbondForce_addAcceptor(Pointer.getPeer(target), a1, a2, a3, Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomHbondForce_addAcceptor(@Ptr long target, int a1, int a2, int a3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_getAcceptorParameters(const OpenMM_CustomHbondForce*, int, int*, int*, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:522</i>
     */
    public static void OpenMM_CustomHbondForce_getAcceptorParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, Pointer<Integer> a1, Pointer<Integer> a2, Pointer<Integer> a3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomHbondForce_getAcceptorParameters(Pointer.getPeer(target), index, Pointer.getPeer(a1), Pointer.getPeer(a2), Pointer.getPeer(a3), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomHbondForce_getAcceptorParameters(@Ptr long target, int index, @Ptr long a1, @Ptr long a2, @Ptr long a3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setAcceptorParameters(OpenMM_CustomHbondForce*, int, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:523</i>
     */
    public static void OpenMM_CustomHbondForce_setAcceptorParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, int a1, int a2, int a3, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomHbondForce_setAcceptorParameters(Pointer.getPeer(target), index, a1, a2, a3, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomHbondForce_setAcceptorParameters(@Ptr long target, int index, int a1, int a2, int a3, @Ptr long parameters);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_addExclusion(OpenMM_CustomHbondForce*, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:524</i>
     */
    public static int OpenMM_CustomHbondForce_addExclusion(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int donor, int acceptor) {
        return OpenMM_CustomHbondForce_addExclusion(Pointer.getPeer(target), donor, acceptor);
    }

    protected native static int OpenMM_CustomHbondForce_addExclusion(@Ptr long target, int donor, int acceptor);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_getExclusionParticles(const OpenMM_CustomHbondForce*, int, int*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:525</i>
     */
    public static void OpenMM_CustomHbondForce_getExclusionParticles(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, Pointer<Integer> donor, Pointer<Integer> acceptor) {
        OpenMM_CustomHbondForce_getExclusionParticles(Pointer.getPeer(target), index, Pointer.getPeer(donor), Pointer.getPeer(acceptor));
    }

    protected native static void OpenMM_CustomHbondForce_getExclusionParticles(@Ptr long target, int index, @Ptr long donor, @Ptr long acceptor);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setExclusionParticles(OpenMM_CustomHbondForce*, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:526</i>
     */
    public static void OpenMM_CustomHbondForce_setExclusionParticles(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, int donor, int acceptor) {
        OpenMM_CustomHbondForce_setExclusionParticles(Pointer.getPeer(target), index, donor, acceptor);
    }

    protected native static void OpenMM_CustomHbondForce_setExclusionParticles(@Ptr long target, int index, int donor, int acceptor);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_addTabulatedFunction(OpenMM_CustomHbondForce*, const char*, OpenMM_TabulatedFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:527</i>
     */
    public static int OpenMM_CustomHbondForce_addTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> function) {
        return OpenMM_CustomHbondForce_addTabulatedFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(function));
    }

    protected native static int OpenMM_CustomHbondForce_addTabulatedFunction(@Ptr long target, @Ptr long name, @Ptr long function);

    /**
     * Original signature :
     * <code>OpenMM_TabulatedFunction* OpenMM_CustomHbondForce_getTabulatedFunction(OpenMM_CustomHbondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:528</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> OpenMM_CustomHbondForce_getTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomHbondForce_getTabulatedFunction(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_TabulatedFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomHbondForce_getTabulatedFunction(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomHbondForce_getTabulatedFunctionName(const OpenMM_CustomHbondForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:529</i>
     */
    public static Pointer<Byte> OpenMM_CustomHbondForce_getTabulatedFunctionName(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomHbondForce_getTabulatedFunctionName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomHbondForce_getTabulatedFunctionName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomHbondForce_addFunction(OpenMM_CustomHbondForce*, const char*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:530</i>
     */
    public static int OpenMM_CustomHbondForce_addFunction(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        return OpenMM_CustomHbondForce_addFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(values), min, max);
    }

    protected native static int OpenMM_CustomHbondForce_addFunction(@Ptr long target, @Ptr long name, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_getFunctionParameters(const OpenMM_CustomHbondForce*, int, char**, OpenMM_DoubleArray*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:531</i>
     */
    public static void OpenMM_CustomHbondForce_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, Pointer<Pointer<Byte>> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, Pointer<Double> min, Pointer<Double> max) {
        OpenMM_CustomHbondForce_getFunctionParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(values), Pointer.getPeer(min), Pointer.getPeer(max));
    }

    protected native static void OpenMM_CustomHbondForce_getFunctionParameters(@Ptr long target, int index, @Ptr long name, @Ptr long values, @Ptr long min, @Ptr long max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_setFunctionParameters(OpenMM_CustomHbondForce*, int, const char*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:532</i>
     */
    public static void OpenMM_CustomHbondForce_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, int index, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        OpenMM_CustomHbondForce_setFunctionParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(values), min, max);
    }

    protected native static void OpenMM_CustomHbondForce_setFunctionParameters(@Ptr long target, int index, @Ptr long name, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomHbondForce_updateParametersInContext(OpenMM_CustomHbondForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:533</i>
     */
    public static void OpenMM_CustomHbondForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomHbondForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomHbondForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomHbondForce_usesPeriodicBoundaryConditions(const OpenMM_CustomHbondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:534</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomHbondForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomHbondForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomHbondForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomHbondForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_CustomIntegrator* OpenMM_CustomIntegrator_create(double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:541</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> OpenMM_CustomIntegrator_create(double stepSize) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomIntegrator_create$2(stepSize), OpenMMLibrary.OpenMM_CustomIntegrator_struct.class);
    }

    @Ptr
    @Name("OpenMM_CustomIntegrator_create")
    protected native static long OpenMM_CustomIntegrator_create$2(double stepSize);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_destroy(OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:542</i>
     */
    public static void OpenMM_CustomIntegrator_destroy(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        OpenMM_CustomIntegrator_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomIntegrator_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_getNumGlobalVariables(const OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:543</i>
     */
    public static int OpenMM_CustomIntegrator_getNumGlobalVariables(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return OpenMM_CustomIntegrator_getNumGlobalVariables(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomIntegrator_getNumGlobalVariables(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_getNumPerDofVariables(const OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:544</i>
     */
    public static int OpenMM_CustomIntegrator_getNumPerDofVariables(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return OpenMM_CustomIntegrator_getNumPerDofVariables(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomIntegrator_getNumPerDofVariables(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_getNumComputations(const OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:545</i>
     */
    public static int OpenMM_CustomIntegrator_getNumComputations(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return OpenMM_CustomIntegrator_getNumComputations(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomIntegrator_getNumComputations(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_addGlobalVariable(OpenMM_CustomIntegrator*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:546</i>
     */
    public static int OpenMM_CustomIntegrator_addGlobalVariable(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> name, double initialValue) {
        return OpenMM_CustomIntegrator_addGlobalVariable(Pointer.getPeer(target), Pointer.getPeer(name), initialValue);
    }

    protected native static int OpenMM_CustomIntegrator_addGlobalVariable(@Ptr long target, @Ptr long name, double initialValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomIntegrator_getGlobalVariableName(const OpenMM_CustomIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:547</i>
     */
    public static Pointer<Byte> OpenMM_CustomIntegrator_getGlobalVariableName(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomIntegrator_getGlobalVariableName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomIntegrator_getGlobalVariableName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_addPerDofVariable(OpenMM_CustomIntegrator*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:548</i>
     */
    public static int OpenMM_CustomIntegrator_addPerDofVariable(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> name, double initialValue) {
        return OpenMM_CustomIntegrator_addPerDofVariable(Pointer.getPeer(target), Pointer.getPeer(name), initialValue);
    }

    protected native static int OpenMM_CustomIntegrator_addPerDofVariable(@Ptr long target, @Ptr long name, double initialValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomIntegrator_getPerDofVariableName(const OpenMM_CustomIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:549</i>
     */
    public static Pointer<Byte> OpenMM_CustomIntegrator_getPerDofVariableName(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomIntegrator_getPerDofVariableName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomIntegrator_getPerDofVariableName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>double OpenMM_CustomIntegrator_getGlobalVariable(const OpenMM_CustomIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:550</i>
     */
    public static double OpenMM_CustomIntegrator_getGlobalVariable(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int index) {
        return OpenMM_CustomIntegrator_getGlobalVariable(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomIntegrator_getGlobalVariable(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>double OpenMM_CustomIntegrator_getGlobalVariableByName(const OpenMM_CustomIntegrator*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:551</i>
     */
    public static double OpenMM_CustomIntegrator_getGlobalVariableByName(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomIntegrator_getGlobalVariableByName(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static double OpenMM_CustomIntegrator_getGlobalVariableByName(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_setGlobalVariable(OpenMM_CustomIntegrator*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:552</i>
     */
    public static void OpenMM_CustomIntegrator_setGlobalVariable(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int index, double value) {
        OpenMM_CustomIntegrator_setGlobalVariable(Pointer.getPeer(target), index, value);
    }

    protected native static void OpenMM_CustomIntegrator_setGlobalVariable(@Ptr long target, int index, double value);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_setGlobalVariableByName(OpenMM_CustomIntegrator*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:553</i>
     */
    public static void OpenMM_CustomIntegrator_setGlobalVariableByName(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> name, double value) {
        OpenMM_CustomIntegrator_setGlobalVariableByName(Pointer.getPeer(target), Pointer.getPeer(name), value);
    }

    protected native static void OpenMM_CustomIntegrator_setGlobalVariableByName(@Ptr long target, @Ptr long name, double value);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_getPerDofVariable(const OpenMM_CustomIntegrator*, int, OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:554</i>
     */
    public static void OpenMM_CustomIntegrator_getPerDofVariable(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> values) {
        OpenMM_CustomIntegrator_getPerDofVariable(Pointer.getPeer(target), index, Pointer.getPeer(values));
    }

    protected native static void OpenMM_CustomIntegrator_getPerDofVariable(@Ptr long target, int index, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_getPerDofVariableByName(const OpenMM_CustomIntegrator*, const char*, OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:555</i>
     */
    public static void OpenMM_CustomIntegrator_getPerDofVariableByName(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> values) {
        OpenMM_CustomIntegrator_getPerDofVariableByName(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(values));
    }

    protected native static void OpenMM_CustomIntegrator_getPerDofVariableByName(@Ptr long target, @Ptr long name, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_setPerDofVariable(OpenMM_CustomIntegrator*, int, const OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:556</i>
     */
    public static void OpenMM_CustomIntegrator_setPerDofVariable(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> values) {
        OpenMM_CustomIntegrator_setPerDofVariable(Pointer.getPeer(target), index, Pointer.getPeer(values));
    }

    protected native static void OpenMM_CustomIntegrator_setPerDofVariable(@Ptr long target, int index, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_setPerDofVariableByName(OpenMM_CustomIntegrator*, const char*, const OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:557</i>
     */
    public static void OpenMM_CustomIntegrator_setPerDofVariableByName(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> values) {
        OpenMM_CustomIntegrator_setPerDofVariableByName(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(values));
    }

    protected native static void OpenMM_CustomIntegrator_setPerDofVariableByName(@Ptr long target, @Ptr long name, @Ptr long values);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_addComputeGlobal(OpenMM_CustomIntegrator*, const char*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:558</i>
     */
    public static int OpenMM_CustomIntegrator_addComputeGlobal(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> variable, Pointer<Byte> expression) {
        return OpenMM_CustomIntegrator_addComputeGlobal(Pointer.getPeer(target), Pointer.getPeer(variable), Pointer.getPeer(expression));
    }

    protected native static int OpenMM_CustomIntegrator_addComputeGlobal(@Ptr long target, @Ptr long variable, @Ptr long expression);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_addComputePerDof(OpenMM_CustomIntegrator*, const char*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:559</i>
     */
    public static int OpenMM_CustomIntegrator_addComputePerDof(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> variable, Pointer<Byte> expression) {
        return OpenMM_CustomIntegrator_addComputePerDof(Pointer.getPeer(target), Pointer.getPeer(variable), Pointer.getPeer(expression));
    }

    protected native static int OpenMM_CustomIntegrator_addComputePerDof(@Ptr long target, @Ptr long variable, @Ptr long expression);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_addComputeSum(OpenMM_CustomIntegrator*, const char*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:560</i>
     */
    public static int OpenMM_CustomIntegrator_addComputeSum(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> variable, Pointer<Byte> expression) {
        return OpenMM_CustomIntegrator_addComputeSum(Pointer.getPeer(target), Pointer.getPeer(variable), Pointer.getPeer(expression));
    }

    protected native static int OpenMM_CustomIntegrator_addComputeSum(@Ptr long target, @Ptr long variable, @Ptr long expression);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_addConstrainPositions(OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:561</i>
     */
    public static int OpenMM_CustomIntegrator_addConstrainPositions(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return OpenMM_CustomIntegrator_addConstrainPositions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomIntegrator_addConstrainPositions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_addConstrainVelocities(OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:562</i>
     */
    public static int OpenMM_CustomIntegrator_addConstrainVelocities(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return OpenMM_CustomIntegrator_addConstrainVelocities(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomIntegrator_addConstrainVelocities(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_addUpdateContextState(OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:563</i>
     */
    public static int OpenMM_CustomIntegrator_addUpdateContextState(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return OpenMM_CustomIntegrator_addUpdateContextState(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomIntegrator_addUpdateContextState(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_beginIfBlock(OpenMM_CustomIntegrator*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:564</i>
     */
    public static int OpenMM_CustomIntegrator_beginIfBlock(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> condition) {
        return OpenMM_CustomIntegrator_beginIfBlock(Pointer.getPeer(target), Pointer.getPeer(condition));
    }

    protected native static int OpenMM_CustomIntegrator_beginIfBlock(@Ptr long target, @Ptr long condition);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_beginWhileBlock(OpenMM_CustomIntegrator*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:565</i>
     */
    public static int OpenMM_CustomIntegrator_beginWhileBlock(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> condition) {
        return OpenMM_CustomIntegrator_beginWhileBlock(Pointer.getPeer(target), Pointer.getPeer(condition));
    }

    protected native static int OpenMM_CustomIntegrator_beginWhileBlock(@Ptr long target, @Ptr long condition);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_endBlock(OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:566</i>
     */
    public static int OpenMM_CustomIntegrator_endBlock(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return OpenMM_CustomIntegrator_endBlock(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomIntegrator_endBlock(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_getComputationStep(const OpenMM_CustomIntegrator*, int, OpenMM_CustomIntegrator_ComputationType*, char**, char**)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:567</i>
     */
    public static void OpenMM_CustomIntegrator_getComputationStep(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int index, Pointer<IntValuedEnum<OpenMMLibrary.OpenMM_CustomIntegrator_ComputationType>> type, Pointer<Pointer<Byte>> variable, Pointer<Pointer<Byte>> expression) {
        OpenMM_CustomIntegrator_getComputationStep(Pointer.getPeer(target), index, Pointer.getPeer(type), Pointer.getPeer(variable), Pointer.getPeer(expression));
    }

    protected native static void OpenMM_CustomIntegrator_getComputationStep(@Ptr long target, int index, @Ptr long type, @Ptr long variable, @Ptr long expression);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomIntegrator_getKineticEnergyExpression(const OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:568</i>
     */
    public static Pointer<Byte> OpenMM_CustomIntegrator_getKineticEnergyExpression(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomIntegrator_getKineticEnergyExpression(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomIntegrator_getKineticEnergyExpression(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_setKineticEnergyExpression(OpenMM_CustomIntegrator*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:569</i>
     */
    public static void OpenMM_CustomIntegrator_setKineticEnergyExpression(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, Pointer<Byte> expression) {
        OpenMM_CustomIntegrator_setKineticEnergyExpression(Pointer.getPeer(target), Pointer.getPeer(expression));
    }

    protected native static void OpenMM_CustomIntegrator_setKineticEnergyExpression(@Ptr long target, @Ptr long expression);

    /**
     * Original signature :
     * <code>int OpenMM_CustomIntegrator_getRandomNumberSeed(const OpenMM_CustomIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:570</i>
     */
    public static int OpenMM_CustomIntegrator_getRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target) {
        return OpenMM_CustomIntegrator_getRandomNumberSeed(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomIntegrator_getRandomNumberSeed(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_setRandomNumberSeed(OpenMM_CustomIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:571</i>
     */
    public static void OpenMM_CustomIntegrator_setRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int seed) {
        OpenMM_CustomIntegrator_setRandomNumberSeed(Pointer.getPeer(target), seed);
    }

    protected native static void OpenMM_CustomIntegrator_setRandomNumberSeed(@Ptr long target, int seed);

    /**
     * Original signature :
     * <code>void OpenMM_CustomIntegrator_step(OpenMM_CustomIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:572</i>
     */
    public static void OpenMM_CustomIntegrator_step(Pointer<OpenMMLibrary.OpenMM_CustomIntegrator_struct> target, int steps) {
        OpenMM_CustomIntegrator_step(Pointer.getPeer(target), steps);
    }

    protected native static void OpenMM_CustomIntegrator_step(@Ptr long target, int steps);

    /**
     * Original signature :
     * <code>OpenMM_CustomManyParticleForce* OpenMM_CustomManyParticleForce_create(int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:582</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> OpenMM_CustomManyParticleForce_create(int particlesPerSet, Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomManyParticleForce_create(particlesPerSet, Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomManyParticleForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomManyParticleForce_create(int particlesPerSet, @Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_destroy(OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:583</i>
     */
    public static void OpenMM_CustomManyParticleForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        OpenMM_CustomManyParticleForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomManyParticleForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_getNumParticlesPerSet(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:584</i>
     */
    public static int OpenMM_CustomManyParticleForce_getNumParticlesPerSet(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return OpenMM_CustomManyParticleForce_getNumParticlesPerSet(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomManyParticleForce_getNumParticlesPerSet(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_getNumParticles(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:585</i>
     */
    public static int OpenMM_CustomManyParticleForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return OpenMM_CustomManyParticleForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomManyParticleForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_getNumExclusions(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:586</i>
     */
    public static int OpenMM_CustomManyParticleForce_getNumExclusions(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return OpenMM_CustomManyParticleForce_getNumExclusions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomManyParticleForce_getNumExclusions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_getNumPerParticleParameters(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:587</i>
     */
    public static int OpenMM_CustomManyParticleForce_getNumPerParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return OpenMM_CustomManyParticleForce_getNumPerParticleParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomManyParticleForce_getNumPerParticleParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_getNumGlobalParameters(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:588</i>
     */
    public static int OpenMM_CustomManyParticleForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return OpenMM_CustomManyParticleForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomManyParticleForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_getNumTabulatedFunctions(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:589</i>
     */
    public static int OpenMM_CustomManyParticleForce_getNumTabulatedFunctions(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return OpenMM_CustomManyParticleForce_getNumTabulatedFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomManyParticleForce_getNumTabulatedFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomManyParticleForce_getEnergyFunction(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:590</i>
     */
    public static Pointer<Byte> OpenMM_CustomManyParticleForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomManyParticleForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomManyParticleForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setEnergyFunction(OpenMM_CustomManyParticleForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:591</i>
     */
    public static void OpenMM_CustomManyParticleForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomManyParticleForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomManyParticleForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>OpenMM_CustomManyParticleForce_NonbondedMethod OpenMM_CustomManyParticleForce_getNonbondedMethod(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:592</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_CustomManyParticleForce_NonbondedMethod> OpenMM_CustomManyParticleForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomManyParticleForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_CustomManyParticleForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_CustomManyParticleForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setNonbondedMethod(OpenMM_CustomManyParticleForce*, OpenMM_CustomManyParticleForce_NonbondedMethod)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:593</i>
     */
    public static void OpenMM_CustomManyParticleForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_CustomManyParticleForce_NonbondedMethod> method) {
        OpenMM_CustomManyParticleForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_CustomManyParticleForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>OpenMM_CustomManyParticleForce_PermutationMode OpenMM_CustomManyParticleForce_getPermutationMode(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:594</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_CustomManyParticleForce_PermutationMode> OpenMM_CustomManyParticleForce_getPermutationMode(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomManyParticleForce_getPermutationMode(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_CustomManyParticleForce_PermutationMode.class);
    }

    protected native static int OpenMM_CustomManyParticleForce_getPermutationMode(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setPermutationMode(OpenMM_CustomManyParticleForce*, OpenMM_CustomManyParticleForce_PermutationMode)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:595</i>
     */
    public static void OpenMM_CustomManyParticleForce_setPermutationMode(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_CustomManyParticleForce_PermutationMode> mode) {
        OpenMM_CustomManyParticleForce_setPermutationMode(Pointer.getPeer(target), (int) mode.value());
    }

    protected native static void OpenMM_CustomManyParticleForce_setPermutationMode(@Ptr long target, int mode);

    /**
     * Original signature :
     * <code>double OpenMM_CustomManyParticleForce_getCutoffDistance(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:596</i>
     */
    public static double OpenMM_CustomManyParticleForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return OpenMM_CustomManyParticleForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_CustomManyParticleForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setCutoffDistance(OpenMM_CustomManyParticleForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:597</i>
     */
    public static void OpenMM_CustomManyParticleForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, double distance) {
        OpenMM_CustomManyParticleForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_CustomManyParticleForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_addPerParticleParameter(OpenMM_CustomManyParticleForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:598</i>
     */
    public static int OpenMM_CustomManyParticleForce_addPerParticleParameter(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomManyParticleForce_addPerParticleParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomManyParticleForce_addPerParticleParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomManyParticleForce_getPerParticleParameterName(const OpenMM_CustomManyParticleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:599</i>
     */
    public static Pointer<Byte> OpenMM_CustomManyParticleForce_getPerParticleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomManyParticleForce_getPerParticleParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomManyParticleForce_getPerParticleParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setPerParticleParameterName(OpenMM_CustomManyParticleForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:600</i>
     */
    public static void OpenMM_CustomManyParticleForce_setPerParticleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomManyParticleForce_setPerParticleParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomManyParticleForce_setPerParticleParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_addGlobalParameter(OpenMM_CustomManyParticleForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:601</i>
     */
    public static int OpenMM_CustomManyParticleForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomManyParticleForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomManyParticleForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomManyParticleForce_getGlobalParameterName(const OpenMM_CustomManyParticleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:602</i>
     */
    public static Pointer<Byte> OpenMM_CustomManyParticleForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomManyParticleForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomManyParticleForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setGlobalParameterName(OpenMM_CustomManyParticleForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:603</i>
     */
    public static void OpenMM_CustomManyParticleForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomManyParticleForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomManyParticleForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomManyParticleForce_getGlobalParameterDefaultValue(const OpenMM_CustomManyParticleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:604</i>
     */
    public static double OpenMM_CustomManyParticleForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index) {
        return OpenMM_CustomManyParticleForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomManyParticleForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setGlobalParameterDefaultValue(OpenMM_CustomManyParticleForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:605</i>
     */
    public static void OpenMM_CustomManyParticleForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomManyParticleForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomManyParticleForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_addParticle(OpenMM_CustomManyParticleForce*, const OpenMM_DoubleArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:606</i>
     */
    public static int OpenMM_CustomManyParticleForce_addParticle(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters, int type) {
        return OpenMM_CustomManyParticleForce_addParticle(Pointer.getPeer(target), Pointer.getPeer(parameters), type);
    }

    protected native static int OpenMM_CustomManyParticleForce_addParticle(@Ptr long target, @Ptr long parameters, int type);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_getParticleParameters(const OpenMM_CustomManyParticleForce*, int, OpenMM_DoubleArray*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:607</i>
     */
    public static void OpenMM_CustomManyParticleForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters, Pointer<Integer> type) {
        OpenMM_CustomManyParticleForce_getParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(parameters), Pointer.getPeer(type));
    }

    protected native static void OpenMM_CustomManyParticleForce_getParticleParameters(@Ptr long target, int index, @Ptr long parameters, @Ptr long type);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setParticleParameters(OpenMM_CustomManyParticleForce*, int, const OpenMM_DoubleArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:608</i>
     */
    public static void OpenMM_CustomManyParticleForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters, int type) {
        OpenMM_CustomManyParticleForce_setParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(parameters), type);
    }

    protected native static void OpenMM_CustomManyParticleForce_setParticleParameters(@Ptr long target, int index, @Ptr long parameters, int type);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_addExclusion(OpenMM_CustomManyParticleForce*, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:609</i>
     */
    public static int OpenMM_CustomManyParticleForce_addExclusion(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int particle1, int particle2) {
        return OpenMM_CustomManyParticleForce_addExclusion(Pointer.getPeer(target), particle1, particle2);
    }

    protected native static int OpenMM_CustomManyParticleForce_addExclusion(@Ptr long target, int particle1, int particle2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_getExclusionParticles(const OpenMM_CustomManyParticleForce*, int, int*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:610</i>
     */
    public static void OpenMM_CustomManyParticleForce_getExclusionParticles(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2) {
        OpenMM_CustomManyParticleForce_getExclusionParticles(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2));
    }

    protected native static void OpenMM_CustomManyParticleForce_getExclusionParticles(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setExclusionParticles(OpenMM_CustomManyParticleForce*, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:611</i>
     */
    public static void OpenMM_CustomManyParticleForce_setExclusionParticles(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, int particle1, int particle2) {
        OpenMM_CustomManyParticleForce_setExclusionParticles(Pointer.getPeer(target), index, particle1, particle2);
    }

    protected native static void OpenMM_CustomManyParticleForce_setExclusionParticles(@Ptr long target, int index, int particle1, int particle2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_createExclusionsFromBonds(OpenMM_CustomManyParticleForce*, const OpenMM_BondArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:612</i>
     */
    public static void OpenMM_CustomManyParticleForce_createExclusionsFromBonds(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_BondArray_struct> bonds, int bondCutoff) {
        OpenMM_CustomManyParticleForce_createExclusionsFromBonds(Pointer.getPeer(target), Pointer.getPeer(bonds), bondCutoff);
    }

    protected native static void OpenMM_CustomManyParticleForce_createExclusionsFromBonds(@Ptr long target, @Ptr long bonds, int bondCutoff);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_getTypeFilter(const OpenMM_CustomManyParticleForce*, int, OpenMM_IntSet*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:613</i>
     */
    public static void OpenMM_CustomManyParticleForce_getTypeFilter(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntSet_struct> types) {
        OpenMM_CustomManyParticleForce_getTypeFilter(Pointer.getPeer(target), index, Pointer.getPeer(types));
    }

    protected native static void OpenMM_CustomManyParticleForce_getTypeFilter(@Ptr long target, int index, @Ptr long types);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_setTypeFilter(OpenMM_CustomManyParticleForce*, int, const OpenMM_IntSet*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:614</i>
     */
    public static void OpenMM_CustomManyParticleForce_setTypeFilter(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntSet_struct> types) {
        OpenMM_CustomManyParticleForce_setTypeFilter(Pointer.getPeer(target), index, Pointer.getPeer(types));
    }

    protected native static void OpenMM_CustomManyParticleForce_setTypeFilter(@Ptr long target, int index, @Ptr long types);

    /**
     * Original signature :
     * <code>int OpenMM_CustomManyParticleForce_addTabulatedFunction(OpenMM_CustomManyParticleForce*, const char*, OpenMM_TabulatedFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:615</i>
     */
    public static int OpenMM_CustomManyParticleForce_addTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> function) {
        return OpenMM_CustomManyParticleForce_addTabulatedFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(function));
    }

    protected native static int OpenMM_CustomManyParticleForce_addTabulatedFunction(@Ptr long target, @Ptr long name, @Ptr long function);

    /**
     * Original signature :
     * <code>OpenMM_TabulatedFunction* OpenMM_CustomManyParticleForce_getTabulatedFunction(OpenMM_CustomManyParticleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:616</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> OpenMM_CustomManyParticleForce_getTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomManyParticleForce_getTabulatedFunction(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_TabulatedFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomManyParticleForce_getTabulatedFunction(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomManyParticleForce_getTabulatedFunctionName(const OpenMM_CustomManyParticleForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:617</i>
     */
    public static Pointer<Byte> OpenMM_CustomManyParticleForce_getTabulatedFunctionName(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomManyParticleForce_getTabulatedFunctionName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomManyParticleForce_getTabulatedFunctionName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomManyParticleForce_updateParametersInContext(OpenMM_CustomManyParticleForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:618</i>
     */
    public static void OpenMM_CustomManyParticleForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomManyParticleForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomManyParticleForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomManyParticleForce_usesPeriodicBoundaryConditions(const OpenMM_CustomManyParticleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:619</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomManyParticleForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomManyParticleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomManyParticleForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomManyParticleForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_CustomNonbondedForce* OpenMM_CustomNonbondedForce_create(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:626</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> OpenMM_CustomNonbondedForce_create(Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomNonbondedForce_create(Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomNonbondedForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomNonbondedForce_create(@Ptr long energy);

    /**
     * Original signature :
     * <code>OpenMM_CustomNonbondedForce* OpenMM_CustomNonbondedForce_create_2(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:627</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> OpenMM_CustomNonbondedForce_create_2(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> rhs) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomNonbondedForce_create_2(Pointer.getPeer(rhs)), OpenMMLibrary.OpenMM_CustomNonbondedForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomNonbondedForce_create_2(@Ptr long rhs);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_destroy(OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:628</i>
     */
    public static void OpenMM_CustomNonbondedForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        OpenMM_CustomNonbondedForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomNonbondedForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_getNumParticles(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:629</i>
     */
    public static int OpenMM_CustomNonbondedForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomNonbondedForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_getNumExclusions(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:630</i>
     */
    public static int OpenMM_CustomNonbondedForce_getNumExclusions(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getNumExclusions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomNonbondedForce_getNumExclusions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_getNumPerParticleParameters(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:631</i>
     */
    public static int OpenMM_CustomNonbondedForce_getNumPerParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getNumPerParticleParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomNonbondedForce_getNumPerParticleParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_getNumGlobalParameters(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:632</i>
     */
    public static int OpenMM_CustomNonbondedForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomNonbondedForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_getNumTabulatedFunctions(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:633</i>
     */
    public static int OpenMM_CustomNonbondedForce_getNumTabulatedFunctions(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getNumTabulatedFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomNonbondedForce_getNumTabulatedFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_getNumFunctions(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:634</i>
     */
    public static int OpenMM_CustomNonbondedForce_getNumFunctions(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getNumFunctions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomNonbondedForce_getNumFunctions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_getNumInteractionGroups(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:635</i>
     */
    public static int OpenMM_CustomNonbondedForce_getNumInteractionGroups(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getNumInteractionGroups(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomNonbondedForce_getNumInteractionGroups(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_getNumEnergyParameterDerivatives(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:636</i>
     */
    public static int OpenMM_CustomNonbondedForce_getNumEnergyParameterDerivatives(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getNumEnergyParameterDerivatives(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomNonbondedForce_getNumEnergyParameterDerivatives(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomNonbondedForce_getEnergyFunction(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:637</i>
     */
    public static Pointer<Byte> OpenMM_CustomNonbondedForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomNonbondedForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomNonbondedForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setEnergyFunction(OpenMM_CustomNonbondedForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:638</i>
     */
    public static void OpenMM_CustomNonbondedForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomNonbondedForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomNonbondedForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>OpenMM_CustomNonbondedForce_NonbondedMethod OpenMM_CustomNonbondedForce_getNonbondedMethod(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:639</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_CustomNonbondedForce_NonbondedMethod> OpenMM_CustomNonbondedForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomNonbondedForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_CustomNonbondedForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_CustomNonbondedForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setNonbondedMethod(OpenMM_CustomNonbondedForce*, OpenMM_CustomNonbondedForce_NonbondedMethod)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:640</i>
     */
    public static void OpenMM_CustomNonbondedForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_CustomNonbondedForce_NonbondedMethod> method) {
        OpenMM_CustomNonbondedForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_CustomNonbondedForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>double OpenMM_CustomNonbondedForce_getCutoffDistance(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:641</i>
     */
    public static double OpenMM_CustomNonbondedForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_CustomNonbondedForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setCutoffDistance(OpenMM_CustomNonbondedForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:642</i>
     */
    public static void OpenMM_CustomNonbondedForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, double distance) {
        OpenMM_CustomNonbondedForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_CustomNonbondedForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomNonbondedForce_getUseSwitchingFunction(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:643</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomNonbondedForce_getUseSwitchingFunction(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomNonbondedForce_getUseSwitchingFunction(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomNonbondedForce_getUseSwitchingFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setUseSwitchingFunction(OpenMM_CustomNonbondedForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:644</i>
     */
    public static void OpenMM_CustomNonbondedForce_setUseSwitchingFunction(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> use) {
        OpenMM_CustomNonbondedForce_setUseSwitchingFunction(Pointer.getPeer(target), (int) use.value());
    }

    protected native static void OpenMM_CustomNonbondedForce_setUseSwitchingFunction(@Ptr long target, int use);

    /**
     * Original signature :
     * <code>double OpenMM_CustomNonbondedForce_getSwitchingDistance(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:645</i>
     */
    public static double OpenMM_CustomNonbondedForce_getSwitchingDistance(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return OpenMM_CustomNonbondedForce_getSwitchingDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_CustomNonbondedForce_getSwitchingDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setSwitchingDistance(OpenMM_CustomNonbondedForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:646</i>
     */
    public static void OpenMM_CustomNonbondedForce_setSwitchingDistance(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, double distance) {
        OpenMM_CustomNonbondedForce_setSwitchingDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_CustomNonbondedForce_setSwitchingDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomNonbondedForce_getUseLongRangeCorrection(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:647</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomNonbondedForce_getUseLongRangeCorrection(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomNonbondedForce_getUseLongRangeCorrection(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomNonbondedForce_getUseLongRangeCorrection(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setUseLongRangeCorrection(OpenMM_CustomNonbondedForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:648</i>
     */
    public static void OpenMM_CustomNonbondedForce_setUseLongRangeCorrection(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> use) {
        OpenMM_CustomNonbondedForce_setUseLongRangeCorrection(Pointer.getPeer(target), (int) use.value());
    }

    protected native static void OpenMM_CustomNonbondedForce_setUseLongRangeCorrection(@Ptr long target, int use);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_addPerParticleParameter(OpenMM_CustomNonbondedForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:649</i>
     */
    public static int OpenMM_CustomNonbondedForce_addPerParticleParameter(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomNonbondedForce_addPerParticleParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomNonbondedForce_addPerParticleParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomNonbondedForce_getPerParticleParameterName(const OpenMM_CustomNonbondedForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:650</i>
     */
    public static Pointer<Byte> OpenMM_CustomNonbondedForce_getPerParticleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomNonbondedForce_getPerParticleParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomNonbondedForce_getPerParticleParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setPerParticleParameterName(OpenMM_CustomNonbondedForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:651</i>
     */
    public static void OpenMM_CustomNonbondedForce_setPerParticleParameterName(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomNonbondedForce_setPerParticleParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomNonbondedForce_setPerParticleParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_addGlobalParameter(OpenMM_CustomNonbondedForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:652</i>
     */
    public static int OpenMM_CustomNonbondedForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomNonbondedForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomNonbondedForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomNonbondedForce_getGlobalParameterName(const OpenMM_CustomNonbondedForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:653</i>
     */
    public static Pointer<Byte> OpenMM_CustomNonbondedForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomNonbondedForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomNonbondedForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setGlobalParameterName(OpenMM_CustomNonbondedForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:654</i>
     */
    public static void OpenMM_CustomNonbondedForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomNonbondedForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomNonbondedForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomNonbondedForce_getGlobalParameterDefaultValue(const OpenMM_CustomNonbondedForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:655</i>
     */
    public static double OpenMM_CustomNonbondedForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index) {
        return OpenMM_CustomNonbondedForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomNonbondedForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setGlobalParameterDefaultValue(OpenMM_CustomNonbondedForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:656</i>
     */
    public static void OpenMM_CustomNonbondedForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomNonbondedForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomNonbondedForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_addEnergyParameterDerivative(OpenMM_CustomNonbondedForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:657</i>
     */
    public static void OpenMM_CustomNonbondedForce_addEnergyParameterDerivative(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<Byte> name) {
        OpenMM_CustomNonbondedForce_addEnergyParameterDerivative(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomNonbondedForce_addEnergyParameterDerivative(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomNonbondedForce_getEnergyParameterDerivativeName(const OpenMM_CustomNonbondedForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:658</i>
     */
    public static Pointer<Byte> OpenMM_CustomNonbondedForce_getEnergyParameterDerivativeName(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomNonbondedForce_getEnergyParameterDerivativeName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomNonbondedForce_getEnergyParameterDerivativeName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_addParticle(OpenMM_CustomNonbondedForce*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:659</i>
     */
    public static int OpenMM_CustomNonbondedForce_addParticle(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomNonbondedForce_addParticle(Pointer.getPeer(target), Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomNonbondedForce_addParticle(@Ptr long target, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_getParticleParameters(const OpenMM_CustomNonbondedForce*, int, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:660</i>
     */
    public static void OpenMM_CustomNonbondedForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomNonbondedForce_getParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomNonbondedForce_getParticleParameters(@Ptr long target, int index, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setParticleParameters(OpenMM_CustomNonbondedForce*, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:661</i>
     */
    public static void OpenMM_CustomNonbondedForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomNonbondedForce_setParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomNonbondedForce_setParticleParameters(@Ptr long target, int index, @Ptr long parameters);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_addExclusion(OpenMM_CustomNonbondedForce*, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:662</i>
     */
    public static int OpenMM_CustomNonbondedForce_addExclusion(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int particle1, int particle2) {
        return OpenMM_CustomNonbondedForce_addExclusion(Pointer.getPeer(target), particle1, particle2);
    }

    protected native static int OpenMM_CustomNonbondedForce_addExclusion(@Ptr long target, int particle1, int particle2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_getExclusionParticles(const OpenMM_CustomNonbondedForce*, int, int*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:663</i>
     */
    public static void OpenMM_CustomNonbondedForce_getExclusionParticles(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2) {
        OpenMM_CustomNonbondedForce_getExclusionParticles(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2));
    }

    protected native static void OpenMM_CustomNonbondedForce_getExclusionParticles(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setExclusionParticles(OpenMM_CustomNonbondedForce*, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:664</i>
     */
    public static void OpenMM_CustomNonbondedForce_setExclusionParticles(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, int particle1, int particle2) {
        OpenMM_CustomNonbondedForce_setExclusionParticles(Pointer.getPeer(target), index, particle1, particle2);
    }

    protected native static void OpenMM_CustomNonbondedForce_setExclusionParticles(@Ptr long target, int index, int particle1, int particle2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_createExclusionsFromBonds(OpenMM_CustomNonbondedForce*, const OpenMM_BondArray*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:665</i>
     */
    public static void OpenMM_CustomNonbondedForce_createExclusionsFromBonds(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<OpenMMLibrary.OpenMM_BondArray_struct> bonds, int bondCutoff) {
        OpenMM_CustomNonbondedForce_createExclusionsFromBonds(Pointer.getPeer(target), Pointer.getPeer(bonds), bondCutoff);
    }

    protected native static void OpenMM_CustomNonbondedForce_createExclusionsFromBonds(@Ptr long target, @Ptr long bonds, int bondCutoff);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_addTabulatedFunction(OpenMM_CustomNonbondedForce*, const char*, OpenMM_TabulatedFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:666</i>
     */
    public static int OpenMM_CustomNonbondedForce_addTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> function) {
        return OpenMM_CustomNonbondedForce_addTabulatedFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(function));
    }

    protected native static int OpenMM_CustomNonbondedForce_addTabulatedFunction(@Ptr long target, @Ptr long name, @Ptr long function);

    /**
     * Original signature :
     * <code>OpenMM_TabulatedFunction* OpenMM_CustomNonbondedForce_getTabulatedFunction(OpenMM_CustomNonbondedForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:667</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_TabulatedFunction_struct> OpenMM_CustomNonbondedForce_getTabulatedFunction(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomNonbondedForce_getTabulatedFunction(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_TabulatedFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomNonbondedForce_getTabulatedFunction(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomNonbondedForce_getTabulatedFunctionName(const OpenMM_CustomNonbondedForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:668</i>
     */
    public static Pointer<Byte> OpenMM_CustomNonbondedForce_getTabulatedFunctionName(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomNonbondedForce_getTabulatedFunctionName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomNonbondedForce_getTabulatedFunctionName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_addFunction(OpenMM_CustomNonbondedForce*, const char*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:669</i>
     */
    public static int OpenMM_CustomNonbondedForce_addFunction(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        return OpenMM_CustomNonbondedForce_addFunction(Pointer.getPeer(target), Pointer.getPeer(name), Pointer.getPeer(values), min, max);
    }

    protected native static int OpenMM_CustomNonbondedForce_addFunction(@Ptr long target, @Ptr long name, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_getFunctionParameters(const OpenMM_CustomNonbondedForce*, int, char**, OpenMM_DoubleArray*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:670</i>
     */
    public static void OpenMM_CustomNonbondedForce_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<Pointer<Byte>> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, Pointer<Double> min, Pointer<Double> max) {
        OpenMM_CustomNonbondedForce_getFunctionParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(values), Pointer.getPeer(min), Pointer.getPeer(max));
    }

    protected native static void OpenMM_CustomNonbondedForce_getFunctionParameters(@Ptr long target, int index, @Ptr long name, @Ptr long values, @Ptr long min, @Ptr long max);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setFunctionParameters(OpenMM_CustomNonbondedForce*, int, const char*, const OpenMM_DoubleArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:671</i>
     */
    public static void OpenMM_CustomNonbondedForce_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<Byte> name, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values, double min, double max) {
        OpenMM_CustomNonbondedForce_setFunctionParameters(Pointer.getPeer(target), index, Pointer.getPeer(name), Pointer.getPeer(values), min, max);
    }

    protected native static void OpenMM_CustomNonbondedForce_setFunctionParameters(@Ptr long target, int index, @Ptr long name, @Ptr long values, double min, double max);

    /**
     * Original signature :
     * <code>int OpenMM_CustomNonbondedForce_addInteractionGroup(OpenMM_CustomNonbondedForce*, const OpenMM_IntSet*, const OpenMM_IntSet*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:672</i>
     */
    public static int OpenMM_CustomNonbondedForce_addInteractionGroup(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set1, Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set2) {
        return OpenMM_CustomNonbondedForce_addInteractionGroup(Pointer.getPeer(target), Pointer.getPeer(set1), Pointer.getPeer(set2));
    }

    protected native static int OpenMM_CustomNonbondedForce_addInteractionGroup(@Ptr long target, @Ptr long set1, @Ptr long set2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_getInteractionGroupParameters(const OpenMM_CustomNonbondedForce*, int, OpenMM_IntSet*, OpenMM_IntSet*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:673</i>
     */
    public static void OpenMM_CustomNonbondedForce_getInteractionGroupParameters(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set1, Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set2) {
        OpenMM_CustomNonbondedForce_getInteractionGroupParameters(Pointer.getPeer(target), index, Pointer.getPeer(set1), Pointer.getPeer(set2));
    }

    protected native static void OpenMM_CustomNonbondedForce_getInteractionGroupParameters(@Ptr long target, int index, @Ptr long set1, @Ptr long set2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_setInteractionGroupParameters(OpenMM_CustomNonbondedForce*, int, const OpenMM_IntSet*, const OpenMM_IntSet*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:674</i>
     */
    public static void OpenMM_CustomNonbondedForce_setInteractionGroupParameters(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set1, Pointer<OpenMMLibrary.OpenMM_IntSet_struct> set2) {
        OpenMM_CustomNonbondedForce_setInteractionGroupParameters(Pointer.getPeer(target), index, Pointer.getPeer(set1), Pointer.getPeer(set2));
    }

    protected native static void OpenMM_CustomNonbondedForce_setInteractionGroupParameters(@Ptr long target, int index, @Ptr long set1, @Ptr long set2);

    /**
     * Original signature :
     * <code>void OpenMM_CustomNonbondedForce_updateParametersInContext(OpenMM_CustomNonbondedForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:675</i>
     */
    public static void OpenMM_CustomNonbondedForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomNonbondedForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomNonbondedForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomNonbondedForce_usesPeriodicBoundaryConditions(const OpenMM_CustomNonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:676</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomNonbondedForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomNonbondedForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomNonbondedForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomNonbondedForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * CustomTorsionForce<br>
     * Original signature :
     * <code>OpenMM_CustomTorsionForce* OpenMM_CustomTorsionForce_create(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:679</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> OpenMM_CustomTorsionForce_create(Pointer<Byte> energy) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomTorsionForce_create(Pointer.getPeer(energy)), OpenMMLibrary.OpenMM_CustomTorsionForce_struct.class);
    }

    @Ptr
    protected native static long OpenMM_CustomTorsionForce_create(@Ptr long energy);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_destroy(OpenMM_CustomTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:680</i>
     */
    public static void OpenMM_CustomTorsionForce_destroy(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target) {
        OpenMM_CustomTorsionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_CustomTorsionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomTorsionForce_getNumTorsions(const OpenMM_CustomTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:681</i>
     */
    public static int OpenMM_CustomTorsionForce_getNumTorsions(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target) {
        return OpenMM_CustomTorsionForce_getNumTorsions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomTorsionForce_getNumTorsions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomTorsionForce_getNumPerTorsionParameters(const OpenMM_CustomTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:682</i>
     */
    public static int OpenMM_CustomTorsionForce_getNumPerTorsionParameters(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target) {
        return OpenMM_CustomTorsionForce_getNumPerTorsionParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomTorsionForce_getNumPerTorsionParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomTorsionForce_getNumGlobalParameters(const OpenMM_CustomTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:683</i>
     */
    public static int OpenMM_CustomTorsionForce_getNumGlobalParameters(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target) {
        return OpenMM_CustomTorsionForce_getNumGlobalParameters(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomTorsionForce_getNumGlobalParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_CustomTorsionForce_getNumEnergyParameterDerivatives(const OpenMM_CustomTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:684</i>
     */
    public static int OpenMM_CustomTorsionForce_getNumEnergyParameterDerivatives(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target) {
        return OpenMM_CustomTorsionForce_getNumEnergyParameterDerivatives(Pointer.getPeer(target));
    }

    protected native static int OpenMM_CustomTorsionForce_getNumEnergyParameterDerivatives(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomTorsionForce_getEnergyFunction(const OpenMM_CustomTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:685</i>
     */
    public static Pointer<Byte> OpenMM_CustomTorsionForce_getEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomTorsionForce_getEnergyFunction(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomTorsionForce_getEnergyFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_setEnergyFunction(OpenMM_CustomTorsionForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:686</i>
     */
    public static void OpenMM_CustomTorsionForce_setEnergyFunction(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, Pointer<Byte> energy) {
        OpenMM_CustomTorsionForce_setEnergyFunction(Pointer.getPeer(target), Pointer.getPeer(energy));
    }

    protected native static void OpenMM_CustomTorsionForce_setEnergyFunction(@Ptr long target, @Ptr long energy);

    /**
     * Original signature :
     * <code>int OpenMM_CustomTorsionForce_addPerTorsionParameter(OpenMM_CustomTorsionForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:687</i>
     */
    public static int OpenMM_CustomTorsionForce_addPerTorsionParameter(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, Pointer<Byte> name) {
        return OpenMM_CustomTorsionForce_addPerTorsionParameter(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static int OpenMM_CustomTorsionForce_addPerTorsionParameter(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomTorsionForce_getPerTorsionParameterName(const OpenMM_CustomTorsionForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:688</i>
     */
    public static Pointer<Byte> OpenMM_CustomTorsionForce_getPerTorsionParameterName(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomTorsionForce_getPerTorsionParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomTorsionForce_getPerTorsionParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_setPerTorsionParameterName(OpenMM_CustomTorsionForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:689</i>
     */
    public static void OpenMM_CustomTorsionForce_setPerTorsionParameterName(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomTorsionForce_setPerTorsionParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomTorsionForce_setPerTorsionParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>int OpenMM_CustomTorsionForce_addGlobalParameter(OpenMM_CustomTorsionForce*, const char*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:690</i>
     */
    public static int OpenMM_CustomTorsionForce_addGlobalParameter(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, Pointer<Byte> name, double defaultValue) {
        return OpenMM_CustomTorsionForce_addGlobalParameter(Pointer.getPeer(target), Pointer.getPeer(name), defaultValue);
    }

    protected native static int OpenMM_CustomTorsionForce_addGlobalParameter(@Ptr long target, @Ptr long name, double defaultValue);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomTorsionForce_getGlobalParameterName(const OpenMM_CustomTorsionForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:691</i>
     */
    public static Pointer<Byte> OpenMM_CustomTorsionForce_getGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomTorsionForce_getGlobalParameterName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomTorsionForce_getGlobalParameterName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_setGlobalParameterName(OpenMM_CustomTorsionForce*, int, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:692</i>
     */
    public static void OpenMM_CustomTorsionForce_setGlobalParameterName(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index, Pointer<Byte> name) {
        OpenMM_CustomTorsionForce_setGlobalParameterName(Pointer.getPeer(target), index, Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomTorsionForce_setGlobalParameterName(@Ptr long target, int index, @Ptr long name);

    /**
     * Original signature :
     * <code>double OpenMM_CustomTorsionForce_getGlobalParameterDefaultValue(const OpenMM_CustomTorsionForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:693</i>
     */
    public static double OpenMM_CustomTorsionForce_getGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index) {
        return OpenMM_CustomTorsionForce_getGlobalParameterDefaultValue(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_CustomTorsionForce_getGlobalParameterDefaultValue(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_setGlobalParameterDefaultValue(OpenMM_CustomTorsionForce*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:694</i>
     */
    public static void OpenMM_CustomTorsionForce_setGlobalParameterDefaultValue(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index, double defaultValue) {
        OpenMM_CustomTorsionForce_setGlobalParameterDefaultValue(Pointer.getPeer(target), index, defaultValue);
    }

    protected native static void OpenMM_CustomTorsionForce_setGlobalParameterDefaultValue(@Ptr long target, int index, double defaultValue);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_addEnergyParameterDerivative(OpenMM_CustomTorsionForce*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:695</i>
     */
    public static void OpenMM_CustomTorsionForce_addEnergyParameterDerivative(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, Pointer<Byte> name) {
        OpenMM_CustomTorsionForce_addEnergyParameterDerivative(Pointer.getPeer(target), Pointer.getPeer(name));
    }

    protected native static void OpenMM_CustomTorsionForce_addEnergyParameterDerivative(@Ptr long target, @Ptr long name);

    /**
     * Original signature :
     * <code>char* OpenMM_CustomTorsionForce_getEnergyParameterDerivativeName(const OpenMM_CustomTorsionForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:696</i>
     */
    public static Pointer<Byte> OpenMM_CustomTorsionForce_getEnergyParameterDerivativeName(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_CustomTorsionForce_getEnergyParameterDerivativeName(Pointer.getPeer(target), index), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_CustomTorsionForce_getEnergyParameterDerivativeName(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_CustomTorsionForce_addTorsion(OpenMM_CustomTorsionForce*, int, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:697</i>
     */
    public static int OpenMM_CustomTorsionForce_addTorsion(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int particle1, int particle2, int particle3, int particle4, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        return OpenMM_CustomTorsionForce_addTorsion(Pointer.getPeer(target), particle1, particle2, particle3, particle4, Pointer.getPeer(parameters));
    }

    protected native static int OpenMM_CustomTorsionForce_addTorsion(@Ptr long target, int particle1, int particle2, int particle3, int particle4, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_getTorsionParameters(const OpenMM_CustomTorsionForce*, int, int*, int*, int*, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:698</i>
     */
    public static void OpenMM_CustomTorsionForce_getTorsionParameters(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomTorsionForce_getTorsionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomTorsionForce_getTorsionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_setTorsionParameters(OpenMM_CustomTorsionForce*, int, int, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:699</i>
     */
    public static void OpenMM_CustomTorsionForce_setTorsionParameters(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> parameters) {
        OpenMM_CustomTorsionForce_setTorsionParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, Pointer.getPeer(parameters));
    }

    protected native static void OpenMM_CustomTorsionForce_setTorsionParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, @Ptr long parameters);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_updateParametersInContext(OpenMM_CustomTorsionForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:700</i>
     */
    public static void OpenMM_CustomTorsionForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_CustomTorsionForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_CustomTorsionForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_CustomTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_CustomTorsionForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:701</i>
     */
    public static void OpenMM_CustomTorsionForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_CustomTorsionForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_CustomTorsionForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_CustomTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_CustomTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:702</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_CustomTorsionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_CustomTorsionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_CustomTorsionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_CustomTorsionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Discrete1DFunction<br>
     * Original signature :
     * <code>OpenMM_Discrete1DFunction* OpenMM_Discrete1DFunction_create(const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:705</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Discrete1DFunction_struct> OpenMM_Discrete1DFunction_create(Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Discrete1DFunction_create(Pointer.getPeer(values)), OpenMMLibrary.OpenMM_Discrete1DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Discrete1DFunction_create(@Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete1DFunction_destroy(OpenMM_Discrete1DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:706</i>
     */
    public static void OpenMM_Discrete1DFunction_destroy(Pointer<OpenMMLibrary.OpenMM_Discrete1DFunction_struct> target) {
        OpenMM_Discrete1DFunction_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Discrete1DFunction_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete1DFunction_getFunctionParameters(const OpenMM_Discrete1DFunction*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:707</i>
     */
    public static void OpenMM_Discrete1DFunction_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Discrete1DFunction_struct> target, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        OpenMM_Discrete1DFunction_getFunctionParameters(Pointer.getPeer(target), Pointer.getPeer(values));
    }

    protected native static void OpenMM_Discrete1DFunction_getFunctionParameters(@Ptr long target, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete1DFunction_setFunctionParameters(OpenMM_Discrete1DFunction*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:708</i>
     */
    public static void OpenMM_Discrete1DFunction_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Discrete1DFunction_struct> target, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        OpenMM_Discrete1DFunction_setFunctionParameters(Pointer.getPeer(target), Pointer.getPeer(values));
    }

    protected native static void OpenMM_Discrete1DFunction_setFunctionParameters(@Ptr long target, @Ptr long values);

    /**
     * Original signature :
     * <code>OpenMM_Discrete1DFunction* OpenMM_Discrete1DFunction_Copy(const OpenMM_Discrete1DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:709</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Discrete1DFunction_struct> OpenMM_Discrete1DFunction_Copy(Pointer<OpenMMLibrary.OpenMM_Discrete1DFunction_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Discrete1DFunction_Copy(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Discrete1DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Discrete1DFunction_Copy(@Ptr long target);

    /**
     * Discrete2DFunction<br>
     * Original signature :
     * <code>OpenMM_Discrete2DFunction* OpenMM_Discrete2DFunction_create(int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:712</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Discrete2DFunction_struct> OpenMM_Discrete2DFunction_create(int xsize, int ysize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Discrete2DFunction_create(xsize, ysize, Pointer.getPeer(values)), OpenMMLibrary.OpenMM_Discrete2DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Discrete2DFunction_create(int xsize, int ysize, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete2DFunction_destroy(OpenMM_Discrete2DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:713</i>
     */
    public static void OpenMM_Discrete2DFunction_destroy(Pointer<OpenMMLibrary.OpenMM_Discrete2DFunction_struct> target) {
        OpenMM_Discrete2DFunction_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Discrete2DFunction_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete2DFunction_getFunctionParameters(const OpenMM_Discrete2DFunction*, int*, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:714</i>
     */
    public static void OpenMM_Discrete2DFunction_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Discrete2DFunction_struct> target, Pointer<Integer> xsize, Pointer<Integer> ysize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        OpenMM_Discrete2DFunction_getFunctionParameters(Pointer.getPeer(target), Pointer.getPeer(xsize), Pointer.getPeer(ysize), Pointer.getPeer(values));
    }

    protected native static void OpenMM_Discrete2DFunction_getFunctionParameters(@Ptr long target, @Ptr long xsize, @Ptr long ysize, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete2DFunction_setFunctionParameters(OpenMM_Discrete2DFunction*, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:715</i>
     */
    public static void OpenMM_Discrete2DFunction_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Discrete2DFunction_struct> target, int xsize, int ysize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        OpenMM_Discrete2DFunction_setFunctionParameters(Pointer.getPeer(target), xsize, ysize, Pointer.getPeer(values));
    }

    protected native static void OpenMM_Discrete2DFunction_setFunctionParameters(@Ptr long target, int xsize, int ysize, @Ptr long values);

    /**
     * Original signature :
     * <code>OpenMM_Discrete2DFunction* OpenMM_Discrete2DFunction_Copy(const OpenMM_Discrete2DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:716</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Discrete2DFunction_struct> OpenMM_Discrete2DFunction_Copy(Pointer<OpenMMLibrary.OpenMM_Discrete2DFunction_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Discrete2DFunction_Copy(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Discrete2DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Discrete2DFunction_Copy(@Ptr long target);

    /**
     * Discrete3DFunction<br>
     * Original signature :
     * <code>OpenMM_Discrete3DFunction* OpenMM_Discrete3DFunction_create(int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:719</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Discrete3DFunction_struct> OpenMM_Discrete3DFunction_create(int xsize, int ysize, int zsize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Discrete3DFunction_create(xsize, ysize, zsize, Pointer.getPeer(values)), OpenMMLibrary.OpenMM_Discrete3DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Discrete3DFunction_create(int xsize, int ysize, int zsize, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete3DFunction_destroy(OpenMM_Discrete3DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:720</i>
     */
    public static void OpenMM_Discrete3DFunction_destroy(Pointer<OpenMMLibrary.OpenMM_Discrete3DFunction_struct> target) {
        OpenMM_Discrete3DFunction_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Discrete3DFunction_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete3DFunction_getFunctionParameters(const OpenMM_Discrete3DFunction*, int*, int*, int*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:721</i>
     */
    public static void OpenMM_Discrete3DFunction_getFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Discrete3DFunction_struct> target, Pointer<Integer> xsize, Pointer<Integer> ysize, Pointer<Integer> zsize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        OpenMM_Discrete3DFunction_getFunctionParameters(Pointer.getPeer(target), Pointer.getPeer(xsize), Pointer.getPeer(ysize), Pointer.getPeer(zsize), Pointer.getPeer(values));
    }

    protected native static void OpenMM_Discrete3DFunction_getFunctionParameters(@Ptr long target, @Ptr long xsize, @Ptr long ysize, @Ptr long zsize, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_Discrete3DFunction_setFunctionParameters(OpenMM_Discrete3DFunction*, int, int, int, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:722</i>
     */
    public static void OpenMM_Discrete3DFunction_setFunctionParameters(Pointer<OpenMMLibrary.OpenMM_Discrete3DFunction_struct> target, int xsize, int ysize, int zsize, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        OpenMM_Discrete3DFunction_setFunctionParameters(Pointer.getPeer(target), xsize, ysize, zsize, Pointer.getPeer(values));
    }

    protected native static void OpenMM_Discrete3DFunction_setFunctionParameters(@Ptr long target, int xsize, int ysize, int zsize, @Ptr long values);

    /**
     * Original signature :
     * <code>OpenMM_Discrete3DFunction* OpenMM_Discrete3DFunction_Copy(const OpenMM_Discrete3DFunction*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:723</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Discrete3DFunction_struct> OpenMM_Discrete3DFunction_Copy(Pointer<OpenMMLibrary.OpenMM_Discrete3DFunction_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Discrete3DFunction_Copy(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Discrete3DFunction_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Discrete3DFunction_Copy(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_GayBerneForce* OpenMM_GayBerneForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:730</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> OpenMM_GayBerneForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_GayBerneForce_create$2(), OpenMMLibrary.OpenMM_GayBerneForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_GayBerneForce_create")
    protected native static long OpenMM_GayBerneForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_destroy(OpenMM_GayBerneForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:731</i>
     */
    public static void OpenMM_GayBerneForce_destroy(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target) {
        OpenMM_GayBerneForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_GayBerneForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_GayBerneForce_getNumParticles(const OpenMM_GayBerneForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:732</i>
     */
    public static int OpenMM_GayBerneForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target) {
        return OpenMM_GayBerneForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_GayBerneForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_GayBerneForce_getNumExceptions(const OpenMM_GayBerneForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:733</i>
     */
    public static int OpenMM_GayBerneForce_getNumExceptions(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target) {
        return OpenMM_GayBerneForce_getNumExceptions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_GayBerneForce_getNumExceptions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_GayBerneForce_NonbondedMethod OpenMM_GayBerneForce_getNonbondedMethod(const OpenMM_GayBerneForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:734</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_GayBerneForce_NonbondedMethod> OpenMM_GayBerneForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target) {
        return FlagSet.fromValue(OpenMM_GayBerneForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_GayBerneForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_GayBerneForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_setNonbondedMethod(OpenMM_GayBerneForce*, OpenMM_GayBerneForce_NonbondedMethod)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:735</i>
     */
    public static void OpenMM_GayBerneForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_GayBerneForce_NonbondedMethod> method) {
        OpenMM_GayBerneForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_GayBerneForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>double OpenMM_GayBerneForce_getCutoffDistance(const OpenMM_GayBerneForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:736</i>
     */
    public static double OpenMM_GayBerneForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target) {
        return OpenMM_GayBerneForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_GayBerneForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_setCutoffDistance(OpenMM_GayBerneForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:737</i>
     */
    public static void OpenMM_GayBerneForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, double distance) {
        OpenMM_GayBerneForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_GayBerneForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_GayBerneForce_getUseSwitchingFunction(const OpenMM_GayBerneForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:738</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_GayBerneForce_getUseSwitchingFunction(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target) {
        return FlagSet.fromValue(OpenMM_GayBerneForce_getUseSwitchingFunction(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_GayBerneForce_getUseSwitchingFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_setUseSwitchingFunction(OpenMM_GayBerneForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:739</i>
     */
    public static void OpenMM_GayBerneForce_setUseSwitchingFunction(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> use) {
        OpenMM_GayBerneForce_setUseSwitchingFunction(Pointer.getPeer(target), (int) use.value());
    }

    protected native static void OpenMM_GayBerneForce_setUseSwitchingFunction(@Ptr long target, int use);

    /**
     * Original signature :
     * <code>double OpenMM_GayBerneForce_getSwitchingDistance(const OpenMM_GayBerneForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:740</i>
     */
    public static double OpenMM_GayBerneForce_getSwitchingDistance(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target) {
        return OpenMM_GayBerneForce_getSwitchingDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_GayBerneForce_getSwitchingDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_setSwitchingDistance(OpenMM_GayBerneForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:741</i>
     */
    public static void OpenMM_GayBerneForce_setSwitchingDistance(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, double distance) {
        OpenMM_GayBerneForce_setSwitchingDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_GayBerneForce_setSwitchingDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>int OpenMM_GayBerneForce_addParticle(OpenMM_GayBerneForce*, double, double, int, int, double, double, double, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:742</i>
     */
    public static int OpenMM_GayBerneForce_addParticle(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, double sigma, double epsilon, int xparticle, int yparticle, double sx, double sy, double sz, double ex, double ey, double ez) {
        return OpenMM_GayBerneForce_addParticle(Pointer.getPeer(target), sigma, epsilon, xparticle, yparticle, sx, sy, sz, ex, ey, ez);
    }

    protected native static int OpenMM_GayBerneForce_addParticle(@Ptr long target, double sigma, double epsilon, int xparticle, int yparticle, double sx, double sy, double sz, double ex, double ey, double ez);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_getParticleParameters(const OpenMM_GayBerneForce*, int, double*, double*, int*, int*, double*, double*, double*, double*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:743</i>
     */
    public static void OpenMM_GayBerneForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, int index, Pointer<Double> sigma, Pointer<Double> epsilon, Pointer<Integer> xparticle, Pointer<Integer> yparticle, Pointer<Double> sx, Pointer<Double> sy, Pointer<Double> sz, Pointer<Double> ex, Pointer<Double> ey, Pointer<Double> ez) {
        OpenMM_GayBerneForce_getParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(sigma), Pointer.getPeer(epsilon), Pointer.getPeer(xparticle), Pointer.getPeer(yparticle), Pointer.getPeer(sx), Pointer.getPeer(sy), Pointer.getPeer(sz), Pointer.getPeer(ex), Pointer.getPeer(ey), Pointer.getPeer(ez));
    }

    protected native static void OpenMM_GayBerneForce_getParticleParameters(@Ptr long target, int index, @Ptr long sigma, @Ptr long epsilon, @Ptr long xparticle, @Ptr long yparticle, @Ptr long sx, @Ptr long sy, @Ptr long sz, @Ptr long ex, @Ptr long ey, @Ptr long ez);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_setParticleParameters(OpenMM_GayBerneForce*, int, double, double, int, int, double, double, double, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:744</i>
     */
    public static void OpenMM_GayBerneForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, int index, double sigma, double epsilon, int xparticle, int yparticle, double sx, double sy, double sz, double ex, double ey, double ez) {
        OpenMM_GayBerneForce_setParticleParameters(Pointer.getPeer(target), index, sigma, epsilon, xparticle, yparticle, sx, sy, sz, ex, ey, ez);
    }

    protected native static void OpenMM_GayBerneForce_setParticleParameters(@Ptr long target, int index, double sigma, double epsilon, int xparticle, int yparticle, double sx, double sy, double sz, double ex, double ey, double ez);

    /**
     * Original signature :
     * <code>int OpenMM_GayBerneForce_addException(OpenMM_GayBerneForce*, int, int, double, double, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:745</i>
     */
    public static int OpenMM_GayBerneForce_addException(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, int particle1, int particle2, double sigma, double epsilon, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> replace) {
        return OpenMM_GayBerneForce_addException(Pointer.getPeer(target), particle1, particle2, sigma, epsilon, (int) replace.value());
    }

    protected native static int OpenMM_GayBerneForce_addException(@Ptr long target, int particle1, int particle2, double sigma, double epsilon, int replace);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_getExceptionParameters(const OpenMM_GayBerneForce*, int, int*, int*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:746</i>
     */
    public static void OpenMM_GayBerneForce_getExceptionParameters(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Double> sigma, Pointer<Double> epsilon) {
        OpenMM_GayBerneForce_getExceptionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(sigma), Pointer.getPeer(epsilon));
    }

    protected native static void OpenMM_GayBerneForce_getExceptionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long sigma, @Ptr long epsilon);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_setExceptionParameters(OpenMM_GayBerneForce*, int, int, int, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:747</i>
     */
    public static void OpenMM_GayBerneForce_setExceptionParameters(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, int index, int particle1, int particle2, double sigma, double epsilon) {
        OpenMM_GayBerneForce_setExceptionParameters(Pointer.getPeer(target), index, particle1, particle2, sigma, epsilon);
    }

    protected native static void OpenMM_GayBerneForce_setExceptionParameters(@Ptr long target, int index, int particle1, int particle2, double sigma, double epsilon);

    /**
     * Original signature :
     * <code>void OpenMM_GayBerneForce_updateParametersInContext(OpenMM_GayBerneForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:748</i>
     */
    public static void OpenMM_GayBerneForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_GayBerneForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_GayBerneForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_GayBerneForce_usesPeriodicBoundaryConditions(const OpenMM_GayBerneForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:749</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_GayBerneForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_GayBerneForce_struct> target) {
        return FlagSet.fromValue(OpenMM_GayBerneForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_GayBerneForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_GBSAOBCForce* OpenMM_GBSAOBCForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:756</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> OpenMM_GBSAOBCForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_GBSAOBCForce_create$2(), OpenMMLibrary.OpenMM_GBSAOBCForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_GBSAOBCForce_create")
    protected native static long OpenMM_GBSAOBCForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_destroy(OpenMM_GBSAOBCForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:757</i>
     */
    public static void OpenMM_GBSAOBCForce_destroy(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target) {
        OpenMM_GBSAOBCForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_GBSAOBCForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_GBSAOBCForce_getNumParticles(const OpenMM_GBSAOBCForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:758</i>
     */
    public static int OpenMM_GBSAOBCForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target) {
        return OpenMM_GBSAOBCForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_GBSAOBCForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_GBSAOBCForce_addParticle(OpenMM_GBSAOBCForce*, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:759</i>
     */
    public static int OpenMM_GBSAOBCForce_addParticle(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, double charge, double radius, double scalingFactor) {
        return OpenMM_GBSAOBCForce_addParticle(Pointer.getPeer(target), charge, radius, scalingFactor);
    }

    protected native static int OpenMM_GBSAOBCForce_addParticle(@Ptr long target, double charge, double radius, double scalingFactor);

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_getParticleParameters(const OpenMM_GBSAOBCForce*, int, double*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:760</i>
     */
    public static void OpenMM_GBSAOBCForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, int index, Pointer<Double> charge, Pointer<Double> radius, Pointer<Double> scalingFactor) {
        OpenMM_GBSAOBCForce_getParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(charge), Pointer.getPeer(radius), Pointer.getPeer(scalingFactor));
    }

    protected native static void OpenMM_GBSAOBCForce_getParticleParameters(@Ptr long target, int index, @Ptr long charge, @Ptr long radius, @Ptr long scalingFactor);

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_setParticleParameters(OpenMM_GBSAOBCForce*, int, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:761</i>
     */
    public static void OpenMM_GBSAOBCForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, int index, double charge, double radius, double scalingFactor) {
        OpenMM_GBSAOBCForce_setParticleParameters(Pointer.getPeer(target), index, charge, radius, scalingFactor);
    }

    protected native static void OpenMM_GBSAOBCForce_setParticleParameters(@Ptr long target, int index, double charge, double radius, double scalingFactor);

    /**
     * Original signature :
     * <code>double OpenMM_GBSAOBCForce_getSolventDielectric(const OpenMM_GBSAOBCForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:762</i>
     */
    public static double OpenMM_GBSAOBCForce_getSolventDielectric(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target) {
        return OpenMM_GBSAOBCForce_getSolventDielectric(Pointer.getPeer(target));
    }

    protected native static double OpenMM_GBSAOBCForce_getSolventDielectric(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_setSolventDielectric(OpenMM_GBSAOBCForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:763</i>
     */
    public static void OpenMM_GBSAOBCForce_setSolventDielectric(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, double dielectric) {
        OpenMM_GBSAOBCForce_setSolventDielectric(Pointer.getPeer(target), dielectric);
    }

    protected native static void OpenMM_GBSAOBCForce_setSolventDielectric(@Ptr long target, double dielectric);

    /**
     * Original signature :
     * <code>double OpenMM_GBSAOBCForce_getSoluteDielectric(const OpenMM_GBSAOBCForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:764</i>
     */
    public static double OpenMM_GBSAOBCForce_getSoluteDielectric(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target) {
        return OpenMM_GBSAOBCForce_getSoluteDielectric(Pointer.getPeer(target));
    }

    protected native static double OpenMM_GBSAOBCForce_getSoluteDielectric(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_setSoluteDielectric(OpenMM_GBSAOBCForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:765</i>
     */
    public static void OpenMM_GBSAOBCForce_setSoluteDielectric(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, double dielectric) {
        OpenMM_GBSAOBCForce_setSoluteDielectric(Pointer.getPeer(target), dielectric);
    }

    protected native static void OpenMM_GBSAOBCForce_setSoluteDielectric(@Ptr long target, double dielectric);

    /**
     * Original signature :
     * <code>double OpenMM_GBSAOBCForce_getSurfaceAreaEnergy(const OpenMM_GBSAOBCForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:766</i>
     */
    public static double OpenMM_GBSAOBCForce_getSurfaceAreaEnergy(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target) {
        return OpenMM_GBSAOBCForce_getSurfaceAreaEnergy(Pointer.getPeer(target));
    }

    protected native static double OpenMM_GBSAOBCForce_getSurfaceAreaEnergy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_setSurfaceAreaEnergy(OpenMM_GBSAOBCForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:767</i>
     */
    public static void OpenMM_GBSAOBCForce_setSurfaceAreaEnergy(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, double energy) {
        OpenMM_GBSAOBCForce_setSurfaceAreaEnergy(Pointer.getPeer(target), energy);
    }

    protected native static void OpenMM_GBSAOBCForce_setSurfaceAreaEnergy(@Ptr long target, double energy);

    /**
     * Original signature :
     * <code>OpenMM_GBSAOBCForce_NonbondedMethod OpenMM_GBSAOBCForce_getNonbondedMethod(const OpenMM_GBSAOBCForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:768</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_GBSAOBCForce_NonbondedMethod> OpenMM_GBSAOBCForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target) {
        return FlagSet.fromValue(OpenMM_GBSAOBCForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_GBSAOBCForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_GBSAOBCForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_setNonbondedMethod(OpenMM_GBSAOBCForce*, OpenMM_GBSAOBCForce_NonbondedMethod)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:769</i>
     */
    public static void OpenMM_GBSAOBCForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_GBSAOBCForce_NonbondedMethod> method) {
        OpenMM_GBSAOBCForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_GBSAOBCForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>double OpenMM_GBSAOBCForce_getCutoffDistance(const OpenMM_GBSAOBCForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:770</i>
     */
    public static double OpenMM_GBSAOBCForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target) {
        return OpenMM_GBSAOBCForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_GBSAOBCForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_setCutoffDistance(OpenMM_GBSAOBCForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:771</i>
     */
    public static void OpenMM_GBSAOBCForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, double distance) {
        OpenMM_GBSAOBCForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_GBSAOBCForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>void OpenMM_GBSAOBCForce_updateParametersInContext(OpenMM_GBSAOBCForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:772</i>
     */
    public static void OpenMM_GBSAOBCForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_GBSAOBCForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_GBSAOBCForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_GBSAOBCForce_usesPeriodicBoundaryConditions(const OpenMM_GBSAOBCForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:773</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_GBSAOBCForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_GBSAOBCForce_struct> target) {
        return FlagSet.fromValue(OpenMM_GBSAOBCForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_GBSAOBCForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * HarmonicAngleForce<br>
     * Original signature :
     * <code>OpenMM_HarmonicAngleForce* OpenMM_HarmonicAngleForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:776</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> OpenMM_HarmonicAngleForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_HarmonicAngleForce_create$2(), OpenMMLibrary.OpenMM_HarmonicAngleForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_HarmonicAngleForce_create")
    protected native static long OpenMM_HarmonicAngleForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicAngleForce_destroy(OpenMM_HarmonicAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:777</i>
     */
    public static void OpenMM_HarmonicAngleForce_destroy(Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> target) {
        OpenMM_HarmonicAngleForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_HarmonicAngleForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_HarmonicAngleForce_getNumAngles(const OpenMM_HarmonicAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:778</i>
     */
    public static int OpenMM_HarmonicAngleForce_getNumAngles(Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> target) {
        return OpenMM_HarmonicAngleForce_getNumAngles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_HarmonicAngleForce_getNumAngles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_HarmonicAngleForce_addAngle(OpenMM_HarmonicAngleForce*, int, int, int, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:779</i>
     */
    public static int OpenMM_HarmonicAngleForce_addAngle(Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> target, int particle1, int particle2, int particle3, double angle, double k) {
        return OpenMM_HarmonicAngleForce_addAngle(Pointer.getPeer(target), particle1, particle2, particle3, angle, k);
    }

    protected native static int OpenMM_HarmonicAngleForce_addAngle(@Ptr long target, int particle1, int particle2, int particle3, double angle, double k);

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicAngleForce_getAngleParameters(const OpenMM_HarmonicAngleForce*, int, int*, int*, int*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:780</i>
     */
    public static void OpenMM_HarmonicAngleForce_getAngleParameters(Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Double> angle, Pointer<Double> k) {
        OpenMM_HarmonicAngleForce_getAngleParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(angle), Pointer.getPeer(k));
    }

    protected native static void OpenMM_HarmonicAngleForce_getAngleParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long angle, @Ptr long k);

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicAngleForce_setAngleParameters(OpenMM_HarmonicAngleForce*, int, int, int, int, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:781</i>
     */
    public static void OpenMM_HarmonicAngleForce_setAngleParameters(Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> target, int index, int particle1, int particle2, int particle3, double angle, double k) {
        OpenMM_HarmonicAngleForce_setAngleParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, angle, k);
    }

    protected native static void OpenMM_HarmonicAngleForce_setAngleParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, double angle, double k);

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicAngleForce_updateParametersInContext(OpenMM_HarmonicAngleForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:782</i>
     */
    public static void OpenMM_HarmonicAngleForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_HarmonicAngleForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_HarmonicAngleForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_HarmonicAngleForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:783</i>
     */
    public static void OpenMM_HarmonicAngleForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_HarmonicAngleForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_HarmonicAngleForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_HarmonicAngleForce_usesPeriodicBoundaryConditions(const OpenMM_HarmonicAngleForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:784</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_HarmonicAngleForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_HarmonicAngleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_HarmonicAngleForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_HarmonicAngleForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * HarmonicBondForce<br>
     * Original signature :
     * <code>OpenMM_HarmonicBondForce* OpenMM_HarmonicBondForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:787</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> OpenMM_HarmonicBondForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_HarmonicBondForce_create$2(), OpenMMLibrary.OpenMM_HarmonicBondForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_HarmonicBondForce_create")
    protected native static long OpenMM_HarmonicBondForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicBondForce_destroy(OpenMM_HarmonicBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:788</i>
     */
    public static void OpenMM_HarmonicBondForce_destroy(Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> target) {
        OpenMM_HarmonicBondForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_HarmonicBondForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_HarmonicBondForce_getNumBonds(const OpenMM_HarmonicBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:789</i>
     */
    public static int OpenMM_HarmonicBondForce_getNumBonds(Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> target) {
        return OpenMM_HarmonicBondForce_getNumBonds(Pointer.getPeer(target));
    }

    protected native static int OpenMM_HarmonicBondForce_getNumBonds(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_HarmonicBondForce_addBond(OpenMM_HarmonicBondForce*, int, int, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:790</i>
     */
    public static int OpenMM_HarmonicBondForce_addBond(Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> target, int particle1, int particle2, double length, double k) {
        return OpenMM_HarmonicBondForce_addBond(Pointer.getPeer(target), particle1, particle2, length, k);
    }

    protected native static int OpenMM_HarmonicBondForce_addBond(@Ptr long target, int particle1, int particle2, double length, double k);

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicBondForce_getBondParameters(const OpenMM_HarmonicBondForce*, int, int*, int*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:791</i>
     */
    public static void OpenMM_HarmonicBondForce_getBondParameters(Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Double> length, Pointer<Double> k) {
        OpenMM_HarmonicBondForce_getBondParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(length), Pointer.getPeer(k));
    }

    protected native static void OpenMM_HarmonicBondForce_getBondParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long length, @Ptr long k);

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicBondForce_setBondParameters(OpenMM_HarmonicBondForce*, int, int, int, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:792</i>
     */
    public static void OpenMM_HarmonicBondForce_setBondParameters(Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> target, int index, int particle1, int particle2, double length, double k) {
        OpenMM_HarmonicBondForce_setBondParameters(Pointer.getPeer(target), index, particle1, particle2, length, k);
    }

    protected native static void OpenMM_HarmonicBondForce_setBondParameters(@Ptr long target, int index, int particle1, int particle2, double length, double k);

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicBondForce_updateParametersInContext(OpenMM_HarmonicBondForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:793</i>
     */
    public static void OpenMM_HarmonicBondForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_HarmonicBondForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_HarmonicBondForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_HarmonicBondForce_setUsesPeriodicBoundaryConditions(OpenMM_HarmonicBondForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:794</i>
     */
    public static void OpenMM_HarmonicBondForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_HarmonicBondForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_HarmonicBondForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_HarmonicBondForce_usesPeriodicBoundaryConditions(const OpenMM_HarmonicBondForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:795</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_HarmonicBondForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_HarmonicBondForce_struct> target) {
        return FlagSet.fromValue(OpenMM_HarmonicBondForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_HarmonicBondForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * LangevinIntegrator<br>
     * Original signature :
     * <code>OpenMM_LangevinIntegrator* OpenMM_LangevinIntegrator_create(double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:798</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> OpenMM_LangevinIntegrator_create(double temperature, double frictionCoeff, double stepSize) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_LangevinIntegrator_create$2(temperature, frictionCoeff, stepSize), OpenMMLibrary.OpenMM_LangevinIntegrator_struct.class);
    }

    @Ptr
    @Name("OpenMM_LangevinIntegrator_create")
    protected native static long OpenMM_LangevinIntegrator_create$2(double temperature, double frictionCoeff, double stepSize);

    /**
     * Original signature :
     * <code>void OpenMM_LangevinIntegrator_destroy(OpenMM_LangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:799</i>
     */
    public static void OpenMM_LangevinIntegrator_destroy(Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> target) {
        OpenMM_LangevinIntegrator_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_LangevinIntegrator_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_LangevinIntegrator_getTemperature(const OpenMM_LangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:800</i>
     */
    public static double OpenMM_LangevinIntegrator_getTemperature(Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> target) {
        return OpenMM_LangevinIntegrator_getTemperature(Pointer.getPeer(target));
    }

    protected native static double OpenMM_LangevinIntegrator_getTemperature(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_LangevinIntegrator_setTemperature(OpenMM_LangevinIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:801</i>
     */
    public static void OpenMM_LangevinIntegrator_setTemperature(Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> target, double temp) {
        OpenMM_LangevinIntegrator_setTemperature(Pointer.getPeer(target), temp);
    }

    protected native static void OpenMM_LangevinIntegrator_setTemperature(@Ptr long target, double temp);

    /**
     * Original signature :
     * <code>double OpenMM_LangevinIntegrator_getFriction(const OpenMM_LangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:802</i>
     */
    public static double OpenMM_LangevinIntegrator_getFriction(Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> target) {
        return OpenMM_LangevinIntegrator_getFriction(Pointer.getPeer(target));
    }

    protected native static double OpenMM_LangevinIntegrator_getFriction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_LangevinIntegrator_setFriction(OpenMM_LangevinIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:803</i>
     */
    public static void OpenMM_LangevinIntegrator_setFriction(Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> target, double coeff) {
        OpenMM_LangevinIntegrator_setFriction(Pointer.getPeer(target), coeff);
    }

    protected native static void OpenMM_LangevinIntegrator_setFriction(@Ptr long target, double coeff);

    /**
     * Original signature :
     * <code>int OpenMM_LangevinIntegrator_getRandomNumberSeed(const OpenMM_LangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:804</i>
     */
    public static int OpenMM_LangevinIntegrator_getRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> target) {
        return OpenMM_LangevinIntegrator_getRandomNumberSeed(Pointer.getPeer(target));
    }

    protected native static int OpenMM_LangevinIntegrator_getRandomNumberSeed(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_LangevinIntegrator_setRandomNumberSeed(OpenMM_LangevinIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:805</i>
     */
    public static void OpenMM_LangevinIntegrator_setRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> target, int seed) {
        OpenMM_LangevinIntegrator_setRandomNumberSeed(Pointer.getPeer(target), seed);
    }

    protected native static void OpenMM_LangevinIntegrator_setRandomNumberSeed(@Ptr long target, int seed);

    /**
     * Original signature :
     * <code>void OpenMM_LangevinIntegrator_step(OpenMM_LangevinIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:806</i>
     */
    public static void OpenMM_LangevinIntegrator_step(Pointer<OpenMMLibrary.OpenMM_LangevinIntegrator_struct> target, int steps) {
        OpenMM_LangevinIntegrator_step(Pointer.getPeer(target), steps);
    }

    protected native static void OpenMM_LangevinIntegrator_step(@Ptr long target, int steps);

    /**
     * VirtualSite<br>
     * Original signature :
     * <code>void OpenMM_VirtualSite_destroy(OpenMM_VirtualSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:809</i>
     */
    public static void OpenMM_VirtualSite_destroy(Pointer<OpenMMLibrary.OpenMM_VirtualSite_struct> target) {
        OpenMM_VirtualSite_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_VirtualSite_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_VirtualSite_getNumParticles(const OpenMM_VirtualSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:810</i>
     */
    public static int OpenMM_VirtualSite_getNumParticles(Pointer<OpenMMLibrary.OpenMM_VirtualSite_struct> target) {
        return OpenMM_VirtualSite_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_VirtualSite_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_VirtualSite_getParticle(const OpenMM_VirtualSite*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:811</i>
     */
    public static int OpenMM_VirtualSite_getParticle(Pointer<OpenMMLibrary.OpenMM_VirtualSite_struct> target, int particle) {
        return OpenMM_VirtualSite_getParticle(Pointer.getPeer(target), particle);
    }

    protected native static int OpenMM_VirtualSite_getParticle(@Ptr long target, int particle);

    /**
     * LocalCoordinatesSite<br>
     * Original signature :
     * <code>OpenMM_LocalCoordinatesSite* OpenMM_LocalCoordinatesSite_create(int, int, int, const OpenMM_Vec3*, const OpenMM_Vec3*, const OpenMM_Vec3*, const OpenMM_Vec3*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:814</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_LocalCoordinatesSite_struct> OpenMM_LocalCoordinatesSite_create(int particle1, int particle2, int particle3, Pointer<OpenMM_Vec3> originWeights, Pointer<OpenMM_Vec3> xWeights, Pointer<OpenMM_Vec3> yWeights, Pointer<OpenMM_Vec3> localPosition) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_LocalCoordinatesSite_create(particle1, particle2, particle3, Pointer.getPeer(originWeights), Pointer.getPeer(xWeights), Pointer.getPeer(yWeights), Pointer.getPeer(localPosition)), OpenMMLibrary.OpenMM_LocalCoordinatesSite_struct.class);
    }

    @Ptr
    protected native static long OpenMM_LocalCoordinatesSite_create(int particle1, int particle2, int particle3, @Ptr long originWeights, @Ptr long xWeights, @Ptr long yWeights, @Ptr long localPosition);

    /**
     * Original signature :
     * <code>void OpenMM_LocalCoordinatesSite_destroy(OpenMM_LocalCoordinatesSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:815</i>
     */
    public static void OpenMM_LocalCoordinatesSite_destroy(Pointer<OpenMMLibrary.OpenMM_LocalCoordinatesSite_struct> target) {
        OpenMM_LocalCoordinatesSite_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_LocalCoordinatesSite_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Vec3* OpenMM_LocalCoordinatesSite_getOriginWeights(const OpenMM_LocalCoordinatesSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:816</i>
     */
    public static Pointer<OpenMM_Vec3> OpenMM_LocalCoordinatesSite_getOriginWeights(Pointer<OpenMMLibrary.OpenMM_LocalCoordinatesSite_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_LocalCoordinatesSite_getOriginWeights(Pointer.getPeer(target)), OpenMM_Vec3.class);
    }

    @Ptr
    protected native static long OpenMM_LocalCoordinatesSite_getOriginWeights(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Vec3* OpenMM_LocalCoordinatesSite_getXWeights(const OpenMM_LocalCoordinatesSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:817</i>
     */
    public static Pointer<OpenMM_Vec3> OpenMM_LocalCoordinatesSite_getXWeights(Pointer<OpenMMLibrary.OpenMM_LocalCoordinatesSite_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_LocalCoordinatesSite_getXWeights(Pointer.getPeer(target)), OpenMM_Vec3.class);
    }

    @Ptr
    protected native static long OpenMM_LocalCoordinatesSite_getXWeights(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Vec3* OpenMM_LocalCoordinatesSite_getYWeights(const OpenMM_LocalCoordinatesSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:818</i>
     */
    public static Pointer<OpenMM_Vec3> OpenMM_LocalCoordinatesSite_getYWeights(Pointer<OpenMMLibrary.OpenMM_LocalCoordinatesSite_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_LocalCoordinatesSite_getYWeights(Pointer.getPeer(target)), OpenMM_Vec3.class);
    }

    @Ptr
    protected native static long OpenMM_LocalCoordinatesSite_getYWeights(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Vec3* OpenMM_LocalCoordinatesSite_getLocalPosition(const OpenMM_LocalCoordinatesSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:819</i>
     */
    public static Pointer<OpenMM_Vec3> OpenMM_LocalCoordinatesSite_getLocalPosition(Pointer<OpenMMLibrary.OpenMM_LocalCoordinatesSite_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_LocalCoordinatesSite_getLocalPosition(Pointer.getPeer(target)), OpenMM_Vec3.class);
    }

    @Ptr
    protected native static long OpenMM_LocalCoordinatesSite_getLocalPosition(@Ptr long target);

    /**
     * LocalEnergyMinimizer<br>
     * Original signature :
     * <code>void OpenMM_LocalEnergyMinimizer_destroy(OpenMM_LocalEnergyMinimizer*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:822</i>
     */
    public static void OpenMM_LocalEnergyMinimizer_destroy(Pointer<OpenMMLibrary.OpenMM_LocalEnergyMinimizer_struct> target) {
        OpenMM_LocalEnergyMinimizer_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_LocalEnergyMinimizer_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_LocalEnergyMinimizer_minimize(OpenMM_Context*, double, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:823</i>
     */
    public static void OpenMM_LocalEnergyMinimizer_minimize(Pointer<OpenMMLibrary.OpenMM_Context_struct> context, double tolerance, int maxIterations) {
        OpenMM_LocalEnergyMinimizer_minimize(Pointer.getPeer(context), tolerance, maxIterations);
    }

    protected native static void OpenMM_LocalEnergyMinimizer_minimize(@Ptr long context, double tolerance, int maxIterations);

    /**
     * MonteCarloAnisotropicBarostat<br>
     * Original signature :
     * <code>OpenMM_MonteCarloAnisotropicBarostat* OpenMM_MonteCarloAnisotropicBarostat_create(const OpenMM_Vec3*, double, OpenMM_Boolean, OpenMM_Boolean, OpenMM_Boolean, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:826</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> OpenMM_MonteCarloAnisotropicBarostat_create(Pointer<OpenMM_Vec3> defaultPressure, double defaultTemperature, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> scaleX, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> scaleY, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> scaleZ, int frequency) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloAnisotropicBarostat_create(Pointer.getPeer(defaultPressure), defaultTemperature, (int) scaleX.value(), (int) scaleY.value(), (int) scaleZ.value(), frequency), OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct.class);
    }

    @Ptr
    protected native static long OpenMM_MonteCarloAnisotropicBarostat_create(@Ptr long defaultPressure, double defaultTemperature, int scaleX, int scaleY, int scaleZ, int frequency);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloAnisotropicBarostat_destroy(OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:827</i>
     */
    public static void OpenMM_MonteCarloAnisotropicBarostat_destroy(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        OpenMM_MonteCarloAnisotropicBarostat_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_MonteCarloAnisotropicBarostat_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloAnisotropicBarostat_PressureX()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:828</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloAnisotropicBarostat_PressureX() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloAnisotropicBarostat_PressureX$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloAnisotropicBarostat_PressureX")
    protected native static long OpenMM_MonteCarloAnisotropicBarostat_PressureX$2();

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloAnisotropicBarostat_PressureY()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:829</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloAnisotropicBarostat_PressureY() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloAnisotropicBarostat_PressureY$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloAnisotropicBarostat_PressureY")
    protected native static long OpenMM_MonteCarloAnisotropicBarostat_PressureY$2();

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloAnisotropicBarostat_PressureZ()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:830</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloAnisotropicBarostat_PressureZ() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloAnisotropicBarostat_PressureZ$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloAnisotropicBarostat_PressureZ")
    protected native static long OpenMM_MonteCarloAnisotropicBarostat_PressureZ$2();

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloAnisotropicBarostat_Temperature()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:831</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloAnisotropicBarostat_Temperature() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloAnisotropicBarostat_Temperature$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloAnisotropicBarostat_Temperature")
    protected native static long OpenMM_MonteCarloAnisotropicBarostat_Temperature$2();

    /**
     * Original signature :
     * <code>OpenMM_Vec3* OpenMM_MonteCarloAnisotropicBarostat_getDefaultPressure(const OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:832</i>
     */
    public static Pointer<OpenMM_Vec3> OpenMM_MonteCarloAnisotropicBarostat_getDefaultPressure(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloAnisotropicBarostat_getDefaultPressure(Pointer.getPeer(target)), OpenMM_Vec3.class);
    }

    @Ptr
    protected native static long OpenMM_MonteCarloAnisotropicBarostat_getDefaultPressure(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloAnisotropicBarostat_setDefaultPressure(OpenMM_MonteCarloAnisotropicBarostat*, const OpenMM_Vec3*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:833</i>
     */
    public static void OpenMM_MonteCarloAnisotropicBarostat_setDefaultPressure(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target, Pointer<OpenMM_Vec3> pressure) {
        OpenMM_MonteCarloAnisotropicBarostat_setDefaultPressure(Pointer.getPeer(target), Pointer.getPeer(pressure));
    }

    protected native static void OpenMM_MonteCarloAnisotropicBarostat_setDefaultPressure(@Ptr long target, @Ptr long pressure);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_MonteCarloAnisotropicBarostat_getScaleX(const OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:834</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_MonteCarloAnisotropicBarostat_getScaleX(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        return FlagSet.fromValue(OpenMM_MonteCarloAnisotropicBarostat_getScaleX(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_MonteCarloAnisotropicBarostat_getScaleX(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_MonteCarloAnisotropicBarostat_getScaleY(const OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:835</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_MonteCarloAnisotropicBarostat_getScaleY(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        return FlagSet.fromValue(OpenMM_MonteCarloAnisotropicBarostat_getScaleY(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_MonteCarloAnisotropicBarostat_getScaleY(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_MonteCarloAnisotropicBarostat_getScaleZ(const OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:836</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_MonteCarloAnisotropicBarostat_getScaleZ(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        return FlagSet.fromValue(OpenMM_MonteCarloAnisotropicBarostat_getScaleZ(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_MonteCarloAnisotropicBarostat_getScaleZ(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_MonteCarloAnisotropicBarostat_getFrequency(const OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:837</i>
     */
    public static int OpenMM_MonteCarloAnisotropicBarostat_getFrequency(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        return OpenMM_MonteCarloAnisotropicBarostat_getFrequency(Pointer.getPeer(target));
    }

    protected native static int OpenMM_MonteCarloAnisotropicBarostat_getFrequency(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloAnisotropicBarostat_setFrequency(OpenMM_MonteCarloAnisotropicBarostat*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:838</i>
     */
    public static void OpenMM_MonteCarloAnisotropicBarostat_setFrequency(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target, int freq) {
        OpenMM_MonteCarloAnisotropicBarostat_setFrequency(Pointer.getPeer(target), freq);
    }

    protected native static void OpenMM_MonteCarloAnisotropicBarostat_setFrequency(@Ptr long target, int freq);

    /**
     * Original signature :
     * <code>double OpenMM_MonteCarloAnisotropicBarostat_getDefaultTemperature(const OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:839</i>
     */
    public static double OpenMM_MonteCarloAnisotropicBarostat_getDefaultTemperature(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        return OpenMM_MonteCarloAnisotropicBarostat_getDefaultTemperature(Pointer.getPeer(target));
    }

    protected native static double OpenMM_MonteCarloAnisotropicBarostat_getDefaultTemperature(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloAnisotropicBarostat_setDefaultTemperature(OpenMM_MonteCarloAnisotropicBarostat*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:840</i>
     */
    public static void OpenMM_MonteCarloAnisotropicBarostat_setDefaultTemperature(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target, double temp) {
        OpenMM_MonteCarloAnisotropicBarostat_setDefaultTemperature(Pointer.getPeer(target), temp);
    }

    protected native static void OpenMM_MonteCarloAnisotropicBarostat_setDefaultTemperature(@Ptr long target, double temp);

    /**
     * Original signature :
     * <code>int OpenMM_MonteCarloAnisotropicBarostat_getRandomNumberSeed(const OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:841</i>
     */
    public static int OpenMM_MonteCarloAnisotropicBarostat_getRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        return OpenMM_MonteCarloAnisotropicBarostat_getRandomNumberSeed(Pointer.getPeer(target));
    }

    protected native static int OpenMM_MonteCarloAnisotropicBarostat_getRandomNumberSeed(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloAnisotropicBarostat_setRandomNumberSeed(OpenMM_MonteCarloAnisotropicBarostat*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:842</i>
     */
    public static void OpenMM_MonteCarloAnisotropicBarostat_setRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target, int seed) {
        OpenMM_MonteCarloAnisotropicBarostat_setRandomNumberSeed(Pointer.getPeer(target), seed);
    }

    protected native static void OpenMM_MonteCarloAnisotropicBarostat_setRandomNumberSeed(@Ptr long target, int seed);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_MonteCarloAnisotropicBarostat_usesPeriodicBoundaryConditions(const OpenMM_MonteCarloAnisotropicBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:843</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_MonteCarloAnisotropicBarostat_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_MonteCarloAnisotropicBarostat_struct> target) {
        return FlagSet.fromValue(OpenMM_MonteCarloAnisotropicBarostat_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_MonteCarloAnisotropicBarostat_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * MonteCarloBarostat<br>
     * Original signature :
     * <code>OpenMM_MonteCarloBarostat* OpenMM_MonteCarloBarostat_create(double, double, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:846</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> OpenMM_MonteCarloBarostat_create(double defaultPressure, double defaultTemperature, int frequency) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloBarostat_create$2(defaultPressure, defaultTemperature, frequency), OpenMMLibrary.OpenMM_MonteCarloBarostat_struct.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloBarostat_create")
    protected native static long OpenMM_MonteCarloBarostat_create$2(double defaultPressure, double defaultTemperature, int frequency);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloBarostat_destroy(OpenMM_MonteCarloBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:847</i>
     */
    public static void OpenMM_MonteCarloBarostat_destroy(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target) {
        OpenMM_MonteCarloBarostat_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_MonteCarloBarostat_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloBarostat_Pressure()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:848</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloBarostat_Pressure() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloBarostat_Pressure$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloBarostat_Pressure")
    protected native static long OpenMM_MonteCarloBarostat_Pressure$2();

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloBarostat_Temperature()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:849</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloBarostat_Temperature() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloBarostat_Temperature$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloBarostat_Temperature")
    protected native static long OpenMM_MonteCarloBarostat_Temperature$2();

    /**
     * Original signature :
     * <code>double OpenMM_MonteCarloBarostat_getDefaultPressure(const OpenMM_MonteCarloBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:850</i>
     */
    public static double OpenMM_MonteCarloBarostat_getDefaultPressure(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target) {
        return OpenMM_MonteCarloBarostat_getDefaultPressure(Pointer.getPeer(target));
    }

    protected native static double OpenMM_MonteCarloBarostat_getDefaultPressure(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloBarostat_setDefaultPressure(OpenMM_MonteCarloBarostat*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:851</i>
     */
    public static void OpenMM_MonteCarloBarostat_setDefaultPressure(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target, double pressure) {
        OpenMM_MonteCarloBarostat_setDefaultPressure(Pointer.getPeer(target), pressure);
    }

    protected native static void OpenMM_MonteCarloBarostat_setDefaultPressure(@Ptr long target, double pressure);

    /**
     * Original signature :
     * <code>int OpenMM_MonteCarloBarostat_getFrequency(const OpenMM_MonteCarloBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:852</i>
     */
    public static int OpenMM_MonteCarloBarostat_getFrequency(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target) {
        return OpenMM_MonteCarloBarostat_getFrequency(Pointer.getPeer(target));
    }

    protected native static int OpenMM_MonteCarloBarostat_getFrequency(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloBarostat_setFrequency(OpenMM_MonteCarloBarostat*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:853</i>
     */
    public static void OpenMM_MonteCarloBarostat_setFrequency(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target, int freq) {
        OpenMM_MonteCarloBarostat_setFrequency(Pointer.getPeer(target), freq);
    }

    protected native static void OpenMM_MonteCarloBarostat_setFrequency(@Ptr long target, int freq);

    /**
     * Original signature :
     * <code>double OpenMM_MonteCarloBarostat_getDefaultTemperature(const OpenMM_MonteCarloBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:854</i>
     */
    public static double OpenMM_MonteCarloBarostat_getDefaultTemperature(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target) {
        return OpenMM_MonteCarloBarostat_getDefaultTemperature(Pointer.getPeer(target));
    }

    protected native static double OpenMM_MonteCarloBarostat_getDefaultTemperature(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloBarostat_setDefaultTemperature(OpenMM_MonteCarloBarostat*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:855</i>
     */
    public static void OpenMM_MonteCarloBarostat_setDefaultTemperature(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target, double temp) {
        OpenMM_MonteCarloBarostat_setDefaultTemperature(Pointer.getPeer(target), temp);
    }

    protected native static void OpenMM_MonteCarloBarostat_setDefaultTemperature(@Ptr long target, double temp);

    /**
     * Original signature :
     * <code>int OpenMM_MonteCarloBarostat_getRandomNumberSeed(const OpenMM_MonteCarloBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:856</i>
     */
    public static int OpenMM_MonteCarloBarostat_getRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target) {
        return OpenMM_MonteCarloBarostat_getRandomNumberSeed(Pointer.getPeer(target));
    }

    protected native static int OpenMM_MonteCarloBarostat_getRandomNumberSeed(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloBarostat_setRandomNumberSeed(OpenMM_MonteCarloBarostat*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:857</i>
     */
    public static void OpenMM_MonteCarloBarostat_setRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target, int seed) {
        OpenMM_MonteCarloBarostat_setRandomNumberSeed(Pointer.getPeer(target), seed);
    }

    protected native static void OpenMM_MonteCarloBarostat_setRandomNumberSeed(@Ptr long target, int seed);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_MonteCarloBarostat_usesPeriodicBoundaryConditions(const OpenMM_MonteCarloBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:858</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_MonteCarloBarostat_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_MonteCarloBarostat_struct> target) {
        return FlagSet.fromValue(OpenMM_MonteCarloBarostat_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_MonteCarloBarostat_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_MonteCarloMembraneBarostat* OpenMM_MonteCarloMembraneBarostat_create(double, double, double, OpenMM_MonteCarloMembraneBarostat_XYMode, OpenMM_MonteCarloMembraneBarostat_ZMode, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:868</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> OpenMM_MonteCarloMembraneBarostat_create(double defaultPressure, double defaultSurfaceTension, double defaultTemperature, IntValuedEnum<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_XYMode> xymode, IntValuedEnum<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_ZMode> zmode, int frequency) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloMembraneBarostat_create(defaultPressure, defaultSurfaceTension, defaultTemperature, (int) xymode.value(), (int) zmode.value(), frequency), OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct.class);
    }

    @Ptr
    protected native static long OpenMM_MonteCarloMembraneBarostat_create(double defaultPressure, double defaultSurfaceTension, double defaultTemperature, int xymode, int zmode, int frequency);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloMembraneBarostat_destroy(OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:869</i>
     */
    public static void OpenMM_MonteCarloMembraneBarostat_destroy(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        OpenMM_MonteCarloMembraneBarostat_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_MonteCarloMembraneBarostat_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloMembraneBarostat_Pressure()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:870</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloMembraneBarostat_Pressure() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloMembraneBarostat_Pressure$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloMembraneBarostat_Pressure")
    protected native static long OpenMM_MonteCarloMembraneBarostat_Pressure$2();

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloMembraneBarostat_SurfaceTension()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:871</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloMembraneBarostat_SurfaceTension() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloMembraneBarostat_SurfaceTension$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloMembraneBarostat_SurfaceTension")
    protected native static long OpenMM_MonteCarloMembraneBarostat_SurfaceTension$2();

    /**
     * Original signature :
     * <code>char* OpenMM_MonteCarloMembraneBarostat_Temperature()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:872</i>
     */
    public static Pointer<Byte> OpenMM_MonteCarloMembraneBarostat_Temperature() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_MonteCarloMembraneBarostat_Temperature$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_MonteCarloMembraneBarostat_Temperature")
    protected native static long OpenMM_MonteCarloMembraneBarostat_Temperature$2();

    /**
     * Original signature :
     * <code>double OpenMM_MonteCarloMembraneBarostat_getDefaultPressure(const OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:873</i>
     */
    public static double OpenMM_MonteCarloMembraneBarostat_getDefaultPressure(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        return OpenMM_MonteCarloMembraneBarostat_getDefaultPressure(Pointer.getPeer(target));
    }

    protected native static double OpenMM_MonteCarloMembraneBarostat_getDefaultPressure(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloMembraneBarostat_setDefaultPressure(OpenMM_MonteCarloMembraneBarostat*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:874</i>
     */
    public static void OpenMM_MonteCarloMembraneBarostat_setDefaultPressure(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target, double pressure) {
        OpenMM_MonteCarloMembraneBarostat_setDefaultPressure(Pointer.getPeer(target), pressure);
    }

    protected native static void OpenMM_MonteCarloMembraneBarostat_setDefaultPressure(@Ptr long target, double pressure);

    /**
     * Original signature :
     * <code>double OpenMM_MonteCarloMembraneBarostat_getDefaultSurfaceTension(const OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:875</i>
     */
    public static double OpenMM_MonteCarloMembraneBarostat_getDefaultSurfaceTension(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        return OpenMM_MonteCarloMembraneBarostat_getDefaultSurfaceTension(Pointer.getPeer(target));
    }

    protected native static double OpenMM_MonteCarloMembraneBarostat_getDefaultSurfaceTension(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloMembraneBarostat_setDefaultSurfaceTension(OpenMM_MonteCarloMembraneBarostat*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:876</i>
     */
    public static void OpenMM_MonteCarloMembraneBarostat_setDefaultSurfaceTension(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target, double surfaceTension) {
        OpenMM_MonteCarloMembraneBarostat_setDefaultSurfaceTension(Pointer.getPeer(target), surfaceTension);
    }

    protected native static void OpenMM_MonteCarloMembraneBarostat_setDefaultSurfaceTension(@Ptr long target, double surfaceTension);

    /**
     * Original signature :
     * <code>int OpenMM_MonteCarloMembraneBarostat_getFrequency(const OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:877</i>
     */
    public static int OpenMM_MonteCarloMembraneBarostat_getFrequency(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        return OpenMM_MonteCarloMembraneBarostat_getFrequency(Pointer.getPeer(target));
    }

    protected native static int OpenMM_MonteCarloMembraneBarostat_getFrequency(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloMembraneBarostat_setFrequency(OpenMM_MonteCarloMembraneBarostat*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:878</i>
     */
    public static void OpenMM_MonteCarloMembraneBarostat_setFrequency(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target, int freq) {
        OpenMM_MonteCarloMembraneBarostat_setFrequency(Pointer.getPeer(target), freq);
    }

    protected native static void OpenMM_MonteCarloMembraneBarostat_setFrequency(@Ptr long target, int freq);

    /**
     * Original signature :
     * <code>double OpenMM_MonteCarloMembraneBarostat_getDefaultTemperature(const OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:879</i>
     */
    public static double OpenMM_MonteCarloMembraneBarostat_getDefaultTemperature(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        return OpenMM_MonteCarloMembraneBarostat_getDefaultTemperature(Pointer.getPeer(target));
    }

    protected native static double OpenMM_MonteCarloMembraneBarostat_getDefaultTemperature(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloMembraneBarostat_setDefaultTemperature(OpenMM_MonteCarloMembraneBarostat*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:880</i>
     */
    public static void OpenMM_MonteCarloMembraneBarostat_setDefaultTemperature(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target, double temp) {
        OpenMM_MonteCarloMembraneBarostat_setDefaultTemperature(Pointer.getPeer(target), temp);
    }

    protected native static void OpenMM_MonteCarloMembraneBarostat_setDefaultTemperature(@Ptr long target, double temp);

    /**
     * Original signature :
     * <code>OpenMM_MonteCarloMembraneBarostat_XYMode OpenMM_MonteCarloMembraneBarostat_getXYMode(const OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:881</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_XYMode> OpenMM_MonteCarloMembraneBarostat_getXYMode(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        return FlagSet.fromValue(OpenMM_MonteCarloMembraneBarostat_getXYMode(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_XYMode.class);
    }

    protected native static int OpenMM_MonteCarloMembraneBarostat_getXYMode(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloMembraneBarostat_setXYMode(OpenMM_MonteCarloMembraneBarostat*, OpenMM_MonteCarloMembraneBarostat_XYMode)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:882</i>
     */
    public static void OpenMM_MonteCarloMembraneBarostat_setXYMode(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_XYMode> mode) {
        OpenMM_MonteCarloMembraneBarostat_setXYMode(Pointer.getPeer(target), (int) mode.value());
    }

    protected native static void OpenMM_MonteCarloMembraneBarostat_setXYMode(@Ptr long target, int mode);

    /**
     * Original signature :
     * <code>OpenMM_MonteCarloMembraneBarostat_ZMode OpenMM_MonteCarloMembraneBarostat_getZMode(const OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:883</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_ZMode> OpenMM_MonteCarloMembraneBarostat_getZMode(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        return FlagSet.fromValue(OpenMM_MonteCarloMembraneBarostat_getZMode(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_ZMode.class);
    }

    protected native static int OpenMM_MonteCarloMembraneBarostat_getZMode(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloMembraneBarostat_setZMode(OpenMM_MonteCarloMembraneBarostat*, OpenMM_MonteCarloMembraneBarostat_ZMode)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:884</i>
     */
    public static void OpenMM_MonteCarloMembraneBarostat_setZMode(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_ZMode> mode) {
        OpenMM_MonteCarloMembraneBarostat_setZMode(Pointer.getPeer(target), (int) mode.value());
    }

    protected native static void OpenMM_MonteCarloMembraneBarostat_setZMode(@Ptr long target, int mode);

    /**
     * Original signature :
     * <code>int OpenMM_MonteCarloMembraneBarostat_getRandomNumberSeed(const OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:885</i>
     */
    public static int OpenMM_MonteCarloMembraneBarostat_getRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        return OpenMM_MonteCarloMembraneBarostat_getRandomNumberSeed(Pointer.getPeer(target));
    }

    protected native static int OpenMM_MonteCarloMembraneBarostat_getRandomNumberSeed(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_MonteCarloMembraneBarostat_setRandomNumberSeed(OpenMM_MonteCarloMembraneBarostat*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:886</i>
     */
    public static void OpenMM_MonteCarloMembraneBarostat_setRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target, int seed) {
        OpenMM_MonteCarloMembraneBarostat_setRandomNumberSeed(Pointer.getPeer(target), seed);
    }

    protected native static void OpenMM_MonteCarloMembraneBarostat_setRandomNumberSeed(@Ptr long target, int seed);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_MonteCarloMembraneBarostat_usesPeriodicBoundaryConditions(const OpenMM_MonteCarloMembraneBarostat*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:887</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_MonteCarloMembraneBarostat_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_MonteCarloMembraneBarostat_struct> target) {
        return FlagSet.fromValue(OpenMM_MonteCarloMembraneBarostat_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_MonteCarloMembraneBarostat_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_NonbondedForce* OpenMM_NonbondedForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:894</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> OpenMM_NonbondedForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_NonbondedForce_create$2(), OpenMMLibrary.OpenMM_NonbondedForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_NonbondedForce_create")
    protected native static long OpenMM_NonbondedForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_destroy(OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:895</i>
     */
    public static void OpenMM_NonbondedForce_destroy(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        OpenMM_NonbondedForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_NonbondedForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_NonbondedForce_getNumParticles(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:896</i>
     */
    public static int OpenMM_NonbondedForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return OpenMM_NonbondedForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_NonbondedForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_NonbondedForce_getNumExceptions(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:897</i>
     */
    public static int OpenMM_NonbondedForce_getNumExceptions(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return OpenMM_NonbondedForce_getNumExceptions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_NonbondedForce_getNumExceptions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_NonbondedForce_NonbondedMethod OpenMM_NonbondedForce_getNonbondedMethod(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:898</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_NonbondedForce_NonbondedMethod> OpenMM_NonbondedForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return FlagSet.fromValue(OpenMM_NonbondedForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_NonbondedForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_NonbondedForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setNonbondedMethod(OpenMM_NonbondedForce*, OpenMM_NonbondedForce_NonbondedMethod)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:899</i>
     */
    public static void OpenMM_NonbondedForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_NonbondedForce_NonbondedMethod> method) {
        OpenMM_NonbondedForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_NonbondedForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>double OpenMM_NonbondedForce_getCutoffDistance(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:900</i>
     */
    public static double OpenMM_NonbondedForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return OpenMM_NonbondedForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_NonbondedForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setCutoffDistance(OpenMM_NonbondedForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:901</i>
     */
    public static void OpenMM_NonbondedForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, double distance) {
        OpenMM_NonbondedForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_NonbondedForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_NonbondedForce_getUseSwitchingFunction(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:902</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_NonbondedForce_getUseSwitchingFunction(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return FlagSet.fromValue(OpenMM_NonbondedForce_getUseSwitchingFunction(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_NonbondedForce_getUseSwitchingFunction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setUseSwitchingFunction(OpenMM_NonbondedForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:903</i>
     */
    public static void OpenMM_NonbondedForce_setUseSwitchingFunction(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> use) {
        OpenMM_NonbondedForce_setUseSwitchingFunction(Pointer.getPeer(target), (int) use.value());
    }

    protected native static void OpenMM_NonbondedForce_setUseSwitchingFunction(@Ptr long target, int use);

    /**
     * Original signature :
     * <code>double OpenMM_NonbondedForce_getSwitchingDistance(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:904</i>
     */
    public static double OpenMM_NonbondedForce_getSwitchingDistance(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return OpenMM_NonbondedForce_getSwitchingDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_NonbondedForce_getSwitchingDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setSwitchingDistance(OpenMM_NonbondedForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:905</i>
     */
    public static void OpenMM_NonbondedForce_setSwitchingDistance(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, double distance) {
        OpenMM_NonbondedForce_setSwitchingDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_NonbondedForce_setSwitchingDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>double OpenMM_NonbondedForce_getReactionFieldDielectric(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:906</i>
     */
    public static double OpenMM_NonbondedForce_getReactionFieldDielectric(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return OpenMM_NonbondedForce_getReactionFieldDielectric(Pointer.getPeer(target));
    }

    protected native static double OpenMM_NonbondedForce_getReactionFieldDielectric(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setReactionFieldDielectric(OpenMM_NonbondedForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:907</i>
     */
    public static void OpenMM_NonbondedForce_setReactionFieldDielectric(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, double dielectric) {
        OpenMM_NonbondedForce_setReactionFieldDielectric(Pointer.getPeer(target), dielectric);
    }

    protected native static void OpenMM_NonbondedForce_setReactionFieldDielectric(@Ptr long target, double dielectric);

    /**
     * Original signature :
     * <code>double OpenMM_NonbondedForce_getEwaldErrorTolerance(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:908</i>
     */
    public static double OpenMM_NonbondedForce_getEwaldErrorTolerance(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return OpenMM_NonbondedForce_getEwaldErrorTolerance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_NonbondedForce_getEwaldErrorTolerance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setEwaldErrorTolerance(OpenMM_NonbondedForce*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:909</i>
     */
    public static void OpenMM_NonbondedForce_setEwaldErrorTolerance(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, double tol) {
        OpenMM_NonbondedForce_setEwaldErrorTolerance(Pointer.getPeer(target), tol);
    }

    protected native static void OpenMM_NonbondedForce_setEwaldErrorTolerance(@Ptr long target, double tol);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_getPMEParameters(const OpenMM_NonbondedForce*, double*, int*, int*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:910</i>
     */
    public static void OpenMM_NonbondedForce_getPMEParameters(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, Pointer<Double> alpha, Pointer<Integer> nx, Pointer<Integer> ny, Pointer<Integer> nz) {
        OpenMM_NonbondedForce_getPMEParameters(Pointer.getPeer(target), Pointer.getPeer(alpha), Pointer.getPeer(nx), Pointer.getPeer(ny), Pointer.getPeer(nz));
    }

    protected native static void OpenMM_NonbondedForce_getPMEParameters(@Ptr long target, @Ptr long alpha, @Ptr long nx, @Ptr long ny, @Ptr long nz);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setPMEParameters(OpenMM_NonbondedForce*, double, int, int, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:911</i>
     */
    public static void OpenMM_NonbondedForce_setPMEParameters(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, double alpha, int nx, int ny, int nz) {
        OpenMM_NonbondedForce_setPMEParameters(Pointer.getPeer(target), alpha, nx, ny, nz);
    }

    protected native static void OpenMM_NonbondedForce_setPMEParameters(@Ptr long target, double alpha, int nx, int ny, int nz);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_getPMEParametersInContext(const OpenMM_NonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:912</i>
     */
    public static void OpenMM_NonbondedForce_getPMEParametersInContext(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<Double> alpha, Pointer<Integer> nx, Pointer<Integer> ny, Pointer<Integer> nz) {
        OpenMM_NonbondedForce_getPMEParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context), Pointer.getPeer(alpha), Pointer.getPeer(nx), Pointer.getPeer(ny), Pointer.getPeer(nz));
    }

    protected native static void OpenMM_NonbondedForce_getPMEParametersInContext(@Ptr long target, @Ptr long context, @Ptr long alpha, @Ptr long nx, @Ptr long ny, @Ptr long nz);

    /**
     * Original signature :
     * <code>int OpenMM_NonbondedForce_addParticle(OpenMM_NonbondedForce*, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:913</i>
     */
    public static int OpenMM_NonbondedForce_addParticle(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, double charge, double sigma, double epsilon) {
        return OpenMM_NonbondedForce_addParticle(Pointer.getPeer(target), charge, sigma, epsilon);
    }

    protected native static int OpenMM_NonbondedForce_addParticle(@Ptr long target, double charge, double sigma, double epsilon);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_getParticleParameters(const OpenMM_NonbondedForce*, int, double*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:914</i>
     */
    public static void OpenMM_NonbondedForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, int index, Pointer<Double> charge, Pointer<Double> sigma, Pointer<Double> epsilon) {
        OpenMM_NonbondedForce_getParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(charge), Pointer.getPeer(sigma), Pointer.getPeer(epsilon));
    }

    protected native static void OpenMM_NonbondedForce_getParticleParameters(@Ptr long target, int index, @Ptr long charge, @Ptr long sigma, @Ptr long epsilon);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setParticleParameters(OpenMM_NonbondedForce*, int, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:915</i>
     */
    public static void OpenMM_NonbondedForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, int index, double charge, double sigma, double epsilon) {
        OpenMM_NonbondedForce_setParticleParameters(Pointer.getPeer(target), index, charge, sigma, epsilon);
    }

    protected native static void OpenMM_NonbondedForce_setParticleParameters(@Ptr long target, int index, double charge, double sigma, double epsilon);

    /**
     * Original signature :
     * <code>int OpenMM_NonbondedForce_addException(OpenMM_NonbondedForce*, int, int, double, double, double, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:916</i>
     */
    public static int OpenMM_NonbondedForce_addException(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, int particle1, int particle2, double chargeProd, double sigma, double epsilon, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> replace) {
        return OpenMM_NonbondedForce_addException(Pointer.getPeer(target), particle1, particle2, chargeProd, sigma, epsilon, (int) replace.value());
    }

    protected native static int OpenMM_NonbondedForce_addException(@Ptr long target, int particle1, int particle2, double chargeProd, double sigma, double epsilon, int replace);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_getExceptionParameters(const OpenMM_NonbondedForce*, int, int*, int*, double*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:917</i>
     */
    public static void OpenMM_NonbondedForce_getExceptionParameters(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Double> chargeProd, Pointer<Double> sigma, Pointer<Double> epsilon) {
        OpenMM_NonbondedForce_getExceptionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(chargeProd), Pointer.getPeer(sigma), Pointer.getPeer(epsilon));
    }

    protected native static void OpenMM_NonbondedForce_getExceptionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long chargeProd, @Ptr long sigma, @Ptr long epsilon);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setExceptionParameters(OpenMM_NonbondedForce*, int, int, int, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:918</i>
     */
    public static void OpenMM_NonbondedForce_setExceptionParameters(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, int index, int particle1, int particle2, double chargeProd, double sigma, double epsilon) {
        OpenMM_NonbondedForce_setExceptionParameters(Pointer.getPeer(target), index, particle1, particle2, chargeProd, sigma, epsilon);
    }

    protected native static void OpenMM_NonbondedForce_setExceptionParameters(@Ptr long target, int index, int particle1, int particle2, double chargeProd, double sigma, double epsilon);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_createExceptionsFromBonds(OpenMM_NonbondedForce*, const OpenMM_BondArray*, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:919</i>
     */
    public static void OpenMM_NonbondedForce_createExceptionsFromBonds(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, Pointer<OpenMMLibrary.OpenMM_BondArray_struct> bonds, double coulomb14Scale, double lj14Scale) {
        OpenMM_NonbondedForce_createExceptionsFromBonds(Pointer.getPeer(target), Pointer.getPeer(bonds), coulomb14Scale, lj14Scale);
    }

    protected native static void OpenMM_NonbondedForce_createExceptionsFromBonds(@Ptr long target, @Ptr long bonds, double coulomb14Scale, double lj14Scale);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_NonbondedForce_getUseDispersionCorrection(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:920</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_NonbondedForce_getUseDispersionCorrection(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return FlagSet.fromValue(OpenMM_NonbondedForce_getUseDispersionCorrection(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_NonbondedForce_getUseDispersionCorrection(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setUseDispersionCorrection(OpenMM_NonbondedForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:921</i>
     */
    public static void OpenMM_NonbondedForce_setUseDispersionCorrection(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> useCorrection) {
        OpenMM_NonbondedForce_setUseDispersionCorrection(Pointer.getPeer(target), (int) useCorrection.value());
    }

    protected native static void OpenMM_NonbondedForce_setUseDispersionCorrection(@Ptr long target, int useCorrection);

    /**
     * Original signature :
     * <code>int OpenMM_NonbondedForce_getReciprocalSpaceForceGroup(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:922</i>
     */
    public static int OpenMM_NonbondedForce_getReciprocalSpaceForceGroup(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return OpenMM_NonbondedForce_getReciprocalSpaceForceGroup(Pointer.getPeer(target));
    }

    protected native static int OpenMM_NonbondedForce_getReciprocalSpaceForceGroup(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_setReciprocalSpaceForceGroup(OpenMM_NonbondedForce*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:923</i>
     */
    public static void OpenMM_NonbondedForce_setReciprocalSpaceForceGroup(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, int group) {
        OpenMM_NonbondedForce_setReciprocalSpaceForceGroup(Pointer.getPeer(target), group);
    }

    protected native static void OpenMM_NonbondedForce_setReciprocalSpaceForceGroup(@Ptr long target, int group);

    /**
     * Original signature :
     * <code>void OpenMM_NonbondedForce_updateParametersInContext(OpenMM_NonbondedForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:924</i>
     */
    public static void OpenMM_NonbondedForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_NonbondedForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_NonbondedForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_NonbondedForce_usesPeriodicBoundaryConditions(const OpenMM_NonbondedForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:925</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_NonbondedForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_NonbondedForce_struct> target) {
        return FlagSet.fromValue(OpenMM_NonbondedForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_NonbondedForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * OpenMMException<br>
     * Original signature :
     * <code>OpenMM_OpenMMException* OpenMM_OpenMMException_create(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:928</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_OpenMMException_struct> OpenMM_OpenMMException_create(Pointer<Byte> message) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_OpenMMException_create(Pointer.getPeer(message)), OpenMMLibrary.OpenMM_OpenMMException_struct.class);
    }

    @Ptr
    protected native static long OpenMM_OpenMMException_create(@Ptr long message);

    /**
     * Original signature :
     * <code>void OpenMM_OpenMMException_destroy(OpenMM_OpenMMException*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:929</i>
     */
    public static void OpenMM_OpenMMException_destroy(Pointer<OpenMMLibrary.OpenMM_OpenMMException_struct> target) {
        OpenMM_OpenMMException_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_OpenMMException_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_OpenMMException_what(const OpenMM_OpenMMException*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:930</i>
     */
    public static Pointer<Byte> OpenMM_OpenMMException_what(Pointer<OpenMMLibrary.OpenMM_OpenMMException_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_OpenMMException_what(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_OpenMMException_what(@Ptr long target);

    /**
     * OutOfPlaneSite<br>
     * Original signature :
     * <code>OpenMM_OutOfPlaneSite* OpenMM_OutOfPlaneSite_create(int, int, int, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:933</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_OutOfPlaneSite_struct> OpenMM_OutOfPlaneSite_create(int particle1, int particle2, int particle3, double weight12, double weight13, double weightCross) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_OutOfPlaneSite_create$2(particle1, particle2, particle3, weight12, weight13, weightCross), OpenMMLibrary.OpenMM_OutOfPlaneSite_struct.class);
    }

    @Ptr
    @Name("OpenMM_OutOfPlaneSite_create")
    protected native static long OpenMM_OutOfPlaneSite_create$2(int particle1, int particle2, int particle3, double weight12, double weight13, double weightCross);

    /**
     * Original signature :
     * <code>void OpenMM_OutOfPlaneSite_destroy(OpenMM_OutOfPlaneSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:934</i>
     */
    public static void OpenMM_OutOfPlaneSite_destroy(Pointer<OpenMMLibrary.OpenMM_OutOfPlaneSite_struct> target) {
        OpenMM_OutOfPlaneSite_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_OutOfPlaneSite_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_OutOfPlaneSite_getWeight12(const OpenMM_OutOfPlaneSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:935</i>
     */
    public static double OpenMM_OutOfPlaneSite_getWeight12(Pointer<OpenMMLibrary.OpenMM_OutOfPlaneSite_struct> target) {
        return OpenMM_OutOfPlaneSite_getWeight12(Pointer.getPeer(target));
    }

    protected native static double OpenMM_OutOfPlaneSite_getWeight12(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_OutOfPlaneSite_getWeight13(const OpenMM_OutOfPlaneSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:936</i>
     */
    public static double OpenMM_OutOfPlaneSite_getWeight13(Pointer<OpenMMLibrary.OpenMM_OutOfPlaneSite_struct> target) {
        return OpenMM_OutOfPlaneSite_getWeight13(Pointer.getPeer(target));
    }

    protected native static double OpenMM_OutOfPlaneSite_getWeight13(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_OutOfPlaneSite_getWeightCross(const OpenMM_OutOfPlaneSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:937</i>
     */
    public static double OpenMM_OutOfPlaneSite_getWeightCross(Pointer<OpenMMLibrary.OpenMM_OutOfPlaneSite_struct> target) {
        return OpenMM_OutOfPlaneSite_getWeightCross(Pointer.getPeer(target));
    }

    protected native static double OpenMM_OutOfPlaneSite_getWeightCross(@Ptr long target);

    /**
     * PeriodicTorsionForce<br>
     * Original signature :
     * <code>OpenMM_PeriodicTorsionForce* OpenMM_PeriodicTorsionForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:940</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> OpenMM_PeriodicTorsionForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_PeriodicTorsionForce_create$2(), OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_PeriodicTorsionForce_create")
    protected native static long OpenMM_PeriodicTorsionForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_PeriodicTorsionForce_destroy(OpenMM_PeriodicTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:941</i>
     */
    public static void OpenMM_PeriodicTorsionForce_destroy(Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> target) {
        OpenMM_PeriodicTorsionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_PeriodicTorsionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_PeriodicTorsionForce_getNumTorsions(const OpenMM_PeriodicTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:942</i>
     */
    public static int OpenMM_PeriodicTorsionForce_getNumTorsions(Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> target) {
        return OpenMM_PeriodicTorsionForce_getNumTorsions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_PeriodicTorsionForce_getNumTorsions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_PeriodicTorsionForce_addTorsion(OpenMM_PeriodicTorsionForce*, int, int, int, int, int, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:943</i>
     */
    public static int OpenMM_PeriodicTorsionForce_addTorsion(Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> target, int particle1, int particle2, int particle3, int particle4, int periodicity, double phase, double k) {
        return OpenMM_PeriodicTorsionForce_addTorsion(Pointer.getPeer(target), particle1, particle2, particle3, particle4, periodicity, phase, k);
    }

    protected native static int OpenMM_PeriodicTorsionForce_addTorsion(@Ptr long target, int particle1, int particle2, int particle3, int particle4, int periodicity, double phase, double k);

    /**
     * Original signature :
     * <code>void OpenMM_PeriodicTorsionForce_getTorsionParameters(const OpenMM_PeriodicTorsionForce*, int, int*, int*, int*, int*, int*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:944</i>
     */
    public static void OpenMM_PeriodicTorsionForce_getTorsionParameters(Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<Integer> periodicity, Pointer<Double> phase, Pointer<Double> k) {
        OpenMM_PeriodicTorsionForce_getTorsionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(periodicity), Pointer.getPeer(phase), Pointer.getPeer(k));
    }

    protected native static void OpenMM_PeriodicTorsionForce_getTorsionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long periodicity, @Ptr long phase, @Ptr long k);

    /**
     * Original signature :
     * <code>void OpenMM_PeriodicTorsionForce_setTorsionParameters(OpenMM_PeriodicTorsionForce*, int, int, int, int, int, int, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:945</i>
     */
    public static void OpenMM_PeriodicTorsionForce_setTorsionParameters(Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, int periodicity, double phase, double k) {
        OpenMM_PeriodicTorsionForce_setTorsionParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, periodicity, phase, k);
    }

    protected native static void OpenMM_PeriodicTorsionForce_setTorsionParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, int periodicity, double phase, double k);

    /**
     * Original signature :
     * <code>void OpenMM_PeriodicTorsionForce_updateParametersInContext(OpenMM_PeriodicTorsionForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:946</i>
     */
    public static void OpenMM_PeriodicTorsionForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_PeriodicTorsionForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_PeriodicTorsionForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_PeriodicTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_PeriodicTorsionForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:947</i>
     */
    public static void OpenMM_PeriodicTorsionForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_PeriodicTorsionForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_PeriodicTorsionForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_PeriodicTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_PeriodicTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:948</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_PeriodicTorsionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_PeriodicTorsionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_PeriodicTorsionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_PeriodicTorsionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Platform<br>
     * Original signature :
     * <code>void OpenMM_Platform_destroy(OpenMM_Platform*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:951</i>
     */
    public static void OpenMM_Platform_destroy(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target) {
        OpenMM_Platform_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_Platform_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_Platform_registerPlatform(OpenMM_Platform*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:952</i>
     */
    public static void OpenMM_Platform_registerPlatform(Pointer<OpenMMLibrary.OpenMM_Platform_struct> platform) {
        OpenMM_Platform_registerPlatform(Pointer.getPeer(platform));
    }

    protected native static void OpenMM_Platform_registerPlatform(@Ptr long platform);

    /**
     * Original signature :
     * <code>int OpenMM_Platform_getNumPlatforms()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:953</i>
     */
    public static native int OpenMM_Platform_getNumPlatforms();

    /**
     * Original signature :
     * <code>OpenMM_Platform* OpenMM_Platform_getPlatform(int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:954</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Platform_struct> OpenMM_Platform_getPlatform(int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getPlatform$2(index), OpenMMLibrary.OpenMM_Platform_struct.class);
    }

    @Ptr
    @Name("OpenMM_Platform_getPlatform")
    protected native static long OpenMM_Platform_getPlatform$2(int index);

    /**
     * Original signature :
     * <code>OpenMM_Platform* OpenMM_Platform_getPlatformByName(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:955</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Platform_struct> OpenMM_Platform_getPlatformByName(Pointer<Byte> name) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getPlatformByName(Pointer.getPeer(name)), OpenMMLibrary.OpenMM_Platform_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Platform_getPlatformByName(@Ptr long name);

    /**
     * Original signature :
     * <code>OpenMM_Platform* OpenMM_Platform_findPlatform(const OpenMM_StringArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:956</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Platform_struct> OpenMM_Platform_findPlatform(Pointer<OpenMMLibrary.OpenMM_StringArray_struct> kernelNames) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_findPlatform(Pointer.getPeer(kernelNames)), OpenMMLibrary.OpenMM_Platform_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Platform_findPlatform(@Ptr long kernelNames);

    /**
     * Original signature :
     * <code>void OpenMM_Platform_loadPluginLibrary(const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:957</i>
     */
    public static void OpenMM_Platform_loadPluginLibrary(Pointer<Byte> file) {
        OpenMM_Platform_loadPluginLibrary(Pointer.getPeer(file));
    }

    protected native static void OpenMM_Platform_loadPluginLibrary(@Ptr long file);

    /**
     * Original signature :
     * <code>char* OpenMM_Platform_getDefaultPluginsDirectory()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:958</i>
     */
    public static Pointer<Byte> OpenMM_Platform_getDefaultPluginsDirectory() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getDefaultPluginsDirectory$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_Platform_getDefaultPluginsDirectory")
    protected native static long OpenMM_Platform_getDefaultPluginsDirectory$2();

    /**
     * Original signature :
     * <code>char* OpenMM_Platform_getOpenMMVersion()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:959</i>
     */
    public static Pointer<Byte> OpenMM_Platform_getOpenMMVersion() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getOpenMMVersion$2(), Byte.class);
    }

    @Ptr
    @Name("OpenMM_Platform_getOpenMMVersion")
    protected native static long OpenMM_Platform_getOpenMMVersion$2();

    /**
     * Original signature :
     * <code>char* OpenMM_Platform_getName(const OpenMM_Platform*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:960</i>
     */
    public static Pointer<Byte> OpenMM_Platform_getName(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getName(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_Platform_getName(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_Platform_getSpeed(const OpenMM_Platform*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:961</i>
     */
    public static double OpenMM_Platform_getSpeed(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target) {
        return OpenMM_Platform_getSpeed(Pointer.getPeer(target));
    }

    protected native static double OpenMM_Platform_getSpeed(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_Platform_supportsDoublePrecision(const OpenMM_Platform*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:962</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_Platform_supportsDoublePrecision(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target) {
        return FlagSet.fromValue(OpenMM_Platform_supportsDoublePrecision(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_Platform_supportsDoublePrecision(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_StringArray* OpenMM_Platform_getPropertyNames(const OpenMM_Platform*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:963</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_StringArray_struct> OpenMM_Platform_getPropertyNames(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getPropertyNames(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_StringArray_struct.class);
    }

    @Ptr
    protected native static long OpenMM_Platform_getPropertyNames(@Ptr long target);

    /**
     * Original signature :
     * <code>char* OpenMM_Platform_getPropertyValue(const OpenMM_Platform*, const OpenMM_Context*, __declspec(property) const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:964</i>
     */
    public static Pointer<Byte> OpenMM_Platform_getPropertyValue(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<Byte> charPtr1) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getPropertyValue(Pointer.getPeer(target), Pointer.getPeer(context), Pointer.getPeer(charPtr1)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_Platform_getPropertyValue(@Ptr long target, @Ptr long context, @Ptr long charPtr1);

    /**
     * Original signature :
     * <code>void OpenMM_Platform_setPropertyValue(const OpenMM_Platform*, OpenMM_Context*, __declspec(property) const char*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:965</i>
     */
    public static void OpenMM_Platform_setPropertyValue(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<Byte> charPtr1, Pointer<Byte> value) {
        OpenMM_Platform_setPropertyValue(Pointer.getPeer(target), Pointer.getPeer(context), Pointer.getPeer(charPtr1), Pointer.getPeer(value));
    }

    protected native static void OpenMM_Platform_setPropertyValue(@Ptr long target, @Ptr long context, @Ptr long charPtr1, @Ptr long value);

    /**
     * Original signature :
     * <code>char* OpenMM_Platform_getPropertyDefaultValue(const OpenMM_Platform*, __declspec(property) const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:966</i>
     */
    public static Pointer<Byte> OpenMM_Platform_getPropertyDefaultValue(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target, Pointer<Byte> charPtr1) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_Platform_getPropertyDefaultValue(Pointer.getPeer(target), Pointer.getPeer(charPtr1)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_Platform_getPropertyDefaultValue(@Ptr long target, @Ptr long charPtr1);

    /**
     * Original signature :
     * <code>void OpenMM_Platform_setPropertyDefaultValue(OpenMM_Platform*, __declspec(property) const char*, const char*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:967</i>
     */
    public static void OpenMM_Platform_setPropertyDefaultValue(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target, Pointer<Byte> charPtr1, Pointer<Byte> value) {
        OpenMM_Platform_setPropertyDefaultValue(Pointer.getPeer(target), Pointer.getPeer(charPtr1), Pointer.getPeer(value));
    }

    protected native static void OpenMM_Platform_setPropertyDefaultValue(@Ptr long target, @Ptr long charPtr1, @Ptr long value);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_Platform_supportsKernels(const OpenMM_Platform*, const OpenMM_StringArray*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:968</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_Platform_supportsKernels(Pointer<OpenMMLibrary.OpenMM_Platform_struct> target, Pointer<OpenMMLibrary.OpenMM_StringArray_struct> kernelNames) {
        return FlagSet.fromValue(OpenMM_Platform_supportsKernels(Pointer.getPeer(target), Pointer.getPeer(kernelNames)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_Platform_supportsKernels(@Ptr long target, @Ptr long kernelNames);

    /**
     * RBTorsionForce<br>
     * Original signature :
     * <code>OpenMM_RBTorsionForce* OpenMM_RBTorsionForce_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:971</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> OpenMM_RBTorsionForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_RBTorsionForce_create$2(), OpenMMLibrary.OpenMM_RBTorsionForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_RBTorsionForce_create")
    protected native static long OpenMM_RBTorsionForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_RBTorsionForce_destroy(OpenMM_RBTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:972</i>
     */
    public static void OpenMM_RBTorsionForce_destroy(Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> target) {
        OpenMM_RBTorsionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_RBTorsionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_RBTorsionForce_getNumTorsions(const OpenMM_RBTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:973</i>
     */
    public static int OpenMM_RBTorsionForce_getNumTorsions(Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> target) {
        return OpenMM_RBTorsionForce_getNumTorsions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_RBTorsionForce_getNumTorsions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_RBTorsionForce_addTorsion(OpenMM_RBTorsionForce*, int, int, int, int, double, double, double, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:974</i>
     */
    public static int OpenMM_RBTorsionForce_addTorsion(Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> target, int particle1, int particle2, int particle3, int particle4, double c0, double c1, double c2, double c3, double c4, double c5) {
        return OpenMM_RBTorsionForce_addTorsion(Pointer.getPeer(target), particle1, particle2, particle3, particle4, c0, c1, c2, c3, c4, c5);
    }

    protected native static int OpenMM_RBTorsionForce_addTorsion(@Ptr long target, int particle1, int particle2, int particle3, int particle4, double c0, double c1, double c2, double c3, double c4, double c5);

    /**
     * Original signature :
     * <code>void OpenMM_RBTorsionForce_getTorsionParameters(const OpenMM_RBTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:975</i>
     */
    public static void OpenMM_RBTorsionForce_getTorsionParameters(Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<Double> c0, Pointer<Double> c1, Pointer<Double> c2, Pointer<Double> c3, Pointer<Double> c4, Pointer<Double> c5) {
        OpenMM_RBTorsionForce_getTorsionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(c0), Pointer.getPeer(c1), Pointer.getPeer(c2), Pointer.getPeer(c3), Pointer.getPeer(c4), Pointer.getPeer(c5));
    }

    protected native static void OpenMM_RBTorsionForce_getTorsionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long c0, @Ptr long c1, @Ptr long c2, @Ptr long c3, @Ptr long c4, @Ptr long c5);

    /**
     * Original signature :
     * <code>void OpenMM_RBTorsionForce_setTorsionParameters(OpenMM_RBTorsionForce*, int, int, int, int, int, double, double, double, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:976</i>
     */
    public static void OpenMM_RBTorsionForce_setTorsionParameters(Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, double c0, double c1, double c2, double c3, double c4, double c5) {
        OpenMM_RBTorsionForce_setTorsionParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, c0, c1, c2, c3, c4, c5);
    }

    protected native static void OpenMM_RBTorsionForce_setTorsionParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, double c0, double c1, double c2, double c3, double c4, double c5);

    /**
     * Original signature :
     * <code>void OpenMM_RBTorsionForce_updateParametersInContext(OpenMM_RBTorsionForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:977</i>
     */
    public static void OpenMM_RBTorsionForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_RBTorsionForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_RBTorsionForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_RBTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_RBTorsionForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:978</i>
     */
    public static void OpenMM_RBTorsionForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_RBTorsionForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_RBTorsionForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_RBTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_RBTorsionForce*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:979</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_RBTorsionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_RBTorsionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_RBTorsionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_RBTorsionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature : <code>OpenMM_State* OpenMM_State_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:986</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_State_struct> OpenMM_State_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_State_create$2(), OpenMMLibrary.OpenMM_State_struct.class);
    }

    @Ptr
    @Name("OpenMM_State_create")
    protected native static long OpenMM_State_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_State_destroy(OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:987</i>
     */
    public static void OpenMM_State_destroy(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        OpenMM_State_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_State_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_State_getTime(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:988</i>
     */
    public static double OpenMM_State_getTime(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return OpenMM_State_getTime(Pointer.getPeer(target));
    }

    protected native static double OpenMM_State_getTime(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Vec3Array* OpenMM_State_getPositions(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:989</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> OpenMM_State_getPositions(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_State_getPositions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Vec3Array_struct.class);
    }

    @Ptr
    protected native static long OpenMM_State_getPositions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Vec3Array* OpenMM_State_getVelocities(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:990</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> OpenMM_State_getVelocities(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_State_getVelocities(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Vec3Array_struct.class);
    }

    @Ptr
    protected native static long OpenMM_State_getVelocities(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Vec3Array* OpenMM_State_getForces(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:991</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> OpenMM_State_getForces(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_State_getForces(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Vec3Array_struct.class);
    }

    @Ptr
    protected native static long OpenMM_State_getForces(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_State_getKineticEnergy(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:992</i>
     */
    public static double OpenMM_State_getKineticEnergy(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return OpenMM_State_getKineticEnergy(Pointer.getPeer(target));
    }

    protected native static double OpenMM_State_getKineticEnergy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_State_getPotentialEnergy(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:993</i>
     */
    public static double OpenMM_State_getPotentialEnergy(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return OpenMM_State_getPotentialEnergy(Pointer.getPeer(target));
    }

    protected native static double OpenMM_State_getPotentialEnergy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_State_getPeriodicBoxVectors(const OpenMM_State*, OpenMM_Vec3*, OpenMM_Vec3*, OpenMM_Vec3*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:994</i>
     */
    public static void OpenMM_State_getPeriodicBoxVectors(Pointer<OpenMMLibrary.OpenMM_State_struct> target, Pointer<OpenMM_Vec3> a, Pointer<OpenMM_Vec3> b, Pointer<OpenMM_Vec3> c) {
        OpenMM_State_getPeriodicBoxVectors(Pointer.getPeer(target), Pointer.getPeer(a), Pointer.getPeer(b), Pointer.getPeer(c));
    }

    protected native static void OpenMM_State_getPeriodicBoxVectors(@Ptr long target, @Ptr long a, @Ptr long b, @Ptr long c);

    /**
     * Original signature :
     * <code>double OpenMM_State_getPeriodicBoxVolume(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:995</i>
     */
    public static double OpenMM_State_getPeriodicBoxVolume(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return OpenMM_State_getPeriodicBoxVolume(Pointer.getPeer(target));
    }

    protected native static double OpenMM_State_getPeriodicBoxVolume(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_ParameterArray* OpenMM_State_getParameters(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:996</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_ParameterArray_struct> OpenMM_State_getParameters(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_State_getParameters(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_ParameterArray_struct.class);
    }

    @Ptr
    protected native static long OpenMM_State_getParameters(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_ParameterArray* OpenMM_State_getEnergyParameterDerivatives(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:997</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_ParameterArray_struct> OpenMM_State_getEnergyParameterDerivatives(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_State_getEnergyParameterDerivatives(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_ParameterArray_struct.class);
    }

    @Ptr
    protected native static long OpenMM_State_getEnergyParameterDerivatives(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_State_getDataTypes(const OpenMM_State*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:998</i>
     */
    public static int OpenMM_State_getDataTypes(Pointer<OpenMMLibrary.OpenMM_State_struct> target) {
        return OpenMM_State_getDataTypes(Pointer.getPeer(target));
    }

    protected native static int OpenMM_State_getDataTypes(@Ptr long target);

    /**
     * System<br>
     * Original signature :
     * <code>OpenMM_System* OpenMM_System_create()</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1001</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_System_struct> OpenMM_System_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_System_create$2(), OpenMMLibrary.OpenMM_System_struct.class);
    }

    @Ptr
    @Name("OpenMM_System_create")
    protected native static long OpenMM_System_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_System_destroy(OpenMM_System*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1002</i>
     */
    public static void OpenMM_System_destroy(Pointer<OpenMMLibrary.OpenMM_System_struct> target) {
        OpenMM_System_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_System_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_System_getNumParticles(const OpenMM_System*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1003</i>
     */
    public static int OpenMM_System_getNumParticles(Pointer<OpenMMLibrary.OpenMM_System_struct> target) {
        return OpenMM_System_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_System_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_System_addParticle(OpenMM_System*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1004</i>
     */
    public static int OpenMM_System_addParticle(Pointer<OpenMMLibrary.OpenMM_System_struct> target, double mass) {
        return OpenMM_System_addParticle(Pointer.getPeer(target), mass);
    }

    protected native static int OpenMM_System_addParticle(@Ptr long target, double mass);

    /**
     * Original signature :
     * <code>double OpenMM_System_getParticleMass(const OpenMM_System*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1005</i>
     */
    public static double OpenMM_System_getParticleMass(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index) {
        return OpenMM_System_getParticleMass(Pointer.getPeer(target), index);
    }

    protected native static double OpenMM_System_getParticleMass(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_System_setParticleMass(OpenMM_System*, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1006</i>
     */
    public static void OpenMM_System_setParticleMass(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index, double mass) {
        OpenMM_System_setParticleMass(Pointer.getPeer(target), index, mass);
    }

    protected native static void OpenMM_System_setParticleMass(@Ptr long target, int index, double mass);

    /**
     * Original signature :
     * <code>void OpenMM_System_setVirtualSite(OpenMM_System*, int, OpenMM_VirtualSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1007</i>
     */
    public static void OpenMM_System_setVirtualSite(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_VirtualSite_struct> virtualSite) {
        OpenMM_System_setVirtualSite(Pointer.getPeer(target), index, Pointer.getPeer(virtualSite));
    }

    protected native static void OpenMM_System_setVirtualSite(@Ptr long target, int index, @Ptr long virtualSite);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_System_isVirtualSite(const OpenMM_System*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1008</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_System_isVirtualSite(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index) {
        return FlagSet.fromValue(OpenMM_System_isVirtualSite(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_System_isVirtualSite(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>OpenMM_VirtualSite* OpenMM_System_getVirtualSite(const OpenMM_System*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1009</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_VirtualSite_struct> OpenMM_System_getVirtualSite(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_System_getVirtualSite(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_VirtualSite_struct.class);
    }

    @Ptr
    protected native static long OpenMM_System_getVirtualSite(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_System_getNumConstraints(const OpenMM_System*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1010</i>
     */
    public static int OpenMM_System_getNumConstraints(Pointer<OpenMMLibrary.OpenMM_System_struct> target) {
        return OpenMM_System_getNumConstraints(Pointer.getPeer(target));
    }

    protected native static int OpenMM_System_getNumConstraints(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_System_addConstraint(OpenMM_System*, int, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1011</i>
     */
    public static int OpenMM_System_addConstraint(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int particle1, int particle2, double distance) {
        return OpenMM_System_addConstraint(Pointer.getPeer(target), particle1, particle2, distance);
    }

    protected native static int OpenMM_System_addConstraint(@Ptr long target, int particle1, int particle2, double distance);

    /**
     * Original signature :
     * <code>void OpenMM_System_getConstraintParameters(const OpenMM_System*, int, int*, int*, double*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1012</i>
     */
    public static void OpenMM_System_getConstraintParameters(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Double> distance) {
        OpenMM_System_getConstraintParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(distance));
    }

    protected native static void OpenMM_System_getConstraintParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long distance);

    /**
     * Original signature :
     * <code>void OpenMM_System_setConstraintParameters(OpenMM_System*, int, int, int, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1013</i>
     */
    public static void OpenMM_System_setConstraintParameters(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index, int particle1, int particle2, double distance) {
        OpenMM_System_setConstraintParameters(Pointer.getPeer(target), index, particle1, particle2, distance);
    }

    protected native static void OpenMM_System_setConstraintParameters(@Ptr long target, int index, int particle1, int particle2, double distance);

    /**
     * Original signature :
     * <code>void OpenMM_System_removeConstraint(OpenMM_System*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1014</i>
     */
    public static void OpenMM_System_removeConstraint(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index) {
        OpenMM_System_removeConstraint(Pointer.getPeer(target), index);
    }

    protected native static void OpenMM_System_removeConstraint(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>int OpenMM_System_addForce(OpenMM_System*, OpenMM_Force*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1015</i>
     */
    public static int OpenMM_System_addForce(Pointer<OpenMMLibrary.OpenMM_System_struct> target, Pointer<OpenMMLibrary.OpenMM_Force_struct> force) {
        return OpenMM_System_addForce(Pointer.getPeer(target), Pointer.getPeer(force));
    }

    protected native static int OpenMM_System_addForce(@Ptr long target, @Ptr long force);

    /**
     * Original signature :
     * <code>int OpenMM_System_getNumForces(const OpenMM_System*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1016</i>
     */
    public static int OpenMM_System_getNumForces(Pointer<OpenMMLibrary.OpenMM_System_struct> target) {
        return OpenMM_System_getNumForces(Pointer.getPeer(target));
    }

    protected native static int OpenMM_System_getNumForces(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Force* OpenMM_System_getForce(OpenMM_System*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1017</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_Force_struct> OpenMM_System_getForce(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_System_getForce(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_Force_struct.class);
    }

    @Ptr
    protected native static long OpenMM_System_getForce(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_System_removeForce(OpenMM_System*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1018</i>
     */
    public static void OpenMM_System_removeForce(Pointer<OpenMMLibrary.OpenMM_System_struct> target, int index) {
        OpenMM_System_removeForce(Pointer.getPeer(target), index);
    }

    protected native static void OpenMM_System_removeForce(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_System_getDefaultPeriodicBoxVectors(const OpenMM_System*, OpenMM_Vec3*, OpenMM_Vec3*, OpenMM_Vec3*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1019</i>
     */
    public static void OpenMM_System_getDefaultPeriodicBoxVectors(Pointer<OpenMMLibrary.OpenMM_System_struct> target, Pointer<OpenMM_Vec3> a, Pointer<OpenMM_Vec3> b, Pointer<OpenMM_Vec3> c) {
        OpenMM_System_getDefaultPeriodicBoxVectors(Pointer.getPeer(target), Pointer.getPeer(a), Pointer.getPeer(b), Pointer.getPeer(c));
    }

    protected native static void OpenMM_System_getDefaultPeriodicBoxVectors(@Ptr long target, @Ptr long a, @Ptr long b, @Ptr long c);

    /**
     * Original signature :
     * <code>void OpenMM_System_setDefaultPeriodicBoxVectors(OpenMM_System*, const OpenMM_Vec3*, const OpenMM_Vec3*, const OpenMM_Vec3*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1020</i>
     */
    public static void OpenMM_System_setDefaultPeriodicBoxVectors(Pointer<OpenMMLibrary.OpenMM_System_struct> target, Pointer<OpenMM_Vec3> a, Pointer<OpenMM_Vec3> b, Pointer<OpenMM_Vec3> c) {
        OpenMM_System_setDefaultPeriodicBoxVectors(Pointer.getPeer(target), Pointer.getPeer(a), Pointer.getPeer(b), Pointer.getPeer(c));
    }

    protected native static void OpenMM_System_setDefaultPeriodicBoxVectors(@Ptr long target, @Ptr long a, @Ptr long b, @Ptr long c);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_System_usesPeriodicBoundaryConditions(const OpenMM_System*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1021</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_System_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_System_struct> target) {
        return FlagSet.fromValue(OpenMM_System_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_System_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * ThreeParticleAverageSite<br>
     * Original signature :
     * <code>OpenMM_ThreeParticleAverageSite* OpenMM_ThreeParticleAverageSite_create(int, int, int, double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1024</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_ThreeParticleAverageSite_struct> OpenMM_ThreeParticleAverageSite_create(int particle1, int particle2, int particle3, double weight1, double weight2, double weight3) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_ThreeParticleAverageSite_create$2(particle1, particle2, particle3, weight1, weight2, weight3), OpenMMLibrary.OpenMM_ThreeParticleAverageSite_struct.class);
    }

    @Ptr
    @Name("OpenMM_ThreeParticleAverageSite_create")
    protected native static long OpenMM_ThreeParticleAverageSite_create$2(int particle1, int particle2, int particle3, double weight1, double weight2, double weight3);

    /**
     * Original signature :
     * <code>void OpenMM_ThreeParticleAverageSite_destroy(OpenMM_ThreeParticleAverageSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1025</i>
     */
    public static void OpenMM_ThreeParticleAverageSite_destroy(Pointer<OpenMMLibrary.OpenMM_ThreeParticleAverageSite_struct> target) {
        OpenMM_ThreeParticleAverageSite_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_ThreeParticleAverageSite_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_ThreeParticleAverageSite_getWeight(const OpenMM_ThreeParticleAverageSite*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1026</i>
     */
    public static double OpenMM_ThreeParticleAverageSite_getWeight(Pointer<OpenMMLibrary.OpenMM_ThreeParticleAverageSite_struct> target, int particle) {
        return OpenMM_ThreeParticleAverageSite_getWeight(Pointer.getPeer(target), particle);
    }

    protected native static double OpenMM_ThreeParticleAverageSite_getWeight(@Ptr long target, int particle);

    /**
     * TwoParticleAverageSite<br>
     * Original signature :
     * <code>OpenMM_TwoParticleAverageSite* OpenMM_TwoParticleAverageSite_create(int, int, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1029</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_TwoParticleAverageSite_struct> OpenMM_TwoParticleAverageSite_create(int particle1, int particle2, double weight1, double weight2) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_TwoParticleAverageSite_create$2(particle1, particle2, weight1, weight2), OpenMMLibrary.OpenMM_TwoParticleAverageSite_struct.class);
    }

    @Ptr
    @Name("OpenMM_TwoParticleAverageSite_create")
    protected native static long OpenMM_TwoParticleAverageSite_create$2(int particle1, int particle2, double weight1, double weight2);

    /**
     * Original signature :
     * <code>void OpenMM_TwoParticleAverageSite_destroy(OpenMM_TwoParticleAverageSite*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1030</i>
     */
    public static void OpenMM_TwoParticleAverageSite_destroy(Pointer<OpenMMLibrary.OpenMM_TwoParticleAverageSite_struct> target) {
        OpenMM_TwoParticleAverageSite_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_TwoParticleAverageSite_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_TwoParticleAverageSite_getWeight(const OpenMM_TwoParticleAverageSite*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1031</i>
     */
    public static double OpenMM_TwoParticleAverageSite_getWeight(Pointer<OpenMMLibrary.OpenMM_TwoParticleAverageSite_struct> target, int particle) {
        return OpenMM_TwoParticleAverageSite_getWeight(Pointer.getPeer(target), particle);
    }

    protected native static double OpenMM_TwoParticleAverageSite_getWeight(@Ptr long target, int particle);

    /**
     * VariableLangevinIntegrator<br>
     * Original signature :
     * <code>OpenMM_VariableLangevinIntegrator* OpenMM_VariableLangevinIntegrator_create(double, double, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1034</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> OpenMM_VariableLangevinIntegrator_create(double temperature, double frictionCoeff, double errorTol) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_VariableLangevinIntegrator_create$2(temperature, frictionCoeff, errorTol), OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct.class);
    }

    @Ptr
    @Name("OpenMM_VariableLangevinIntegrator_create")
    protected native static long OpenMM_VariableLangevinIntegrator_create$2(double temperature, double frictionCoeff, double errorTol);

    /**
     * Original signature :
     * <code>void OpenMM_VariableLangevinIntegrator_destroy(OpenMM_VariableLangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1035</i>
     */
    public static void OpenMM_VariableLangevinIntegrator_destroy(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target) {
        OpenMM_VariableLangevinIntegrator_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_VariableLangevinIntegrator_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_VariableLangevinIntegrator_getTemperature(const OpenMM_VariableLangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1036</i>
     */
    public static double OpenMM_VariableLangevinIntegrator_getTemperature(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target) {
        return OpenMM_VariableLangevinIntegrator_getTemperature(Pointer.getPeer(target));
    }

    protected native static double OpenMM_VariableLangevinIntegrator_getTemperature(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_VariableLangevinIntegrator_setTemperature(OpenMM_VariableLangevinIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1037</i>
     */
    public static void OpenMM_VariableLangevinIntegrator_setTemperature(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target, double temp) {
        OpenMM_VariableLangevinIntegrator_setTemperature(Pointer.getPeer(target), temp);
    }

    protected native static void OpenMM_VariableLangevinIntegrator_setTemperature(@Ptr long target, double temp);

    /**
     * Original signature :
     * <code>double OpenMM_VariableLangevinIntegrator_getFriction(const OpenMM_VariableLangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1038</i>
     */
    public static double OpenMM_VariableLangevinIntegrator_getFriction(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target) {
        return OpenMM_VariableLangevinIntegrator_getFriction(Pointer.getPeer(target));
    }

    protected native static double OpenMM_VariableLangevinIntegrator_getFriction(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_VariableLangevinIntegrator_setFriction(OpenMM_VariableLangevinIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1039</i>
     */
    public static void OpenMM_VariableLangevinIntegrator_setFriction(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target, double coeff) {
        OpenMM_VariableLangevinIntegrator_setFriction(Pointer.getPeer(target), coeff);
    }

    protected native static void OpenMM_VariableLangevinIntegrator_setFriction(@Ptr long target, double coeff);

    /**
     * Original signature :
     * <code>double OpenMM_VariableLangevinIntegrator_getErrorTolerance(const OpenMM_VariableLangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1040</i>
     */
    public static double OpenMM_VariableLangevinIntegrator_getErrorTolerance(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target) {
        return OpenMM_VariableLangevinIntegrator_getErrorTolerance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_VariableLangevinIntegrator_getErrorTolerance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_VariableLangevinIntegrator_setErrorTolerance(OpenMM_VariableLangevinIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1041</i>
     */
    public static void OpenMM_VariableLangevinIntegrator_setErrorTolerance(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target, double tol) {
        OpenMM_VariableLangevinIntegrator_setErrorTolerance(Pointer.getPeer(target), tol);
    }

    protected native static void OpenMM_VariableLangevinIntegrator_setErrorTolerance(@Ptr long target, double tol);

    /**
     * Original signature :
     * <code>int OpenMM_VariableLangevinIntegrator_getRandomNumberSeed(const OpenMM_VariableLangevinIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1042</i>
     */
    public static int OpenMM_VariableLangevinIntegrator_getRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target) {
        return OpenMM_VariableLangevinIntegrator_getRandomNumberSeed(Pointer.getPeer(target));
    }

    protected native static int OpenMM_VariableLangevinIntegrator_getRandomNumberSeed(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_VariableLangevinIntegrator_setRandomNumberSeed(OpenMM_VariableLangevinIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1043</i>
     */
    public static void OpenMM_VariableLangevinIntegrator_setRandomNumberSeed(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target, int seed) {
        OpenMM_VariableLangevinIntegrator_setRandomNumberSeed(Pointer.getPeer(target), seed);
    }

    protected native static void OpenMM_VariableLangevinIntegrator_setRandomNumberSeed(@Ptr long target, int seed);

    /**
     * Original signature :
     * <code>void OpenMM_VariableLangevinIntegrator_step(OpenMM_VariableLangevinIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1044</i>
     */
    public static void OpenMM_VariableLangevinIntegrator_step(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target, int steps) {
        OpenMM_VariableLangevinIntegrator_step(Pointer.getPeer(target), steps);
    }

    protected native static void OpenMM_VariableLangevinIntegrator_step(@Ptr long target, int steps);

    /**
     * Original signature :
     * <code>void OpenMM_VariableLangevinIntegrator_stepTo(OpenMM_VariableLangevinIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1045</i>
     */
    public static void OpenMM_VariableLangevinIntegrator_stepTo(Pointer<OpenMMLibrary.OpenMM_VariableLangevinIntegrator_struct> target, double time) {
        OpenMM_VariableLangevinIntegrator_stepTo(Pointer.getPeer(target), time);
    }

    protected native static void OpenMM_VariableLangevinIntegrator_stepTo(@Ptr long target, double time);

    /**
     * VariableVerletIntegrator<br>
     * Original signature :
     * <code>OpenMM_VariableVerletIntegrator* OpenMM_VariableVerletIntegrator_create(double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1048</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_VariableVerletIntegrator_struct> OpenMM_VariableVerletIntegrator_create(double errorTol) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_VariableVerletIntegrator_create$2(errorTol), OpenMMLibrary.OpenMM_VariableVerletIntegrator_struct.class);
    }

    @Ptr
    @Name("OpenMM_VariableVerletIntegrator_create")
    protected native static long OpenMM_VariableVerletIntegrator_create$2(double errorTol);

    /**
     * Original signature :
     * <code>void OpenMM_VariableVerletIntegrator_destroy(OpenMM_VariableVerletIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1049</i>
     */
    public static void OpenMM_VariableVerletIntegrator_destroy(Pointer<OpenMMLibrary.OpenMM_VariableVerletIntegrator_struct> target) {
        OpenMM_VariableVerletIntegrator_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_VariableVerletIntegrator_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_VariableVerletIntegrator_getErrorTolerance(const OpenMM_VariableVerletIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1050</i>
     */
    public static double OpenMM_VariableVerletIntegrator_getErrorTolerance(Pointer<OpenMMLibrary.OpenMM_VariableVerletIntegrator_struct> target) {
        return OpenMM_VariableVerletIntegrator_getErrorTolerance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_VariableVerletIntegrator_getErrorTolerance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_VariableVerletIntegrator_setErrorTolerance(OpenMM_VariableVerletIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1051</i>
     */
    public static void OpenMM_VariableVerletIntegrator_setErrorTolerance(Pointer<OpenMMLibrary.OpenMM_VariableVerletIntegrator_struct> target, double tol) {
        OpenMM_VariableVerletIntegrator_setErrorTolerance(Pointer.getPeer(target), tol);
    }

    protected native static void OpenMM_VariableVerletIntegrator_setErrorTolerance(@Ptr long target, double tol);

    /**
     * Original signature :
     * <code>void OpenMM_VariableVerletIntegrator_step(OpenMM_VariableVerletIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1052</i>
     */
    public static void OpenMM_VariableVerletIntegrator_step(Pointer<OpenMMLibrary.OpenMM_VariableVerletIntegrator_struct> target, int steps) {
        OpenMM_VariableVerletIntegrator_step(Pointer.getPeer(target), steps);
    }

    protected native static void OpenMM_VariableVerletIntegrator_step(@Ptr long target, int steps);

    /**
     * Original signature :
     * <code>void OpenMM_VariableVerletIntegrator_stepTo(OpenMM_VariableVerletIntegrator*, double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1053</i>
     */
    public static void OpenMM_VariableVerletIntegrator_stepTo(Pointer<OpenMMLibrary.OpenMM_VariableVerletIntegrator_struct> target, double time) {
        OpenMM_VariableVerletIntegrator_stepTo(Pointer.getPeer(target), time);
    }

    protected native static void OpenMM_VariableVerletIntegrator_stepTo(@Ptr long target, double time);

    /**
     * VerletIntegrator<br>
     * Original signature :
     * <code>OpenMM_VerletIntegrator* OpenMM_VerletIntegrator_create(double)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1056</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_VerletIntegrator_struct> OpenMM_VerletIntegrator_create(double stepSize) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_VerletIntegrator_create$2(stepSize), OpenMMLibrary.OpenMM_VerletIntegrator_struct.class);
    }

    @Ptr
    @Name("OpenMM_VerletIntegrator_create")
    protected native static long OpenMM_VerletIntegrator_create$2(double stepSize);

    /**
     * Original signature :
     * <code>void OpenMM_VerletIntegrator_destroy(OpenMM_VerletIntegrator*)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1057</i>
     */
    public static void OpenMM_VerletIntegrator_destroy(Pointer<OpenMMLibrary.OpenMM_VerletIntegrator_struct> target) {
        OpenMM_VerletIntegrator_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_VerletIntegrator_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_VerletIntegrator_step(OpenMM_VerletIntegrator*, int)</code><br>
     * <i>native declaration : OpenMMCWrapper.h:1058</i>
     */
    public static void OpenMM_VerletIntegrator_step(Pointer<OpenMMLibrary.OpenMM_VerletIntegrator_struct> target, int steps) {
        OpenMM_VerletIntegrator_step(Pointer.getPeer(target), steps);
    }

    protected native static void OpenMM_VerletIntegrator_step(@Ptr long target, int steps);

    /**
     * OpenMM_3D_DoubleArray<br>
     * Original signature :
     * <code>OpenMM_3D_DoubleArray* OpenMM_3D_DoubleArray_create(int, int, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:35</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_3D_DoubleArray_struct> OpenMM_3D_DoubleArray_create(int size1, int size2, int size3) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_3D_DoubleArray_create$2(size1, size2, size3), OpenMMLibrary.OpenMM_3D_DoubleArray_struct.class);
    }

    @Ptr
    @Name("OpenMM_3D_DoubleArray_create")
    protected native static long OpenMM_3D_DoubleArray_create$2(int size1, int size2, int size3);

    /**
     * Original signature :
     * <code>void OpenMM_3D_DoubleArray_set(OpenMM_3D_DoubleArray*, int, int, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:36</i>
     */
    public static void OpenMM_3D_DoubleArray_set(Pointer<OpenMMLibrary.OpenMM_3D_DoubleArray_struct> array, int index1, int index2, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> values) {
        OpenMM_3D_DoubleArray_set(Pointer.getPeer(array), index1, index2, Pointer.getPeer(values));
    }

    protected native static void OpenMM_3D_DoubleArray_set(@Ptr long array, int index1, int index2, @Ptr long values);

    /**
     * Original signature :
     * <code>void OpenMM_3D_DoubleArray_destroy(OpenMM_3D_DoubleArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:37</i>
     */
    public static void OpenMM_3D_DoubleArray_destroy(Pointer<OpenMMLibrary.OpenMM_3D_DoubleArray_struct> array) {
        OpenMM_3D_DoubleArray_destroy(Pointer.getPeer(array));
    }

    protected native static void OpenMM_3D_DoubleArray_destroy(@Ptr long array);

    /**
     * AmoebaAngleForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaAngleForce* OpenMM_AmoebaAngleForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:40</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> OpenMM_AmoebaAngleForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaAngleForce_create$2(), OpenMMLibrary.OpenMM_AmoebaAngleForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaAngleForce_create")
    protected native static long OpenMM_AmoebaAngleForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_destroy(OpenMM_AmoebaAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:41</i>
     */
    public static void OpenMM_AmoebaAngleForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target) {
        OpenMM_AmoebaAngleForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaAngleForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaAngleForce_getNumAngles(const OpenMM_AmoebaAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:42</i>
     */
    public static int OpenMM_AmoebaAngleForce_getNumAngles(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target) {
        return OpenMM_AmoebaAngleForce_getNumAngles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaAngleForce_getNumAngles(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(OpenMM_AmoebaAngleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:43</i>
     */
    public static void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, double cubicK) {
        OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(Pointer.getPeer(target), cubicK);
    }

    protected native static void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(@Ptr long target, double cubicK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(const OpenMM_AmoebaAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:44</i>
     */
    public static double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target) {
        return OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(OpenMM_AmoebaAngleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:45</i>
     */
    public static void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, double quarticK) {
        OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(Pointer.getPeer(target), quarticK);
    }

    protected native static void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(@Ptr long target, double quarticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(const OpenMM_AmoebaAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:46</i>
     */
    public static double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target) {
        return OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(OpenMM_AmoebaAngleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:47</i>
     */
    public static void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, double penticK) {
        OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(Pointer.getPeer(target), penticK);
    }

    protected native static void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(@Ptr long target, double penticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(const OpenMM_AmoebaAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:48</i>
     */
    public static double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target) {
        return OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(OpenMM_AmoebaAngleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:49</i>
     */
    public static void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, double sexticK) {
        OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(Pointer.getPeer(target), sexticK);
    }

    protected native static void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(@Ptr long target, double sexticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(const OpenMM_AmoebaAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:50</i>
     */
    public static double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target) {
        return OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaAngleForce_addAngle(OpenMM_AmoebaAngleForce*, int, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:51</i>
     */
    public static int OpenMM_AmoebaAngleForce_addAngle(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, int particle1, int particle2, int particle3, double length, double quadraticK) {
        return OpenMM_AmoebaAngleForce_addAngle(Pointer.getPeer(target), particle1, particle2, particle3, length, quadraticK);
    }

    protected native static int OpenMM_AmoebaAngleForce_addAngle(@Ptr long target, int particle1, int particle2, int particle3, double length, double quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_getAngleParameters(const OpenMM_AmoebaAngleForce*, int, int*, int*, int*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:52</i>
     */
    public static void OpenMM_AmoebaAngleForce_getAngleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Double> length, Pointer<Double> quadraticK) {
        OpenMM_AmoebaAngleForce_getAngleParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(length), Pointer.getPeer(quadraticK));
    }

    protected native static void OpenMM_AmoebaAngleForce_getAngleParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long length, @Ptr long quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_setAngleParameters(OpenMM_AmoebaAngleForce*, int, int, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:53</i>
     */
    public static void OpenMM_AmoebaAngleForce_setAngleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, int index, int particle1, int particle2, int particle3, double length, double quadraticK) {
        OpenMM_AmoebaAngleForce_setAngleParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, length, quadraticK);
    }

    protected native static void OpenMM_AmoebaAngleForce_setAngleParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, double length, double quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_updateParametersInContext(OpenMM_AmoebaAngleForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:54</i>
     */
    public static void OpenMM_AmoebaAngleForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaAngleForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaAngleForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaAngleForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:55</i>
     */
    public static void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:56</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaAngleTorsionForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaAngleTorsionForce* OpenMM_AmoebaAngleTorsionForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:59</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct> OpenMM_AmoebaAngleTorsionForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaAngleTorsionForce_create$2(), OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaAngleTorsionForce_create")
    protected native static long OpenMM_AmoebaAngleTorsionForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleTorsionForce_destroy(OpenMM_AmoebaAngleTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:60</i>
     */
    public static void OpenMM_AmoebaAngleTorsionForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct> target) {
        OpenMM_AmoebaAngleTorsionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaAngleTorsionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(const OpenMM_AmoebaAngleTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:61</i>
     */
    public static int OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct> target) {
        return OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(OpenMM_AmoebaAngleTorsionForce*, int, int, int, int, double, double, double, double, double, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:62</i>
     */
    public static int OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct> target, int particle1, int particle2, int particle3, int particle4, double angleCBA, double angleDCB, double k1, double k2, double k3, double k4, double k5, double k6) {
        return OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(Pointer.getPeer(target), particle1, particle2, particle3, particle4, angleCBA, angleDCB, k1, k2, k3, k4, k5, k6);
    }

    protected native static int OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(@Ptr long target, int particle1, int particle2, int particle3, int particle4, double angleCBA, double angleDCB, double k1, double k2, double k3, double k4, double k5, double k6);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(const OpenMM_AmoebaAngleTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:63</i>
     */
    public static void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<Double> angleCBA, Pointer<Double> angleDCB, Pointer<Double> k1, Pointer<Double> k2, Pointer<Double> k3, Pointer<Double> k4, Pointer<Double> k5, Pointer<Double> k6) {
        OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(angleCBA), Pointer.getPeer(angleDCB), Pointer.getPeer(k1), Pointer.getPeer(k2), Pointer.getPeer(k3), Pointer.getPeer(k4), Pointer.getPeer(k5), Pointer.getPeer(k6));
    }

    protected native static void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long angleCBA, @Ptr long angleDCB, @Ptr long k1, @Ptr long k2, @Ptr long k3, @Ptr long k4, @Ptr long k5, @Ptr long k6);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(OpenMM_AmoebaAngleTorsionForce*, int, int, int, int, int, double, double, double, double, double, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:64</i>
     */
    public static void OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, double angleCBA, double angleDCB, double k1, double k2, double k3, double k4, double k5, double k6) {
        OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, angleCBA, angleDCB, k1, k2, k3, k4, k5, k6);
    }

    protected native static void OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, double angleCBA, double angleDCB, double k1, double k2, double k3, double k4, double k5, double k6);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(OpenMM_AmoebaAngleTorsionForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:65</i>
     */
    public static void OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaAngleTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:66</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaAngleTorsionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaBondForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaBondForce* OpenMM_AmoebaBondForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:69</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> OpenMM_AmoebaBondForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaBondForce_create$2(), OpenMMLibrary.OpenMM_AmoebaBondForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaBondForce_create")
    protected native static long OpenMM_AmoebaBondForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaBondForce_destroy(OpenMM_AmoebaBondForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:70</i>
     */
    public static void OpenMM_AmoebaBondForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target) {
        OpenMM_AmoebaBondForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaBondForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaBondForce_getNumBonds(const OpenMM_AmoebaBondForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:71</i>
     */
    public static int OpenMM_AmoebaBondForce_getNumBonds(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target) {
        return OpenMM_AmoebaBondForce_getNumBonds(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaBondForce_getNumBonds(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(OpenMM_AmoebaBondForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:72</i>
     */
    public static void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target, double cubicK) {
        OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(Pointer.getPeer(target), cubicK);
    }

    protected native static void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(@Ptr long target, double cubicK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(const OpenMM_AmoebaBondForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:73</i>
     */
    public static double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target) {
        return OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(OpenMM_AmoebaBondForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:74</i>
     */
    public static void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target, double quarticK) {
        OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(Pointer.getPeer(target), quarticK);
    }

    protected native static void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(@Ptr long target, double quarticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(const OpenMM_AmoebaBondForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:75</i>
     */
    public static double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target) {
        return OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaBondForce_addBond(OpenMM_AmoebaBondForce*, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:76</i>
     */
    public static int OpenMM_AmoebaBondForce_addBond(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target, int particle1, int particle2, double length, double quadraticK) {
        return OpenMM_AmoebaBondForce_addBond(Pointer.getPeer(target), particle1, particle2, length, quadraticK);
    }

    protected native static int OpenMM_AmoebaBondForce_addBond(@Ptr long target, int particle1, int particle2, double length, double quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaBondForce_getBondParameters(const OpenMM_AmoebaBondForce*, int, int*, int*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:77</i>
     */
    public static void OpenMM_AmoebaBondForce_getBondParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Double> length, Pointer<Double> quadraticK) {
        OpenMM_AmoebaBondForce_getBondParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(length), Pointer.getPeer(quadraticK));
    }

    protected native static void OpenMM_AmoebaBondForce_getBondParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long length, @Ptr long quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaBondForce_setBondParameters(OpenMM_AmoebaBondForce*, int, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:78</i>
     */
    public static void OpenMM_AmoebaBondForce_setBondParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target, int index, int particle1, int particle2, double length, double quadraticK) {
        OpenMM_AmoebaBondForce_setBondParameters(Pointer.getPeer(target), index, particle1, particle2, length, quadraticK);
    }

    protected native static void OpenMM_AmoebaBondForce_setBondParameters(@Ptr long target, int index, int particle1, int particle2, double length, double quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaBondForce_updateParametersInContext(OpenMM_AmoebaBondForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:79</i>
     */
    public static void OpenMM_AmoebaBondForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaBondForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaBondForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaBondForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:80</i>
     */
    public static void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaBondForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:81</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaBondForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaGeneralizedKirkwoodForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaGeneralizedKirkwoodForce* OpenMM_AmoebaGeneralizedKirkwoodForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:84</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> OpenMM_AmoebaGeneralizedKirkwoodForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaGeneralizedKirkwoodForce_create$2(), OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaGeneralizedKirkwoodForce_create")
    protected native static long OpenMM_AmoebaGeneralizedKirkwoodForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:85</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:86</i>
     */
    public static int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target) {
        return OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(OpenMM_AmoebaGeneralizedKirkwoodForce*, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:87</i>
     */
    public static int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, double charge, double radius, double scalingFactor) {
        return OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(Pointer.getPeer(target), charge, radius, scalingFactor);
    }

    protected native static int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(@Ptr long target, double charge, double radius, double scalingFactor);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:88</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, int index, Pointer<Double> charge, Pointer<Double> radius, Pointer<Double> scalingFactor) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(Pointer.getPeer(target), index, Pointer.getPeer(charge), Pointer.getPeer(radius), Pointer.getPeer(scalingFactor));
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(@Ptr long target, int index, @Ptr long charge, @Ptr long radius, @Ptr long scalingFactor);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:89</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, int index, double charge, double radius, double scalingFactor) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(Pointer.getPeer(target), index, charge, radius, scalingFactor);
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(@Ptr long target, int index, double charge, double radius, double scalingFactor);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:90</i>
     */
    public static double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target) {
        return OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:91</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, double dielectric) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(Pointer.getPeer(target), dielectric);
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(@Ptr long target, double dielectric);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:92</i>
     */
    public static double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target) {
        return OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:93</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, double dielectric) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(Pointer.getPeer(target), dielectric);
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(@Ptr long target, double dielectric);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:94</i>
     */
    public static int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target) {
        return OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(OpenMM_AmoebaGeneralizedKirkwoodForce*, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:95</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, int includeCavityTerm) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(Pointer.getPeer(target), includeCavityTerm);
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(@Ptr long target, int includeCavityTerm);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:96</i>
     */
    public static double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target) {
        return OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:97</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, double probeRadius) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(Pointer.getPeer(target), probeRadius);
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(@Ptr long target, double probeRadius);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:98</i>
     */
    public static double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target) {
        return OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:99</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, double surfaceAreaFactor) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(Pointer.getPeer(target), surfaceAreaFactor);
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(@Ptr long target, double surfaceAreaFactor);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(OpenMM_AmoebaGeneralizedKirkwoodForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:100</i>
     */
    public static void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:101</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaGeneralizedKirkwoodForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaInPlaneAngleForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaInPlaneAngleForce* OpenMM_AmoebaInPlaneAngleForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:104</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> OpenMM_AmoebaInPlaneAngleForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaInPlaneAngleForce_create$2(), OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaInPlaneAngleForce_create")
    protected native static long OpenMM_AmoebaInPlaneAngleForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_destroy(OpenMM_AmoebaInPlaneAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:105</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target) {
        OpenMM_AmoebaInPlaneAngleForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:106</i>
     */
    public static int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target) {
        return OpenMM_AmoebaInPlaneAngleForce_getNumAngles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(OpenMM_AmoebaInPlaneAngleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:107</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, double cubicK) {
        OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(Pointer.getPeer(target), cubicK);
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(@Ptr long target, double cubicK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:108</i>
     */
    public static double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target) {
        return OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(OpenMM_AmoebaInPlaneAngleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:109</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, double quarticK) {
        OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(Pointer.getPeer(target), quarticK);
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(@Ptr long target, double quarticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:110</i>
     */
    public static double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target) {
        return OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(OpenMM_AmoebaInPlaneAngleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:111</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, double penticK) {
        OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(Pointer.getPeer(target), penticK);
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(@Ptr long target, double penticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:112</i>
     */
    public static double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target) {
        return OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(OpenMM_AmoebaInPlaneAngleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:113</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, double sexticK) {
        OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(Pointer.getPeer(target), sexticK);
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(@Ptr long target, double sexticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:114</i>
     */
    public static double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target) {
        return OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaInPlaneAngleForce_addAngle(OpenMM_AmoebaInPlaneAngleForce*, int, int, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:115</i>
     */
    public static int OpenMM_AmoebaInPlaneAngleForce_addAngle(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK) {
        return OpenMM_AmoebaInPlaneAngleForce_addAngle(Pointer.getPeer(target), particle1, particle2, particle3, particle4, length, quadraticK);
    }

    protected native static int OpenMM_AmoebaInPlaneAngleForce_addAngle(@Ptr long target, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(const OpenMM_AmoebaInPlaneAngleForce*, int, int*, int*, int*, int*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:116</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<Double> length, Pointer<Double> quadraticK) {
        OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(length), Pointer.getPeer(quadraticK));
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long length, @Ptr long quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(OpenMM_AmoebaInPlaneAngleForce*, int, int, int, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:117</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK) {
        OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, length, quadraticK);
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(OpenMM_AmoebaInPlaneAngleForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:118</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaInPlaneAngleForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:119</i>
     */
    public static void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:120</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaInPlaneAngleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_AmoebaMultipoleForce* OpenMM_AmoebaMultipoleForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:136</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> OpenMM_AmoebaMultipoleForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaMultipoleForce_create$2(), OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaMultipoleForce_create")
    protected native static long OpenMM_AmoebaMultipoleForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_destroy(OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:137</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        OpenMM_AmoebaMultipoleForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaMultipoleForce_getNumMultipoles(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:138</i>
     */
    public static int OpenMM_AmoebaMultipoleForce_getNumMultipoles(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return OpenMM_AmoebaMultipoleForce_getNumMultipoles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaMultipoleForce_getNumMultipoles(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_AmoebaMultipoleForce_NonbondedMethod OpenMM_AmoebaMultipoleForce_getNonbondedMethod(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:139</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_NonbondedMethod> OpenMM_AmoebaMultipoleForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaMultipoleForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_AmoebaMultipoleForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_AmoebaMultipoleForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_NonbondedMethod)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:140</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_NonbondedMethod> method) {
        OpenMM_AmoebaMultipoleForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>OpenMM_AmoebaMultipoleForce_PolarizationType OpenMM_AmoebaMultipoleForce_getPolarizationType(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:141</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_PolarizationType> OpenMM_AmoebaMultipoleForce_getPolarizationType(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaMultipoleForce_getPolarizationType(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_AmoebaMultipoleForce_PolarizationType.class);
    }

    protected native static int OpenMM_AmoebaMultipoleForce_getPolarizationType(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setPolarizationType(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_PolarizationType)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:142</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setPolarizationType(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_PolarizationType> type) {
        OpenMM_AmoebaMultipoleForce_setPolarizationType(Pointer.getPeer(target), (int) type.value());
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setPolarizationType(@Ptr long target, int type);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaMultipoleForce_getCutoffDistance(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:143</i>
     */
    public static double OpenMM_AmoebaMultipoleForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return OpenMM_AmoebaMultipoleForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaMultipoleForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setCutoffDistance(OpenMM_AmoebaMultipoleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:144</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, double distance) {
        OpenMM_AmoebaMultipoleForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getPMEParameters(const OpenMM_AmoebaMultipoleForce*, double*, int*, int*, int*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:145</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getPMEParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<Double> alpha, Pointer<Integer> nx, Pointer<Integer> ny, Pointer<Integer> nz) {
        OpenMM_AmoebaMultipoleForce_getPMEParameters(Pointer.getPeer(target), Pointer.getPeer(alpha), Pointer.getPeer(nx), Pointer.getPeer(ny), Pointer.getPeer(nz));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getPMEParameters(@Ptr long target, @Ptr long alpha, @Ptr long nx, @Ptr long ny, @Ptr long nz);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setPMEParameters(OpenMM_AmoebaMultipoleForce*, double, int, int, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:146</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setPMEParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, double alpha, int nx, int ny, int nz) {
        OpenMM_AmoebaMultipoleForce_setPMEParameters(Pointer.getPeer(target), alpha, nx, ny, nz);
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setPMEParameters(@Ptr long target, double alpha, int nx, int ny, int nz);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaMultipoleForce_getAEwald(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:147</i>
     */
    public static double OpenMM_AmoebaMultipoleForce_getAEwald(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return OpenMM_AmoebaMultipoleForce_getAEwald(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaMultipoleForce_getAEwald(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setAEwald(OpenMM_AmoebaMultipoleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:148</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setAEwald(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, double aewald) {
        OpenMM_AmoebaMultipoleForce_setAEwald(Pointer.getPeer(target), aewald);
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setAEwald(@Ptr long target, double aewald);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:149</i>
     */
    public static int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(const OpenMM_AmoebaMultipoleForce*, OpenMM_IntArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:150</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> gridDimension) {
        OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(Pointer.getPeer(target), Pointer.getPeer(gridDimension));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(@Ptr long target, @Ptr long gridDimension);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(OpenMM_AmoebaMultipoleForce*, const OpenMM_IntArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:151</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> gridDimension) {
        OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(Pointer.getPeer(target), Pointer.getPeer(gridDimension));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(@Ptr long target, @Ptr long gridDimension);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(const OpenMM_AmoebaMultipoleForce*, const OpenMM_Context*, double*, int*, int*, int*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:152</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<Double> alpha, Pointer<Integer> nx, Pointer<Integer> ny, Pointer<Integer> nz) {
        OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context), Pointer.getPeer(alpha), Pointer.getPeer(nx), Pointer.getPeer(ny), Pointer.getPeer(nz));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(@Ptr long target, @Ptr long context, @Ptr long alpha, @Ptr long nx, @Ptr long ny, @Ptr long nz);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaMultipoleForce_addMultipole(OpenMM_AmoebaMultipoleForce*, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:153</i>
     */
    public static int OpenMM_AmoebaMultipoleForce_addMultipole(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, double charge, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> molecularDipole, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity) {
        return OpenMM_AmoebaMultipoleForce_addMultipole(Pointer.getPeer(target), charge, Pointer.getPeer(molecularDipole), Pointer.getPeer(molecularQuadrupole), axisType, multipoleAtomZ, multipoleAtomX, multipoleAtomY, thole, dampingFactor, polarity);
    }

    protected native static int OpenMM_AmoebaMultipoleForce_addMultipole(@Ptr long target, double charge, @Ptr long molecularDipole, @Ptr long molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(const OpenMM_AmoebaMultipoleForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, int*, int*, int*, int*, double*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:154</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, int index, Pointer<Double> charge, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> molecularDipole, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> molecularQuadrupole, Pointer<Integer> axisType, Pointer<Integer> multipoleAtomZ, Pointer<Integer> multipoleAtomX, Pointer<Integer> multipoleAtomY, Pointer<Double> thole, Pointer<Double> dampingFactor, Pointer<Double> polarity) {
        OpenMM_AmoebaMultipoleForce_getMultipoleParameters(Pointer.getPeer(target), index, Pointer.getPeer(charge), Pointer.getPeer(molecularDipole), Pointer.getPeer(molecularQuadrupole), Pointer.getPeer(axisType), Pointer.getPeer(multipoleAtomZ), Pointer.getPeer(multipoleAtomX), Pointer.getPeer(multipoleAtomY), Pointer.getPeer(thole), Pointer.getPeer(dampingFactor), Pointer.getPeer(polarity));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(@Ptr long target, int index, @Ptr long charge, @Ptr long molecularDipole, @Ptr long molecularQuadrupole, @Ptr long axisType, @Ptr long multipoleAtomZ, @Ptr long multipoleAtomX, @Ptr long multipoleAtomY, @Ptr long thole, @Ptr long dampingFactor, @Ptr long polarity);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(OpenMM_AmoebaMultipoleForce*, int, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:155</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, int index, double charge, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> molecularDipole, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity) {
        OpenMM_AmoebaMultipoleForce_setMultipoleParameters(Pointer.getPeer(target), index, charge, Pointer.getPeer(molecularDipole), Pointer.getPeer(molecularQuadrupole), axisType, multipoleAtomZ, multipoleAtomX, multipoleAtomY, thole, dampingFactor, polarity);
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(@Ptr long target, int index, double charge, @Ptr long molecularDipole, @Ptr long molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setCovalentMap(OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, const OpenMM_IntArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:156</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setCovalentMap(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, int index, IntValuedEnum<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_CovalentType> typeId, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> covalentAtoms) {
        OpenMM_AmoebaMultipoleForce_setCovalentMap(Pointer.getPeer(target), index, (int) typeId.value(), Pointer.getPeer(covalentAtoms));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setCovalentMap(@Ptr long target, int index, int typeId, @Ptr long covalentAtoms);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getCovalentMap(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, OpenMM_IntArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:157</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getCovalentMap(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, int index, IntValuedEnum<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_CovalentType> typeId, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> covalentAtoms) {
        OpenMM_AmoebaMultipoleForce_getCovalentMap(Pointer.getPeer(target), index, (int) typeId.value(), Pointer.getPeer(covalentAtoms));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getCovalentMap(@Ptr long target, int index, int typeId, @Ptr long covalentAtoms);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getCovalentMaps(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_2D_IntArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:158</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getCovalentMaps(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_2D_IntArray_struct> covalentLists) {
        OpenMM_AmoebaMultipoleForce_getCovalentMaps(Pointer.getPeer(target), index, Pointer.getPeer(covalentLists));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getCovalentMaps(@Ptr long target, int index, @Ptr long covalentLists);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:159</i>
     */
    public static int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(OpenMM_AmoebaMultipoleForce*, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:160</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, int inputMutualInducedMaxIterations) {
        OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(Pointer.getPeer(target), inputMutualInducedMaxIterations);
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(@Ptr long target, int inputMutualInducedMaxIterations);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:161</i>
     */
    public static double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(OpenMM_AmoebaMultipoleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:162</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, double inputMutualInducedTargetEpsilon) {
        OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(Pointer.getPeer(target), inputMutualInducedTargetEpsilon);
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(@Ptr long target, double inputMutualInducedTargetEpsilon);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(OpenMM_AmoebaMultipoleForce*, const OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:163</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> coefficients) {
        OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(Pointer.getPeer(target), Pointer.getPeer(coefficients));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(@Ptr long target, @Ptr long coefficients);

    /**
     * Original signature :
     * <code>OpenMM_DoubleArray* OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:164</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_DoubleArray_struct.class);
    }

    @Ptr
    protected native static long OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:165</i>
     */
    public static double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(OpenMM_AmoebaMultipoleForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:166</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, double tol) {
        OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(Pointer.getPeer(target), tol);
    }

    protected native static void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(@Ptr long target, double tol);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:167</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> dipoles) {
        OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(Pointer.getPeer(target), Pointer.getPeer(context), Pointer.getPeer(dipoles));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(@Ptr long target, @Ptr long context, @Ptr long dipoles);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getInducedDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:168</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getInducedDipoles(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> dipoles) {
        OpenMM_AmoebaMultipoleForce_getInducedDipoles(Pointer.getPeer(target), Pointer.getPeer(context), Pointer.getPeer(dipoles));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getInducedDipoles(@Ptr long target, @Ptr long context, @Ptr long dipoles);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getTotalDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:169</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getTotalDipoles(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> dipoles) {
        OpenMM_AmoebaMultipoleForce_getTotalDipoles(Pointer.getPeer(target), Pointer.getPeer(context), Pointer.getPeer(dipoles));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getTotalDipoles(@Ptr long target, @Ptr long context, @Ptr long dipoles);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(OpenMM_AmoebaMultipoleForce*, const OpenMM_Vec3Array*, OpenMM_Context*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:170</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Vec3Array_struct> inputGrid, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> outputElectrostaticPotential) {
        OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(Pointer.getPeer(target), Pointer.getPeer(inputGrid), Pointer.getPeer(context), Pointer.getPeer(outputElectrostaticPotential));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(@Ptr long target, @Ptr long inputGrid, @Ptr long context, @Ptr long outputElectrostaticPotential);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_DoubleArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:171</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context, Pointer<OpenMMLibrary.OpenMM_DoubleArray_struct> outputMultipoleMoments) {
        OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(Pointer.getPeer(target), Pointer.getPeer(context), Pointer.getPeer(outputMultipoleMoments));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(@Ptr long target, @Ptr long context, @Ptr long outputMultipoleMoments);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaMultipoleForce_updateParametersInContext(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:172</i>
     */
    public static void OpenMM_AmoebaMultipoleForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaMultipoleForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaMultipoleForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaMultipoleForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:173</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaMultipoleForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaOutOfPlaneBendForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaOutOfPlaneBendForce* OpenMM_AmoebaOutOfPlaneBendForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:176</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> OpenMM_AmoebaOutOfPlaneBendForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaOutOfPlaneBendForce_create$2(), OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaOutOfPlaneBendForce_create")
    protected native static long OpenMM_AmoebaOutOfPlaneBendForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_destroy(OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:177</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target) {
        OpenMM_AmoebaOutOfPlaneBendForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:178</i>
     */
    public static int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target) {
        return OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:179</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, double cubicK) {
        OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(Pointer.getPeer(target), cubicK);
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(@Ptr long target, double cubicK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:180</i>
     */
    public static double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target) {
        return OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:181</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, double quarticK) {
        OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(Pointer.getPeer(target), quarticK);
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(@Ptr long target, double quarticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:182</i>
     */
    public static double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target) {
        return OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:183</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, double penticK) {
        OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(Pointer.getPeer(target), penticK);
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(@Ptr long target, double penticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:184</i>
     */
    public static double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target) {
        return OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:185</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, double sexticK) {
        OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(Pointer.getPeer(target), sexticK);
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(@Ptr long target, double sexticK);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:186</i>
     */
    public static double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target) {
        return OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(OpenMM_AmoebaOutOfPlaneBendForce*, int, int, int, int, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:187</i>
     */
    public static int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, int particle1, int particle2, int particle3, int particle4, double k) {
        return OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(Pointer.getPeer(target), particle1, particle2, particle3, particle4, k);
    }

    protected native static int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(@Ptr long target, int particle1, int particle2, int particle3, int particle4, double k);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(const OpenMM_AmoebaOutOfPlaneBendForce*, int, int*, int*, int*, int*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:188</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<Double> k) {
        OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(k));
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long k);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(OpenMM_AmoebaOutOfPlaneBendForce*, int, int, int, int, int, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:189</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, double k) {
        OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, k);
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, double k);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(OpenMM_AmoebaOutOfPlaneBendForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:190</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaOutOfPlaneBendForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:191</i>
     */
    public static void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:192</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaOutOfPlaneBendForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaPiTorsionForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaPiTorsionForce* OpenMM_AmoebaPiTorsionForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:195</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> OpenMM_AmoebaPiTorsionForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaPiTorsionForce_create$2(), OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaPiTorsionForce_create")
    protected native static long OpenMM_AmoebaPiTorsionForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaPiTorsionForce_destroy(OpenMM_AmoebaPiTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:196</i>
     */
    public static void OpenMM_AmoebaPiTorsionForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> target) {
        OpenMM_AmoebaPiTorsionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaPiTorsionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(const OpenMM_AmoebaPiTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:197</i>
     */
    public static int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> target) {
        return OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaPiTorsionForce_addPiTorsion(OpenMM_AmoebaPiTorsionForce*, int, int, int, int, int, int, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:198</i>
     */
    public static int OpenMM_AmoebaPiTorsionForce_addPiTorsion(Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> target, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k) {
        return OpenMM_AmoebaPiTorsionForce_addPiTorsion(Pointer.getPeer(target), particle1, particle2, particle3, particle4, particle5, particle6, k);
    }

    protected native static int OpenMM_AmoebaPiTorsionForce_addPiTorsion(@Ptr long target, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(const OpenMM_AmoebaPiTorsionForce*, int, int*, int*, int*, int*, int*, int*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:199</i>
     */
    public static void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<Integer> particle5, Pointer<Integer> particle6, Pointer<Double> k) {
        OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(particle5), Pointer.getPeer(particle6), Pointer.getPeer(k));
    }

    protected native static void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long particle5, @Ptr long particle6, @Ptr long k);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(OpenMM_AmoebaPiTorsionForce*, int, int, int, int, int, int, int, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:200</i>
     */
    public static void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k) {
        OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, particle5, particle6, k);
    }

    protected native static void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(OpenMM_AmoebaPiTorsionForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:201</i>
     */
    public static void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaPiTorsionForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaPiTorsionForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:202</i>
     */
    public static void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaPiTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:203</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaPiTorsionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaStretchBendForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaStretchBendForce* OpenMM_AmoebaStretchBendForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:206</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> OpenMM_AmoebaStretchBendForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaStretchBendForce_create$2(), OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaStretchBendForce_create")
    protected native static long OpenMM_AmoebaStretchBendForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchBendForce_destroy(OpenMM_AmoebaStretchBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:207</i>
     */
    public static void OpenMM_AmoebaStretchBendForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> target) {
        OpenMM_AmoebaStretchBendForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaStretchBendForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaStretchBendForce_getNumStretchBends(const OpenMM_AmoebaStretchBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:208</i>
     */
    public static int OpenMM_AmoebaStretchBendForce_getNumStretchBends(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> target) {
        return OpenMM_AmoebaStretchBendForce_getNumStretchBends(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaStretchBendForce_getNumStretchBends(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaStretchBendForce_addStretchBend(OpenMM_AmoebaStretchBendForce*, int, int, int, double, double, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:209</i>
     */
    public static int OpenMM_AmoebaStretchBendForce_addStretchBend(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> target, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2) {
        return OpenMM_AmoebaStretchBendForce_addStretchBend(Pointer.getPeer(target), particle1, particle2, particle3, lengthAB, lengthCB, angle, k1, k2);
    }

    protected native static int OpenMM_AmoebaStretchBendForce_addStretchBend(@Ptr long target, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(const OpenMM_AmoebaStretchBendForce*, int, int*, int*, int*, double*, double*, double*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:210</i>
     */
    public static void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Double> lengthAB, Pointer<Double> lengthCB, Pointer<Double> angle, Pointer<Double> k1, Pointer<Double> k2) {
        OpenMM_AmoebaStretchBendForce_getStretchBendParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(lengthAB), Pointer.getPeer(lengthCB), Pointer.getPeer(angle), Pointer.getPeer(k1), Pointer.getPeer(k2));
    }

    protected native static void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long lengthAB, @Ptr long lengthCB, @Ptr long angle, @Ptr long k1, @Ptr long k2);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(OpenMM_AmoebaStretchBendForce*, int, int, int, int, double, double, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:211</i>
     */
    public static void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> target, int index, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2) {
        OpenMM_AmoebaStretchBendForce_setStretchBendParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, lengthAB, lengthCB, angle, k1, k2);
    }

    protected native static void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchBendForce_updateParametersInContext(OpenMM_AmoebaStretchBendForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:212</i>
     */
    public static void OpenMM_AmoebaStretchBendForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaStretchBendForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaStretchBendForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaStretchBendForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:213</i>
     */
    public static void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaStretchBendForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:214</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchBendForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaStretchTorsionForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaStretchTorsionForce* OpenMM_AmoebaStretchTorsionForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:217</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct> OpenMM_AmoebaStretchTorsionForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaStretchTorsionForce_create$2(), OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaStretchTorsionForce_create")
    protected native static long OpenMM_AmoebaStretchTorsionForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchTorsionForce_destroy(OpenMM_AmoebaStretchTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:218</i>
     */
    public static void OpenMM_AmoebaStretchTorsionForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct> target) {
        OpenMM_AmoebaStretchTorsionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaStretchTorsionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(const OpenMM_AmoebaStretchTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:219</i>
     */
    public static int OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct> target) {
        return OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(OpenMM_AmoebaStretchTorsionForce*, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:220</i>
     */
    public static int OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct> target, int particle1, int particle2, int particle3, int particle4, double lengthBA, double lengthCB, double lengthDC, double k1, double k2, double k3, double k4, double k5, double k6, double k7, double k8, double k9) {
        return OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(Pointer.getPeer(target), particle1, particle2, particle3, particle4, lengthBA, lengthCB, lengthDC, k1, k2, k3, k4, k5, k6, k7, k8, k9);
    }

    protected native static int OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(@Ptr long target, int particle1, int particle2, int particle3, int particle4, double lengthBA, double lengthCB, double lengthDC, double k1, double k2, double k3, double k4, double k5, double k6, double k7, double k8, double k9);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(const OpenMM_AmoebaStretchTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:221</i>
     */
    public static void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<Double> lengthBA, Pointer<Double> lengthCB, Pointer<Double> lengthDC, Pointer<Double> k1, Pointer<Double> k2, Pointer<Double> k3, Pointer<Double> k4, Pointer<Double> k5, Pointer<Double> k6, Pointer<Double> k7, Pointer<Double> k8, Pointer<Double> k9) {
        OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(lengthBA), Pointer.getPeer(lengthCB), Pointer.getPeer(lengthDC), Pointer.getPeer(k1), Pointer.getPeer(k2), Pointer.getPeer(k3), Pointer.getPeer(k4), Pointer.getPeer(k5), Pointer.getPeer(k6), Pointer.getPeer(k7), Pointer.getPeer(k8), Pointer.getPeer(k9));
    }

    protected native static void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long lengthBA, @Ptr long lengthCB, @Ptr long lengthDC, @Ptr long k1, @Ptr long k2, @Ptr long k3, @Ptr long k4, @Ptr long k5, @Ptr long k6, @Ptr long k7, @Ptr long k8, @Ptr long k9);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(OpenMM_AmoebaStretchTorsionForce*, int, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:222</i>
     */
    public static void OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, double lengthBA, double lengthCB, double lengthDC, double k1, double k2, double k3, double k4, double k5, double k6, double k7, double k8, double k9) {
        OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, lengthBA, lengthCB, lengthDC, k1, k2, k3, k4, k5, k6, k7, k8, k9);
    }

    protected native static void OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, double lengthBA, double lengthCB, double lengthDC, double k1, double k2, double k3, double k4, double k5, double k6, double k7, double k8, double k9);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(OpenMM_AmoebaStretchTorsionForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:223</i>
     */
    public static void OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaStretchTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:224</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaStretchTorsionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaTorsionTorsionForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaTorsionTorsionForce* OpenMM_AmoebaTorsionTorsionForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:227</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> OpenMM_AmoebaTorsionTorsionForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaTorsionTorsionForce_create$2(), OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaTorsionTorsionForce_create")
    protected native static long OpenMM_AmoebaTorsionTorsionForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaTorsionTorsionForce_destroy(OpenMM_AmoebaTorsionTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:228</i>
     */
    public static void OpenMM_AmoebaTorsionTorsionForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target) {
        OpenMM_AmoebaTorsionTorsionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaTorsionTorsionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(const OpenMM_AmoebaTorsionTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:229</i>
     */
    public static int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target) {
        return OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(const OpenMM_AmoebaTorsionTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:230</i>
     */
    public static int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target) {
        return OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:231</i>
     */
    public static int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex) {
        return OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(Pointer.getPeer(target), particle1, particle2, particle3, particle4, particle5, chiralCheckAtomIndex, gridIndex);
    }

    protected native static int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(@Ptr long target, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(const OpenMM_AmoebaTorsionTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:232</i>
     */
    public static void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target, int index, Pointer<Integer> particle1, Pointer<Integer> particle2, Pointer<Integer> particle3, Pointer<Integer> particle4, Pointer<Integer> particle5, Pointer<Integer> chiralCheckAtomIndex, Pointer<Integer> gridIndex) {
        OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(Pointer.getPeer(target), index, Pointer.getPeer(particle1), Pointer.getPeer(particle2), Pointer.getPeer(particle3), Pointer.getPeer(particle4), Pointer.getPeer(particle5), Pointer.getPeer(chiralCheckAtomIndex), Pointer.getPeer(gridIndex));
    }

    protected native static void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(@Ptr long target, int index, @Ptr long particle1, @Ptr long particle2, @Ptr long particle3, @Ptr long particle4, @Ptr long particle5, @Ptr long chiralCheckAtomIndex, @Ptr long gridIndex);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:233</i>
     */
    public static void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex) {
        OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(Pointer.getPeer(target), index, particle1, particle2, particle3, particle4, particle5, chiralCheckAtomIndex, gridIndex);
    }

    protected native static void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(@Ptr long target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex);

    /**
     * Original signature :
     * <code>OpenMM_3D_DoubleArray* OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(const OpenMM_AmoebaTorsionTorsionForce*, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:234</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_3D_DoubleArray_struct> OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target, int index) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(Pointer.getPeer(target), index), OpenMMLibrary.OpenMM_3D_DoubleArray_struct.class);
    }

    @Ptr
    protected native static long OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(@Ptr long target, int index);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(OpenMM_AmoebaTorsionTorsionForce*, int, const OpenMM_3D_DoubleArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:235</i>
     */
    public static void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target, int index, Pointer<OpenMMLibrary.OpenMM_3D_DoubleArray_struct> grid) {
        OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(Pointer.getPeer(target), index, Pointer.getPeer(grid));
    }

    protected native static void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(@Ptr long target, int index, @Ptr long grid);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaTorsionTorsionForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:236</i>
     */
    public static void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> periodic) {
        OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(Pointer.getPeer(target), (int) periodic.value());
    }

    protected native static void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(@Ptr long target, int periodic);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaTorsionTorsionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:237</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaTorsionTorsionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_AmoebaVdwForce* OpenMM_AmoebaVdwForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:244</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> OpenMM_AmoebaVdwForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaVdwForce_create$2(), OpenMMLibrary.OpenMM_AmoebaVdwForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaVdwForce_create")
    protected native static long OpenMM_AmoebaVdwForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_destroy(OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:245</i>
     */
    public static void OpenMM_AmoebaVdwForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        OpenMM_AmoebaVdwForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaVdwForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaVdwForce_getNumParticles(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:246</i>
     */
    public static int OpenMM_AmoebaVdwForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return OpenMM_AmoebaVdwForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaVdwForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setParticleParameters(OpenMM_AmoebaVdwForce*, int, int, int, double, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:247</i>
     */
    public static void OpenMM_AmoebaVdwForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int particleIndex, int parentIndex, int vdwprType, double sigma, double epsilon, double reductionFactor, double lambda) {
        OpenMM_AmoebaVdwForce_setParticleParameters(Pointer.getPeer(target), particleIndex, parentIndex, vdwprType, sigma, epsilon, reductionFactor, lambda);
    }

    protected native static void OpenMM_AmoebaVdwForce_setParticleParameters(@Ptr long target, int particleIndex, int parentIndex, int vdwprType, double sigma, double epsilon, double reductionFactor, double lambda);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_getParticleParameters(const OpenMM_AmoebaVdwForce*, int, int*, int*, double*, double*, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:248</i>
     */
    public static void OpenMM_AmoebaVdwForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int particleIndex, Pointer<Integer> parentIndex, Pointer<Integer> vdwprType, Pointer<Double> sigma, Pointer<Double> epsilon, Pointer<Double> reductionFactor, Pointer<Double> lambda) {
        OpenMM_AmoebaVdwForce_getParticleParameters(Pointer.getPeer(target), particleIndex, Pointer.getPeer(parentIndex), Pointer.getPeer(vdwprType), Pointer.getPeer(sigma), Pointer.getPeer(epsilon), Pointer.getPeer(reductionFactor), Pointer.getPeer(lambda));
    }

    protected native static void OpenMM_AmoebaVdwForce_getParticleParameters(@Ptr long target, int particleIndex, @Ptr long parentIndex, @Ptr long vdwprType, @Ptr long sigma, @Ptr long epsilon, @Ptr long reductionFactor, @Ptr long lambda);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaVdwForce_addParticle(OpenMM_AmoebaVdwForce*, int, int, double, double, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:249</i>
     */
    public static int OpenMM_AmoebaVdwForce_addParticle(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int parentIndex, int vdwprType, double sigma, double epsilon, double reductionFactor, double lambda) {
        return OpenMM_AmoebaVdwForce_addParticle(Pointer.getPeer(target), parentIndex, vdwprType, sigma, epsilon, reductionFactor, lambda);
    }

    protected native static int OpenMM_AmoebaVdwForce_addParticle(@Ptr long target, int parentIndex, int vdwprType, double sigma, double epsilon, double reductionFactor, double lambda);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:250</i>
     */
    public static void OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaVdwForce_getNumVdwprTypes(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:251</i>
     */
    public static int OpenMM_AmoebaVdwForce_getNumVdwprTypes(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return OpenMM_AmoebaVdwForce_getNumVdwprTypes(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaVdwForce_getNumVdwprTypes(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setNumVdwprTypes(OpenMM_AmoebaVdwForce*, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:252</i>
     */
    public static void OpenMM_AmoebaVdwForce_setNumVdwprTypes(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int newNum) {
        OpenMM_AmoebaVdwForce_setNumVdwprTypes(Pointer.getPeer(target), newNum);
    }

    protected native static void OpenMM_AmoebaVdwForce_setNumVdwprTypes(@Ptr long target, int newNum);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaVdwForce_getNewVdwprType(const OpenMM_AmoebaVdwForce*, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:253</i>
     */
    public static int OpenMM_AmoebaVdwForce_getNewVdwprType(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int oldType) {
        return OpenMM_AmoebaVdwForce_getNewVdwprType(Pointer.getPeer(target), oldType);
    }

    protected native static int OpenMM_AmoebaVdwForce_getNewVdwprType(@Ptr long target, int oldType);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaVdwForce_getOldVdwprType(const OpenMM_AmoebaVdwForce*, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:254</i>
     */
    public static int OpenMM_AmoebaVdwForce_getOldVdwprType(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int newType) {
        return OpenMM_AmoebaVdwForce_getOldVdwprType(Pointer.getPeer(target), newType);
    }

    protected native static int OpenMM_AmoebaVdwForce_getOldVdwprType(@Ptr long target, int newType);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setOldVdwprType(OpenMM_AmoebaVdwForce*, int, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:255</i>
     */
    public static void OpenMM_AmoebaVdwForce_setOldVdwprType(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int newType, int oldType) {
        OpenMM_AmoebaVdwForce_setOldVdwprType(Pointer.getPeer(target), newType, oldType);
    }

    protected native static void OpenMM_AmoebaVdwForce_setOldVdwprType(@Ptr long target, int newType, int oldType);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_resize(OpenMM_AmoebaVdwForce*, int)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:256</i>
     */
    public static void OpenMM_AmoebaVdwForce_resize(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int newSize) {
        OpenMM_AmoebaVdwForce_resize(Pointer.getPeer(target), newSize);
    }

    protected native static void OpenMM_AmoebaVdwForce_resize(@Ptr long target, int newSize);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(OpenMM_AmoebaVdwForce*, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:257</i>
     */
    public static void OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int oldtype1, int oldtype2, double combinedSigma, double combinedEpsilon) {
        OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(Pointer.getPeer(target), oldtype1, oldtype2, combinedSigma, combinedEpsilon);
    }

    protected native static void OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(@Ptr long target, int oldtype1, int oldtype2, double combinedSigma, double combinedEpsilon);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaVdwForce_addVdwprByOldTypes(OpenMM_AmoebaVdwForce*, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:258</i>
     */
    public static int OpenMM_AmoebaVdwForce_addVdwprByOldTypes(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int oldtype1, int oldtype2, double combinedSigma, double combinedEpsilon) {
        return OpenMM_AmoebaVdwForce_addVdwprByOldTypes(Pointer.getPeer(target), oldtype1, oldtype2, combinedSigma, combinedEpsilon);
    }

    protected native static int OpenMM_AmoebaVdwForce_addVdwprByOldTypes(@Ptr long target, int oldtype1, int oldtype2, double combinedSigma, double combinedEpsilon);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setVdwprParameters(OpenMM_AmoebaVdwForce*, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:259</i>
     */
    public static void OpenMM_AmoebaVdwForce_setVdwprParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int ntype1, int ntype2, double combinedSigma, double combinedEpsilon) {
        OpenMM_AmoebaVdwForce_setVdwprParameters(Pointer.getPeer(target), ntype1, ntype2, combinedSigma, combinedEpsilon);
    }

    protected native static void OpenMM_AmoebaVdwForce_setVdwprParameters(@Ptr long target, int ntype1, int ntype2, double combinedSigma, double combinedEpsilon);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_getVdwprParameters(const OpenMM_AmoebaVdwForce*, int, int, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:260</i>
     */
    public static void OpenMM_AmoebaVdwForce_getVdwprParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int ntype1, int ntype2, Pointer<Double> combinedSigma, Pointer<Double> combinedEpsilon) {
        OpenMM_AmoebaVdwForce_getVdwprParameters(Pointer.getPeer(target), ntype1, ntype2, Pointer.getPeer(combinedSigma), Pointer.getPeer(combinedEpsilon));
    }

    protected native static void OpenMM_AmoebaVdwForce_getVdwprParameters(@Ptr long target, int ntype1, int ntype2, @Ptr long combinedSigma, @Ptr long combinedEpsilon);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaVdwForce_addVdwpr(OpenMM_AmoebaVdwForce*, int, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:261</i>
     */
    public static int OpenMM_AmoebaVdwForce_addVdwpr(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int ntype1, int ntype2, double combinedSigma, double combinedEpsilon) {
        return OpenMM_AmoebaVdwForce_addVdwpr(Pointer.getPeer(target), ntype1, ntype2, combinedSigma, combinedEpsilon);
    }

    protected native static int OpenMM_AmoebaVdwForce_addVdwpr(@Ptr long target, int ntype1, int ntype2, double combinedSigma, double combinedEpsilon);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:262</i>
     */
    public static void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, Pointer<Byte> sigmaCombiningRule) {
        OpenMM_AmoebaVdwForce_setSigmaCombiningRule(Pointer.getPeer(target), Pointer.getPeer(sigmaCombiningRule));
    }

    protected native static void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(@Ptr long target, @Ptr long sigmaCombiningRule);

    /**
     * Original signature :
     * <code>char* OpenMM_AmoebaVdwForce_getSigmaCombiningRule(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:263</i>
     */
    public static Pointer<Byte> OpenMM_AmoebaVdwForce_getSigmaCombiningRule(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaVdwForce_getSigmaCombiningRule(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_AmoebaVdwForce_getSigmaCombiningRule(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:264</i>
     */
    public static void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, Pointer<Byte> epsilonCombiningRule) {
        OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(Pointer.getPeer(target), Pointer.getPeer(epsilonCombiningRule));
    }

    protected native static void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(@Ptr long target, @Ptr long epsilonCombiningRule);

    /**
     * Original signature :
     * <code>char* OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:265</i>
     */
    public static Pointer<Byte> OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setFunctionalForm(OpenMM_AmoebaVdwForce*, const char*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:266</i>
     */
    public static void OpenMM_AmoebaVdwForce_setFunctionalForm(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, Pointer<Byte> functionalForm) {
        OpenMM_AmoebaVdwForce_setFunctionalForm(Pointer.getPeer(target), Pointer.getPeer(functionalForm));
    }

    protected native static void OpenMM_AmoebaVdwForce_setFunctionalForm(@Ptr long target, @Ptr long functionalForm);

    /**
     * Original signature :
     * <code>char* OpenMM_AmoebaVdwForce_getFunctionalForm(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:267</i>
     */
    public static Pointer<Byte> OpenMM_AmoebaVdwForce_getFunctionalForm(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaVdwForce_getFunctionalForm(Pointer.getPeer(target)), Byte.class);
    }

    @Ptr
    protected native static long OpenMM_AmoebaVdwForce_getFunctionalForm(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaVdwForce_getUseDispersionCorrection(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:268</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaVdwForce_getUseDispersionCorrection(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaVdwForce_getUseDispersionCorrection(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaVdwForce_getUseDispersionCorrection(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(OpenMM_AmoebaVdwForce*, OpenMM_Boolean)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:269</i>
     */
    public static void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> useCorrection) {
        OpenMM_AmoebaVdwForce_setUseDispersionCorrection(Pointer.getPeer(target), (int) useCorrection.value());
    }

    protected native static void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(@Ptr long target, int useCorrection);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setParticleExclusions(OpenMM_AmoebaVdwForce*, int, const OpenMM_IntArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:270</i>
     */
    public static void OpenMM_AmoebaVdwForce_setParticleExclusions(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int particleIndex, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> exclusions) {
        OpenMM_AmoebaVdwForce_setParticleExclusions(Pointer.getPeer(target), particleIndex, Pointer.getPeer(exclusions));
    }

    protected native static void OpenMM_AmoebaVdwForce_setParticleExclusions(@Ptr long target, int particleIndex, @Ptr long exclusions);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_getParticleExclusions(const OpenMM_AmoebaVdwForce*, int, OpenMM_IntArray*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:271</i>
     */
    public static void OpenMM_AmoebaVdwForce_getParticleExclusions(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, int particleIndex, Pointer<OpenMMLibrary.OpenMM_IntArray_struct> exclusions) {
        OpenMM_AmoebaVdwForce_getParticleExclusions(Pointer.getPeer(target), particleIndex, Pointer.getPeer(exclusions));
    }

    protected native static void OpenMM_AmoebaVdwForce_getParticleExclusions(@Ptr long target, int particleIndex, @Ptr long exclusions);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaVdwForce_getCutoffDistance(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:272</i>
     */
    public static double OpenMM_AmoebaVdwForce_getCutoffDistance(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return OpenMM_AmoebaVdwForce_getCutoffDistance(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaVdwForce_getCutoffDistance(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setCutoffDistance(OpenMM_AmoebaVdwForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:273</i>
     */
    public static void OpenMM_AmoebaVdwForce_setCutoffDistance(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, double distance) {
        OpenMM_AmoebaVdwForce_setCutoffDistance(Pointer.getPeer(target), distance);
    }

    protected native static void OpenMM_AmoebaVdwForce_setCutoffDistance(@Ptr long target, double distance);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setCutoff(OpenMM_AmoebaVdwForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:274</i>
     */
    public static void OpenMM_AmoebaVdwForce_setCutoff(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, double cutoff) {
        OpenMM_AmoebaVdwForce_setCutoff(Pointer.getPeer(target), cutoff);
    }

    protected native static void OpenMM_AmoebaVdwForce_setCutoff(@Ptr long target, double cutoff);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaVdwForce_getCutoff(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:275</i>
     */
    public static double OpenMM_AmoebaVdwForce_getCutoff(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return OpenMM_AmoebaVdwForce_getCutoff(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaVdwForce_getCutoff(@Ptr long target);

    /**
     * Original signature :
     * <code>OpenMM_AmoebaVdwForce_NonbondedMethod OpenMM_AmoebaVdwForce_getNonbondedMethod(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:276</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_AmoebaVdwForce_NonbondedMethod> OpenMM_AmoebaVdwForce_getNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaVdwForce_getNonbondedMethod(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_AmoebaVdwForce_NonbondedMethod.class);
    }

    protected native static int OpenMM_AmoebaVdwForce_getNonbondedMethod(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_setNonbondedMethod(OpenMM_AmoebaVdwForce*, OpenMM_AmoebaVdwForce_NonbondedMethod)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:277</i>
     */
    public static void OpenMM_AmoebaVdwForce_setNonbondedMethod(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, IntValuedEnum<OpenMMLibrary.OpenMM_AmoebaVdwForce_NonbondedMethod> method) {
        OpenMM_AmoebaVdwForce_setNonbondedMethod(Pointer.getPeer(target), (int) method.value());
    }

    protected native static void OpenMM_AmoebaVdwForce_setNonbondedMethod(@Ptr long target, int method);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaVdwForce_updateParametersInContext(OpenMM_AmoebaVdwForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:278</i>
     */
    public static void OpenMM_AmoebaVdwForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaVdwForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaVdwForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaVdwForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:279</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaVdwForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * AmoebaWcaDispersionForce<br>
     * Original signature :
     * <code>OpenMM_AmoebaWcaDispersionForce* OpenMM_AmoebaWcaDispersionForce_create()</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:282</i>
     */
    public static Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> OpenMM_AmoebaWcaDispersionForce_create() {
        return (Pointer) Pointer.pointerToAddress(OpenMM_AmoebaWcaDispersionForce_create$2(), OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct.class);
    }

    @Ptr
    @Name("OpenMM_AmoebaWcaDispersionForce_create")
    protected native static long OpenMM_AmoebaWcaDispersionForce_create$2();

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_destroy(OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:283</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_destroy(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        OpenMM_AmoebaWcaDispersionForce_destroy(Pointer.getPeer(target));
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_destroy(@Ptr long target);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaWcaDispersionForce_getNumParticles(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:284</i>
     */
    public static int OpenMM_AmoebaWcaDispersionForce_getNumParticles(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getNumParticles(Pointer.getPeer(target));
    }

    protected native static int OpenMM_AmoebaWcaDispersionForce_getNumParticles(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(OpenMM_AmoebaWcaDispersionForce*, int, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:285</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, int particleIndex, double radius, double epsilon) {
        OpenMM_AmoebaWcaDispersionForce_setParticleParameters(Pointer.getPeer(target), particleIndex, radius, epsilon);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(@Ptr long target, int particleIndex, double radius, double epsilon);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(const OpenMM_AmoebaWcaDispersionForce*, int, double*, double*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:286</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, int particleIndex, Pointer<Double> radius, Pointer<Double> epsilon) {
        OpenMM_AmoebaWcaDispersionForce_getParticleParameters(Pointer.getPeer(target), particleIndex, Pointer.getPeer(radius), Pointer.getPeer(epsilon));
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(@Ptr long target, int particleIndex, @Ptr long radius, @Ptr long epsilon);

    /**
     * Original signature :
     * <code>int OpenMM_AmoebaWcaDispersionForce_addParticle(OpenMM_AmoebaWcaDispersionForce*, double, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:287</i>
     */
    public static int OpenMM_AmoebaWcaDispersionForce_addParticle(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double radius, double epsilon) {
        return OpenMM_AmoebaWcaDispersionForce_addParticle(Pointer.getPeer(target), radius, epsilon);
    }

    protected native static int OpenMM_AmoebaWcaDispersionForce_addParticle(@Ptr long target, double radius, double epsilon);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(OpenMM_AmoebaWcaDispersionForce*, OpenMM_Context*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:288</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, Pointer<OpenMMLibrary.OpenMM_Context_struct> context) {
        OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(Pointer.getPeer(target), Pointer.getPeer(context));
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(@Ptr long target, @Ptr long context);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaWcaDispersionForce_getEpso(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:289</i>
     */
    public static double OpenMM_AmoebaWcaDispersionForce_getEpso(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getEpso(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaWcaDispersionForce_getEpso(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaWcaDispersionForce_getEpsh(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:290</i>
     */
    public static double OpenMM_AmoebaWcaDispersionForce_getEpsh(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getEpsh(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaWcaDispersionForce_getEpsh(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaWcaDispersionForce_getRmino(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:291</i>
     */
    public static double OpenMM_AmoebaWcaDispersionForce_getRmino(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getRmino(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaWcaDispersionForce_getRmino(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaWcaDispersionForce_getRminh(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:292</i>
     */
    public static double OpenMM_AmoebaWcaDispersionForce_getRminh(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getRminh(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaWcaDispersionForce_getRminh(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaWcaDispersionForce_getAwater(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:293</i>
     */
    public static double OpenMM_AmoebaWcaDispersionForce_getAwater(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getAwater(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaWcaDispersionForce_getAwater(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaWcaDispersionForce_getShctd(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:294</i>
     */
    public static double OpenMM_AmoebaWcaDispersionForce_getShctd(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getShctd(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaWcaDispersionForce_getShctd(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaWcaDispersionForce_getDispoff(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:295</i>
     */
    public static double OpenMM_AmoebaWcaDispersionForce_getDispoff(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getDispoff(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaWcaDispersionForce_getDispoff(@Ptr long target);

    /**
     * Original signature :
     * <code>double OpenMM_AmoebaWcaDispersionForce_getSlevy(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:296</i>
     */
    public static double OpenMM_AmoebaWcaDispersionForce_getSlevy(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return OpenMM_AmoebaWcaDispersionForce_getSlevy(Pointer.getPeer(target));
    }

    protected native static double OpenMM_AmoebaWcaDispersionForce_getSlevy(@Ptr long target);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setEpso(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:297</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setEpso(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double inputValue) {
        OpenMM_AmoebaWcaDispersionForce_setEpso(Pointer.getPeer(target), inputValue);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setEpso(@Ptr long target, double inputValue);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setEpsh(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:298</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setEpsh(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double inputValue) {
        OpenMM_AmoebaWcaDispersionForce_setEpsh(Pointer.getPeer(target), inputValue);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setEpsh(@Ptr long target, double inputValue);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setRmino(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:299</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setRmino(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double inputValue) {
        OpenMM_AmoebaWcaDispersionForce_setRmino(Pointer.getPeer(target), inputValue);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setRmino(@Ptr long target, double inputValue);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setRminh(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:300</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setRminh(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double inputValue) {
        OpenMM_AmoebaWcaDispersionForce_setRminh(Pointer.getPeer(target), inputValue);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setRminh(@Ptr long target, double inputValue);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setAwater(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:301</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setAwater(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double inputValue) {
        OpenMM_AmoebaWcaDispersionForce_setAwater(Pointer.getPeer(target), inputValue);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setAwater(@Ptr long target, double inputValue);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setShctd(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:302</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setShctd(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double inputValue) {
        OpenMM_AmoebaWcaDispersionForce_setShctd(Pointer.getPeer(target), inputValue);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setShctd(@Ptr long target, double inputValue);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setDispoff(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:303</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setDispoff(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double inputValue) {
        OpenMM_AmoebaWcaDispersionForce_setDispoff(Pointer.getPeer(target), inputValue);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setDispoff(@Ptr long target, double inputValue);

    /**
     * Original signature :
     * <code>void OpenMM_AmoebaWcaDispersionForce_setSlevy(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:304</i>
     */
    public static void OpenMM_AmoebaWcaDispersionForce_setSlevy(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target, double inputValue) {
        OpenMM_AmoebaWcaDispersionForce_setSlevy(Pointer.getPeer(target), inputValue);
    }

    protected native static void OpenMM_AmoebaWcaDispersionForce_setSlevy(@Ptr long target, double inputValue);

    /**
     * Original signature :
     * <code>OpenMM_Boolean OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
     * <i>native declaration : AmoebaOpenMMCWrapper.h:305</i>
     */
    public static IntValuedEnum<OpenMMLibrary.OpenMM_Boolean> OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(Pointer<OpenMMLibrary.OpenMM_AmoebaWcaDispersionForce_struct> target) {
        return FlagSet.fromValue(OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(Pointer.getPeer(target)), OpenMMLibrary.OpenMM_Boolean.class);
    }

    protected native static int OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(@Ptr long target);

    /**
     * Undefined type
     */
    public static interface OpenMM_ParameterArray_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_VariableVerletIntegrator_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaOutOfPlaneBendForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_TwoParticleAverageSite_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaVdwForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_PeriodicTorsionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomExternalForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_HarmonicAngleForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomNonbondedForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_RBTorsionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomBondForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_PropertyArray_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaAngleForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_2D_IntArray_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_MonteCarloBarostat_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomIntegrator_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaInPlaneAngleForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_System_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaPiTorsionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Context_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_MonteCarloMembraneBarostat_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_OpenMMException_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_OutOfPlaneSite_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Discrete1DFunction_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaTorsionTorsionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_IntSet_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CMAPTorsionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaBondForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_BrownianIntegrator_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_StringArray_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Force_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AndersenThermostat_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_LocalCoordinatesSite_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Continuous3DFunction_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_MonteCarloAnisotropicBarostat_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_VariableLangevinIntegrator_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_DoubleArray_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomCompoundBondForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomManyParticleForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaAngleTorsionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomHbondForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_GayBerneForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_BondArray_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_GBSAOBCForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaStretchBendForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CMMotionRemover_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Discrete3DFunction_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Continuous2DFunction_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaWcaDispersionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomAngleForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomCentroidBondForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomTorsionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaGeneralizedKirkwoodForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Integrator_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_VirtualSite_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_LocalEnergyMinimizer_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_VerletIntegrator_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaMultipoleForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_AmoebaStretchTorsionForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_State_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_3D_DoubleArray_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CustomGBForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_ThreeParticleAverageSite_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_IntArray_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_LangevinIntegrator_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Continuous1DFunction_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_NonbondedForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Vec3Array_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_CompoundIntegrator_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Platform_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_TabulatedFunction_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_HarmonicBondForce_struct {

    };

    /**
     * Undefined type
     */
    public static interface OpenMM_Discrete2DFunction_struct {
    };
}
