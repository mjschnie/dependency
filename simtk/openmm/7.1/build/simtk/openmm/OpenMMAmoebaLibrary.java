package simtk.openmm;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>OpenMMAmoeba</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface OpenMMAmoebaLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "OpenMMAmoeba";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(OpenMMAmoebaLibrary.JNA_LIBRARY_NAME);
	public static final OpenMMAmoebaLibrary INSTANCE = (OpenMMAmoebaLibrary)Native.loadLibrary(OpenMMAmoebaLibrary.JNA_LIBRARY_NAME, OpenMMAmoebaLibrary.class);
	/** enum values */
	public static interface OpenMM_AmoebaMultipoleForce_NonbondedMethod {
		public static final int OpenMM_AmoebaMultipoleForce_NoCutoff = 0;
		public static final int OpenMM_AmoebaMultipoleForce_PME = 1;
	};
	/** enum values */
	public static interface OpenMM_AmoebaMultipoleForce_PolarizationType {
		public static final int OpenMM_AmoebaMultipoleForce_Mutual = 0;
		public static final int OpenMM_AmoebaMultipoleForce_Direct = 1;
		public static final int OpenMM_AmoebaMultipoleForce_Extrapolated = 2;
	};
	/** enum values */
	public static interface OpenMM_AmoebaMultipoleForce_MultipoleAxisTypes {
		public static final int OpenMM_AmoebaMultipoleForce_ZThenX = 0;
		public static final int OpenMM_AmoebaMultipoleForce_Bisector = 1;
		public static final int OpenMM_AmoebaMultipoleForce_ZBisect = 2;
		public static final int OpenMM_AmoebaMultipoleForce_ThreeFold = 3;
		public static final int OpenMM_AmoebaMultipoleForce_ZOnly = 4;
		public static final int OpenMM_AmoebaMultipoleForce_NoAxisType = 5;
		public static final int OpenMM_AmoebaMultipoleForce_LastAxisTypeIndex = 6;
	};
	/** enum values */
	public static interface OpenMM_AmoebaMultipoleForce_CovalentType {
		public static final int OpenMM_AmoebaMultipoleForce_Covalent12 = 0;
		public static final int OpenMM_AmoebaMultipoleForce_Covalent13 = 1;
		public static final int OpenMM_AmoebaMultipoleForce_Covalent14 = 2;
		public static final int OpenMM_AmoebaMultipoleForce_Covalent15 = 3;
		public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent11 = 4;
		public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent12 = 5;
		public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent13 = 6;
		public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent14 = 7;
		public static final int OpenMM_AmoebaMultipoleForce_CovalentEnd = 8;
	};
	/** enum values */
	public static interface OpenMM_AmoebaVdwForce_NonbondedMethod {
		public static final int OpenMM_AmoebaVdwForce_NoCutoff = 0;
		public static final int OpenMM_AmoebaVdwForce_CutoffPeriodic = 1;
	};
	/** Global Constants */
	public static final double OpenMM_NmPerAngstrom = 0.1;
	public static final double OpenMM_AngstromsPerNm = 10.0;
	public static final double OpenMM_PsPerFs = 0.001;
	public static final double OpenMM_FsPerPs = 1000.0;
	public static final double OpenMM_KJPerKcal = 4.184;
	public static final double OpenMM_KcalPerKJ = 1.0 / 4.184;
	public static final double OpenMM_RadiansPerDegree = 3.1415926535897932385 / 180.0;
	public static final double OpenMM_DegreesPerRadian = 180.0 / 3.1415926535897932385;
	public static final double OpenMM_SigmaPerVdwRadius = 1.7817974362806786095;
	/**
	 * OpenMM_3D_DoubleArray<br>
	 * Original signature : <code>OpenMM_3D_DoubleArray* OpenMM_3D_DoubleArray_create(int, int, int)</code>
	 */
	PointerByReference OpenMM_3D_DoubleArray_create(int size1, int size2, int size3);
	/**
	 * Original signature : <code>void OpenMM_3D_DoubleArray_set(OpenMM_3D_DoubleArray*, int, int, OpenMM_DoubleArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_3D_DoubleArray_set(com.sun.jna.ptr.PointerByReference, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_3D_DoubleArray_set(Pointer array, int index1, int index2, Pointer values);
	/** Original signature : <code>void OpenMM_3D_DoubleArray_set(OpenMM_3D_DoubleArray*, int, int, OpenMM_DoubleArray*)</code> */
	void OpenMM_3D_DoubleArray_set(PointerByReference array, int index1, int index2, PointerByReference values);
	/**
	 * Original signature : <code>void OpenMM_3D_DoubleArray_destroy(OpenMM_3D_DoubleArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_3D_DoubleArray_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_3D_DoubleArray_destroy(Pointer array);
	/** Original signature : <code>void OpenMM_3D_DoubleArray_destroy(OpenMM_3D_DoubleArray*)</code> */
	void OpenMM_3D_DoubleArray_destroy(PointerByReference array);
	/**
	 * AmoebaAngleForce<br>
	 * Original signature : <code>OpenMM_AmoebaAngleForce* OpenMM_AmoebaAngleForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaAngleForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_destroy(OpenMM_AmoebaAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_destroy(OpenMM_AmoebaAngleForce*)</code> */
	void OpenMM_AmoebaAngleForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaAngleForce_getNumAngles(const OpenMM_AmoebaAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_getNumAngles(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaAngleForce_getNumAngles(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaAngleForce_getNumAngles(const OpenMM_AmoebaAngleForce*)</code> */
	int OpenMM_AmoebaAngleForce_getNumAngles(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(OpenMM_AmoebaAngleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(Pointer target, double cubicK);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(OpenMM_AmoebaAngleForce*, double)</code> */
	void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleCubic(PointerByReference target, double cubicK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(const OpenMM_AmoebaAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(const OpenMM_AmoebaAngleForce*)</code> */
	double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleCubic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(OpenMM_AmoebaAngleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(Pointer target, double quarticK);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(OpenMM_AmoebaAngleForce*, double)</code> */
	void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleQuartic(PointerByReference target, double quarticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(const OpenMM_AmoebaAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(const OpenMM_AmoebaAngleForce*)</code> */
	double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleQuartic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(OpenMM_AmoebaAngleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(Pointer target, double penticK);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(OpenMM_AmoebaAngleForce*, double)</code> */
	void OpenMM_AmoebaAngleForce_setAmoebaGlobalAnglePentic(PointerByReference target, double penticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(const OpenMM_AmoebaAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(const OpenMM_AmoebaAngleForce*)</code> */
	double OpenMM_AmoebaAngleForce_getAmoebaGlobalAnglePentic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(OpenMM_AmoebaAngleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(Pointer target, double sexticK);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(OpenMM_AmoebaAngleForce*, double)</code> */
	void OpenMM_AmoebaAngleForce_setAmoebaGlobalAngleSextic(PointerByReference target, double sexticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(const OpenMM_AmoebaAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(const OpenMM_AmoebaAngleForce*)</code> */
	double OpenMM_AmoebaAngleForce_getAmoebaGlobalAngleSextic(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaAngleForce_addAngle(OpenMM_AmoebaAngleForce*, int, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_addAngle(com.sun.jna.ptr.PointerByReference, int, int, int, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaAngleForce_addAngle(Pointer target, int particle1, int particle2, int particle3, double length, double quadraticK);
	/** Original signature : <code>int OpenMM_AmoebaAngleForce_addAngle(OpenMM_AmoebaAngleForce*, int, int, int, double, double)</code> */
	int OpenMM_AmoebaAngleForce_addAngle(PointerByReference target, int particle1, int particle2, int particle3, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_getAngleParameters(const OpenMM_AmoebaAngleForce*, int, int*, int*, int*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaAngleForce_getAngleParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaAngleForce_getAngleParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_getAngleParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, DoubleByReference length, DoubleByReference quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_getAngleParameters(const OpenMM_AmoebaAngleForce*, int, int*, int*, int*, double*, double*)</code> */
	void OpenMM_AmoebaAngleForce_getAngleParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, DoubleBuffer length, DoubleBuffer quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_getAngleParameters(const OpenMM_AmoebaAngleForce*, int, int*, int*, int*, double*, double*)</code> */
	void OpenMM_AmoebaAngleForce_getAngleParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, DoubleByReference length, DoubleByReference quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setAngleParameters(OpenMM_AmoebaAngleForce*, int, int, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_setAngleParameters(com.sun.jna.ptr.PointerByReference, int, int, int, int, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_setAngleParameters(Pointer target, int index, int particle1, int particle2, int particle3, double length, double quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_setAngleParameters(OpenMM_AmoebaAngleForce*, int, int, int, int, double, double)</code> */
	void OpenMM_AmoebaAngleForce_setAngleParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_updateParametersInContext(OpenMM_AmoebaAngleForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_updateParametersInContext(OpenMM_AmoebaAngleForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaAngleForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaAngleForce*, OpenMM_Boolean)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(Pointer target, int periodic);
	/** Original signature : <code>void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaAngleForce*, OpenMM_Boolean)</code> */
	void OpenMM_AmoebaAngleForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaAngleForce*)</code> */
	int OpenMM_AmoebaAngleForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaAngleTorsionForce<br>
	 * Original signature : <code>OpenMM_AmoebaAngleTorsionForce* OpenMM_AmoebaAngleTorsionForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaAngleTorsionForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_destroy(OpenMM_AmoebaAngleTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleTorsionForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleTorsionForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_destroy(OpenMM_AmoebaAngleTorsionForce*)</code> */
	void OpenMM_AmoebaAngleTorsionForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(const OpenMM_AmoebaAngleTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(const OpenMM_AmoebaAngleTorsionForce*)</code> */
	int OpenMM_AmoebaAngleTorsionForce_getNumAngleTorsions(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(OpenMM_AmoebaAngleTorsionForce*, int, int, int, int, double, double, double, double, double, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(com.sun.jna.ptr.PointerByReference, int, int, int, int, double, double, double, double, double, double, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(Pointer target, int particle1, int particle2, int particle3, int particle4, double angleCBA, double angleDCB, double k1, double k2, double k3, double k4, double k5, double k6);
	/** Original signature : <code>int OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(OpenMM_AmoebaAngleTorsionForce*, int, int, int, int, double, double, double, double, double, double, double, double)</code> */
	int OpenMM_AmoebaAngleTorsionForce_addAngleTorsion(PointerByReference target, int particle1, int particle2, int particle3, int particle4, double angleCBA, double angleDCB, double k1, double k2, double k3, double k4, double k5, double k6);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(const OpenMM_AmoebaAngleTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference angleCBA, DoubleByReference angleDCB, DoubleByReference k1, DoubleByReference k2, DoubleByReference k3, DoubleByReference k4, DoubleByReference k5, DoubleByReference k6);
	/** Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(const OpenMM_AmoebaAngleTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*)</code> */
	void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, DoubleBuffer angleCBA, DoubleBuffer angleDCB, DoubleBuffer k1, DoubleBuffer k2, DoubleBuffer k3, DoubleBuffer k4, DoubleBuffer k5, DoubleBuffer k6);
	/** Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(const OpenMM_AmoebaAngleTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*)</code> */
	void OpenMM_AmoebaAngleTorsionForce_getAngleTorsionParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference angleCBA, DoubleByReference angleDCB, DoubleByReference k1, DoubleByReference k2, DoubleByReference k3, DoubleByReference k4, DoubleByReference k5, DoubleByReference k6);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(OpenMM_AmoebaAngleTorsionForce*, int, int, int, int, int, double, double, double, double, double, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, double, double, double, double, double, double, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(Pointer target, int index, int particle1, int particle2, int particle3, int particle4, double angleCBA, double angleDCB, double k1, double k2, double k3, double k4, double k5, double k6);
	/** Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(OpenMM_AmoebaAngleTorsionForce*, int, int, int, int, int, double, double, double, double, double, double, double, double)</code> */
	void OpenMM_AmoebaAngleTorsionForce_setAngleTorsionParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, double angleCBA, double angleDCB, double k1, double k2, double k3, double k4, double k5, double k6);
	/**
	 * Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(OpenMM_AmoebaAngleTorsionForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(OpenMM_AmoebaAngleTorsionForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaAngleTorsionForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaAngleTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaAngleTorsionForce*)</code> */
	int OpenMM_AmoebaAngleTorsionForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaBondForce<br>
	 * Original signature : <code>OpenMM_AmoebaBondForce* OpenMM_AmoebaBondForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaBondForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_destroy(OpenMM_AmoebaBondForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaBondForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaBondForce_destroy(OpenMM_AmoebaBondForce*)</code> */
	void OpenMM_AmoebaBondForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaBondForce_getNumBonds(const OpenMM_AmoebaBondForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_getNumBonds(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaBondForce_getNumBonds(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaBondForce_getNumBonds(const OpenMM_AmoebaBondForce*)</code> */
	int OpenMM_AmoebaBondForce_getNumBonds(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(OpenMM_AmoebaBondForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(Pointer target, double cubicK);
	/** Original signature : <code>void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(OpenMM_AmoebaBondForce*, double)</code> */
	void OpenMM_AmoebaBondForce_setAmoebaGlobalBondCubic(PointerByReference target, double cubicK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(const OpenMM_AmoebaBondForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(const OpenMM_AmoebaBondForce*)</code> */
	double OpenMM_AmoebaBondForce_getAmoebaGlobalBondCubic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(OpenMM_AmoebaBondForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(Pointer target, double quarticK);
	/** Original signature : <code>void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(OpenMM_AmoebaBondForce*, double)</code> */
	void OpenMM_AmoebaBondForce_setAmoebaGlobalBondQuartic(PointerByReference target, double quarticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(const OpenMM_AmoebaBondForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(const OpenMM_AmoebaBondForce*)</code> */
	double OpenMM_AmoebaBondForce_getAmoebaGlobalBondQuartic(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaBondForce_addBond(OpenMM_AmoebaBondForce*, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_addBond(com.sun.jna.ptr.PointerByReference, int, int, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaBondForce_addBond(Pointer target, int particle1, int particle2, double length, double quadraticK);
	/** Original signature : <code>int OpenMM_AmoebaBondForce_addBond(OpenMM_AmoebaBondForce*, int, int, double, double)</code> */
	int OpenMM_AmoebaBondForce_addBond(PointerByReference target, int particle1, int particle2, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_getBondParameters(const OpenMM_AmoebaBondForce*, int, int*, int*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaBondForce_getBondParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaBondForce_getBondParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaBondForce_getBondParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, DoubleByReference length, DoubleByReference quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaBondForce_getBondParameters(const OpenMM_AmoebaBondForce*, int, int*, int*, double*, double*)</code> */
	void OpenMM_AmoebaBondForce_getBondParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, DoubleBuffer length, DoubleBuffer quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaBondForce_getBondParameters(const OpenMM_AmoebaBondForce*, int, int*, int*, double*, double*)</code> */
	void OpenMM_AmoebaBondForce_getBondParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, DoubleByReference length, DoubleByReference quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_setBondParameters(OpenMM_AmoebaBondForce*, int, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_setBondParameters(com.sun.jna.ptr.PointerByReference, int, int, int, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaBondForce_setBondParameters(Pointer target, int index, int particle1, int particle2, double length, double quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaBondForce_setBondParameters(OpenMM_AmoebaBondForce*, int, int, int, double, double)</code> */
	void OpenMM_AmoebaBondForce_setBondParameters(PointerByReference target, int index, int particle1, int particle2, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_updateParametersInContext(OpenMM_AmoebaBondForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaBondForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaBondForce_updateParametersInContext(OpenMM_AmoebaBondForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaBondForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaBondForce*, OpenMM_Boolean)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(Pointer target, int periodic);
	/** Original signature : <code>void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaBondForce*, OpenMM_Boolean)</code> */
	void OpenMM_AmoebaBondForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaBondForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaBondForce*)</code> */
	int OpenMM_AmoebaBondForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaGeneralizedKirkwoodForce<br>
	 * Original signature : <code>OpenMM_AmoebaGeneralizedKirkwoodForce* OpenMM_AmoebaGeneralizedKirkwoodForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaGeneralizedKirkwoodForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(OpenMM_AmoebaGeneralizedKirkwoodForce*)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code> */
	int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(OpenMM_AmoebaGeneralizedKirkwoodForce*, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(com.sun.jna.ptr.PointerByReference, double, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(Pointer target, double charge, double radius, double scalingFactor);
	/** Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(OpenMM_AmoebaGeneralizedKirkwoodForce*, double, double, double)</code> */
	int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(PointerByReference target, double charge, double radius, double scalingFactor);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(Pointer target, int index, DoubleByReference charge, DoubleByReference radius, DoubleByReference scalingFactor);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(PointerByReference target, int index, DoubleBuffer charge, DoubleBuffer radius, DoubleBuffer scalingFactor);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(PointerByReference target, int index, DoubleByReference charge, DoubleByReference radius, DoubleByReference scalingFactor);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(com.sun.jna.ptr.PointerByReference, int, double, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(Pointer target, int index, double charge, double radius, double scalingFactor);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double, double, double)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(PointerByReference target, int index, double charge, double radius, double scalingFactor);
	/**
	 * Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code> */
	double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(Pointer target, double dielectric);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(PointerByReference target, double dielectric);
	/**
	 * Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code> */
	double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(Pointer target, double dielectric);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(PointerByReference target, double dielectric);
	/**
	 * Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code> */
	int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(OpenMM_AmoebaGeneralizedKirkwoodForce*, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(Pointer target, int includeCavityTerm);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(OpenMM_AmoebaGeneralizedKirkwoodForce*, int)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(PointerByReference target, int includeCavityTerm);
	/**
	 * Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code> */
	double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(Pointer target, double probeRadius);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(PointerByReference target, double probeRadius);
	/**
	 * Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code> */
	double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(Pointer target, double surfaceAreaFactor);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(PointerByReference target, double surfaceAreaFactor);
	/**
	 * Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(OpenMM_AmoebaGeneralizedKirkwoodForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(OpenMM_AmoebaGeneralizedKirkwoodForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaGeneralizedKirkwoodForce*)</code> */
	int OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaInPlaneAngleForce<br>
	 * Original signature : <code>OpenMM_AmoebaInPlaneAngleForce* OpenMM_AmoebaInPlaneAngleForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaInPlaneAngleForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_destroy(OpenMM_AmoebaInPlaneAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_destroy(OpenMM_AmoebaInPlaneAngleForce*)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_getNumAngles(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(const OpenMM_AmoebaInPlaneAngleForce*)</code> */
	int OpenMM_AmoebaInPlaneAngleForce_getNumAngles(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(OpenMM_AmoebaInPlaneAngleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(Pointer target, double cubicK);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(OpenMM_AmoebaInPlaneAngleForce*, double)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleCubic(PointerByReference target, double cubicK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(const OpenMM_AmoebaInPlaneAngleForce*)</code> */
	double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleCubic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(OpenMM_AmoebaInPlaneAngleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(Pointer target, double quarticK);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(OpenMM_AmoebaInPlaneAngleForce*, double)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleQuartic(PointerByReference target, double quarticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(const OpenMM_AmoebaInPlaneAngleForce*)</code> */
	double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleQuartic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(OpenMM_AmoebaInPlaneAngleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(Pointer target, double penticK);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(OpenMM_AmoebaInPlaneAngleForce*, double)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAnglePentic(PointerByReference target, double penticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(const OpenMM_AmoebaInPlaneAngleForce*)</code> */
	double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAnglePentic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(OpenMM_AmoebaInPlaneAngleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(Pointer target, double sexticK);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(OpenMM_AmoebaInPlaneAngleForce*, double)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_setAmoebaGlobalInPlaneAngleSextic(PointerByReference target, double sexticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(const OpenMM_AmoebaInPlaneAngleForce*)</code> */
	double OpenMM_AmoebaInPlaneAngleForce_getAmoebaGlobalInPlaneAngleSextic(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaInPlaneAngleForce_addAngle(OpenMM_AmoebaInPlaneAngleForce*, int, int, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_addAngle(com.sun.jna.ptr.PointerByReference, int, int, int, int, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaInPlaneAngleForce_addAngle(Pointer target, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK);
	/** Original signature : <code>int OpenMM_AmoebaInPlaneAngleForce_addAngle(OpenMM_AmoebaInPlaneAngleForce*, int, int, int, int, double, double)</code> */
	int OpenMM_AmoebaInPlaneAngleForce_addAngle(PointerByReference target, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(const OpenMM_AmoebaInPlaneAngleForce*, int, int*, int*, int*, int*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference length, DoubleByReference quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(const OpenMM_AmoebaInPlaneAngleForce*, int, int*, int*, int*, int*, double*, double*)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, DoubleBuffer length, DoubleBuffer quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(const OpenMM_AmoebaInPlaneAngleForce*, int, int*, int*, int*, int*, double*, double*)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_getAngleParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference length, DoubleByReference quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(OpenMM_AmoebaInPlaneAngleForce*, int, int, int, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(Pointer target, int index, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(OpenMM_AmoebaInPlaneAngleForce*, int, int, int, int, int, double, double)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_setAngleParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(OpenMM_AmoebaInPlaneAngleForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(OpenMM_AmoebaInPlaneAngleForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaInPlaneAngleForce*, OpenMM_Boolean)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(Pointer target, int periodic);
	/** Original signature : <code>void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaInPlaneAngleForce*, OpenMM_Boolean)</code> */
	void OpenMM_AmoebaInPlaneAngleForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaInPlaneAngleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaInPlaneAngleForce*)</code> */
	int OpenMM_AmoebaInPlaneAngleForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/** Original signature : <code>OpenMM_AmoebaMultipoleForce* OpenMM_AmoebaMultipoleForce_create()</code> */
	PointerByReference OpenMM_AmoebaMultipoleForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_destroy(OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_destroy(OpenMM_AmoebaMultipoleForce*)</code> */
	void OpenMM_AmoebaMultipoleForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaMultipoleForce_getNumMultipoles(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getNumMultipoles(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaMultipoleForce_getNumMultipoles(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaMultipoleForce_getNumMultipoles(const OpenMM_AmoebaMultipoleForce*)</code> */
	int OpenMM_AmoebaMultipoleForce_getNumMultipoles(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_AmoebaMultipoleForce_NonbondedMethod OpenMM_AmoebaMultipoleForce_getNonbondedMethod(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getNonbondedMethod(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaMultipoleForce_getNonbondedMethod(Pointer target);
	/** Original signature : <code>OpenMM_AmoebaMultipoleForce_NonbondedMethod OpenMM_AmoebaMultipoleForce_getNonbondedMethod(const OpenMM_AmoebaMultipoleForce*)</code> */
	int OpenMM_AmoebaMultipoleForce_getNonbondedMethod(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_NonbondedMethod)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setNonbondedMethod(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(Pointer target, int method);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_NonbondedMethod)</code> */
	void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(PointerByReference target, int method);
	/**
	 * Original signature : <code>OpenMM_AmoebaMultipoleForce_PolarizationType OpenMM_AmoebaMultipoleForce_getPolarizationType(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getPolarizationType(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaMultipoleForce_getPolarizationType(Pointer target);
	/** Original signature : <code>OpenMM_AmoebaMultipoleForce_PolarizationType OpenMM_AmoebaMultipoleForce_getPolarizationType(const OpenMM_AmoebaMultipoleForce*)</code> */
	int OpenMM_AmoebaMultipoleForce_getPolarizationType(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPolarizationType(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_PolarizationType)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setPolarizationType(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setPolarizationType(Pointer target, int type);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPolarizationType(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_PolarizationType)</code> */
	void OpenMM_AmoebaMultipoleForce_setPolarizationType(PointerByReference target, int type);
	/**
	 * Original signature : <code>double OpenMM_AmoebaMultipoleForce_getCutoffDistance(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getCutoffDistance(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaMultipoleForce_getCutoffDistance(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaMultipoleForce_getCutoffDistance(const OpenMM_AmoebaMultipoleForce*)</code> */
	double OpenMM_AmoebaMultipoleForce_getCutoffDistance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setCutoffDistance(OpenMM_AmoebaMultipoleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setCutoffDistance(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setCutoffDistance(Pointer target, double distance);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setCutoffDistance(OpenMM_AmoebaMultipoleForce*, double)</code> */
	void OpenMM_AmoebaMultipoleForce_setCutoffDistance(PointerByReference target, double distance);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParameters(const OpenMM_AmoebaMultipoleForce*, double*, int*, int*, int*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaMultipoleForce_getPMEParameters(com.sun.jna.ptr.PointerByReference, java.nio.DoubleBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #OpenMM_AmoebaMultipoleForce_getPMEParameters(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getPMEParameters(Pointer target, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParameters(const OpenMM_AmoebaMultipoleForce*, double*, int*, int*, int*)</code> */
	void OpenMM_AmoebaMultipoleForce_getPMEParameters(PointerByReference target, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParameters(const OpenMM_AmoebaMultipoleForce*, double*, int*, int*, int*)</code> */
	void OpenMM_AmoebaMultipoleForce_getPMEParameters(PointerByReference target, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPMEParameters(OpenMM_AmoebaMultipoleForce*, double, int, int, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setPMEParameters(com.sun.jna.ptr.PointerByReference, double, int, int, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setPMEParameters(Pointer target, double alpha, int nx, int ny, int nz);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPMEParameters(OpenMM_AmoebaMultipoleForce*, double, int, int, int)</code> */
	void OpenMM_AmoebaMultipoleForce_setPMEParameters(PointerByReference target, double alpha, int nx, int ny, int nz);
	/**
	 * Original signature : <code>double OpenMM_AmoebaMultipoleForce_getAEwald(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getAEwald(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaMultipoleForce_getAEwald(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaMultipoleForce_getAEwald(const OpenMM_AmoebaMultipoleForce*)</code> */
	double OpenMM_AmoebaMultipoleForce_getAEwald(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setAEwald(OpenMM_AmoebaMultipoleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setAEwald(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setAEwald(Pointer target, double aewald);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setAEwald(OpenMM_AmoebaMultipoleForce*, double)</code> */
	void OpenMM_AmoebaMultipoleForce_setAEwald(PointerByReference target, double aewald);
	/**
	 * Original signature : <code>int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(const OpenMM_AmoebaMultipoleForce*)</code> */
	int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(const OpenMM_AmoebaMultipoleForce*, OpenMM_IntArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(Pointer target, Pointer gridDimension);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(const OpenMM_AmoebaMultipoleForce*, OpenMM_IntArray*)</code> */
	void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(PointerByReference target, PointerByReference gridDimension);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(OpenMM_AmoebaMultipoleForce*, const OpenMM_IntArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(Pointer target, Pointer gridDimension);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(OpenMM_AmoebaMultipoleForce*, const OpenMM_IntArray*)</code> */
	void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(PointerByReference target, PointerByReference gridDimension);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(const OpenMM_AmoebaMultipoleForce*, const OpenMM_Context*, double*, int*, int*, int*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, java.nio.DoubleBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(Pointer target, Pointer context, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(const OpenMM_AmoebaMultipoleForce*, const OpenMM_Context*, double*, int*, int*, int*)</code> */
	void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(PointerByReference target, PointerByReference context, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(const OpenMM_AmoebaMultipoleForce*, const OpenMM_Context*, double*, int*, int*, int*)</code> */
	void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(PointerByReference target, PointerByReference context, DoubleByReference alpha, IntByReference nx, IntByReference ny, IntByReference nz);
	/**
	 * Original signature : <code>int OpenMM_AmoebaMultipoleForce_addMultipole(OpenMM_AmoebaMultipoleForce*, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_addMultipole(com.sun.jna.ptr.PointerByReference, double, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, int, int, int, double, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaMultipoleForce_addMultipole(Pointer target, double charge, Pointer molecularDipole, Pointer molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity);
	/** Original signature : <code>int OpenMM_AmoebaMultipoleForce_addMultipole(OpenMM_AmoebaMultipoleForce*, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)</code> */
	int OpenMM_AmoebaMultipoleForce_addMultipole(PointerByReference target, double charge, PointerByReference molecularDipole, PointerByReference molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(const OpenMM_AmoebaMultipoleForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, int*, int*, int*, int*, double*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaMultipoleForce_getMultipoleParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.DoubleBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaMultipoleForce_getMultipoleParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(Pointer target, int index, DoubleByReference charge, Pointer molecularDipole, Pointer molecularQuadrupole, IntByReference axisType, IntByReference multipoleAtomZ, IntByReference multipoleAtomX, IntByReference multipoleAtomY, DoubleByReference thole, DoubleByReference dampingFactor, DoubleByReference polarity);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(const OpenMM_AmoebaMultipoleForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, int*, int*, int*, int*, double*, double*, double*)</code> */
	void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(PointerByReference target, int index, DoubleBuffer charge, PointerByReference molecularDipole, PointerByReference molecularQuadrupole, IntBuffer axisType, IntBuffer multipoleAtomZ, IntBuffer multipoleAtomX, IntBuffer multipoleAtomY, DoubleBuffer thole, DoubleBuffer dampingFactor, DoubleBuffer polarity);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(const OpenMM_AmoebaMultipoleForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, int*, int*, int*, int*, double*, double*, double*)</code> */
	void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(PointerByReference target, int index, DoubleByReference charge, PointerByReference molecularDipole, PointerByReference molecularQuadrupole, IntByReference axisType, IntByReference multipoleAtomZ, IntByReference multipoleAtomX, IntByReference multipoleAtomY, DoubleByReference thole, DoubleByReference dampingFactor, DoubleByReference polarity);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(OpenMM_AmoebaMultipoleForce*, int, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setMultipoleParameters(com.sun.jna.ptr.PointerByReference, int, double, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, int, int, int, double, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(Pointer target, int index, double charge, Pointer molecularDipole, Pointer molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(OpenMM_AmoebaMultipoleForce*, int, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)</code> */
	void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(PointerByReference target, int index, double charge, PointerByReference molecularDipole, PointerByReference molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setCovalentMap(OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, const OpenMM_IntArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setCovalentMap(com.sun.jna.ptr.PointerByReference, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setCovalentMap(Pointer target, int index, int typeId, Pointer covalentAtoms);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setCovalentMap(OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, const OpenMM_IntArray*)</code> */
	void OpenMM_AmoebaMultipoleForce_setCovalentMap(PointerByReference target, int index, int typeId, PointerByReference covalentAtoms);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getCovalentMap(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, OpenMM_IntArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getCovalentMap(com.sun.jna.ptr.PointerByReference, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getCovalentMap(Pointer target, int index, int typeId, Pointer covalentAtoms);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getCovalentMap(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, OpenMM_IntArray*)</code> */
	void OpenMM_AmoebaMultipoleForce_getCovalentMap(PointerByReference target, int index, int typeId, PointerByReference covalentAtoms);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getCovalentMaps(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_2D_IntArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getCovalentMaps(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getCovalentMaps(Pointer target, int index, Pointer covalentLists);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getCovalentMaps(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_2D_IntArray*)</code> */
	void OpenMM_AmoebaMultipoleForce_getCovalentMaps(PointerByReference target, int index, PointerByReference covalentLists);
	/**
	 * Original signature : <code>int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(const OpenMM_AmoebaMultipoleForce*)</code> */
	int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(OpenMM_AmoebaMultipoleForce*, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(Pointer target, int inputMutualInducedMaxIterations);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(OpenMM_AmoebaMultipoleForce*, int)</code> */
	void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(PointerByReference target, int inputMutualInducedMaxIterations);
	/**
	 * Original signature : <code>double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(const OpenMM_AmoebaMultipoleForce*)</code> */
	double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(OpenMM_AmoebaMultipoleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(Pointer target, double inputMutualInducedTargetEpsilon);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(OpenMM_AmoebaMultipoleForce*, double)</code> */
	void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(PointerByReference target, double inputMutualInducedTargetEpsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(OpenMM_AmoebaMultipoleForce*, const OpenMM_DoubleArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(Pointer target, Pointer coefficients);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(OpenMM_AmoebaMultipoleForce*, const OpenMM_DoubleArray*)</code> */
	void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(PointerByReference target, PointerByReference coefficients);
	/**
	 * Original signature : <code>OpenMM_DoubleArray* OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	PointerByReference OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(Pointer target);
	/** Original signature : <code>OpenMM_DoubleArray* OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(const OpenMM_AmoebaMultipoleForce*)</code> */
	PointerByReference OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(const OpenMM_AmoebaMultipoleForce*)</code> */
	double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(OpenMM_AmoebaMultipoleForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(Pointer target, double tol);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(OpenMM_AmoebaMultipoleForce*, double)</code> */
	void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(PointerByReference target, double tol);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(Pointer target, Pointer context, Pointer dipoles);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code> */
	void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(PointerByReference target, PointerByReference context, PointerByReference dipoles);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getInducedDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getInducedDipoles(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getInducedDipoles(Pointer target, Pointer context, Pointer dipoles);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getInducedDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code> */
	void OpenMM_AmoebaMultipoleForce_getInducedDipoles(PointerByReference target, PointerByReference context, PointerByReference dipoles);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getTotalDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getTotalDipoles(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getTotalDipoles(Pointer target, Pointer context, Pointer dipoles);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getTotalDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)</code> */
	void OpenMM_AmoebaMultipoleForce_getTotalDipoles(PointerByReference target, PointerByReference context, PointerByReference dipoles);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(OpenMM_AmoebaMultipoleForce*, const OpenMM_Vec3Array*, OpenMM_Context*, OpenMM_DoubleArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(Pointer target, Pointer inputGrid, Pointer context, Pointer outputElectrostaticPotential);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(OpenMM_AmoebaMultipoleForce*, const OpenMM_Vec3Array*, OpenMM_Context*, OpenMM_DoubleArray*)</code> */
	void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(PointerByReference target, PointerByReference inputGrid, PointerByReference context, PointerByReference outputElectrostaticPotential);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_DoubleArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(Pointer target, Pointer context, Pointer outputMultipoleMoments);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_DoubleArray*)</code> */
	void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(PointerByReference target, PointerByReference context, PointerByReference outputMultipoleMoments);
	/**
	 * Original signature : <code>void OpenMM_AmoebaMultipoleForce_updateParametersInContext(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaMultipoleForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaMultipoleForce_updateParametersInContext(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaMultipoleForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaMultipoleForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaMultipoleForce*)</code> */
	int OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaOutOfPlaneBendForce<br>
	 * Original signature : <code>OpenMM_AmoebaOutOfPlaneBendForce* OpenMM_AmoebaOutOfPlaneBendForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaOutOfPlaneBendForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_destroy(OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_destroy(OpenMM_AmoebaOutOfPlaneBendForce*)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(const OpenMM_AmoebaOutOfPlaneBendForce*)</code> */
	int OpenMM_AmoebaOutOfPlaneBendForce_getNumOutOfPlaneBends(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(Pointer target, double cubicK);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendCubic(PointerByReference target, double cubicK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code> */
	double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendCubic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(Pointer target, double quarticK);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendQuartic(PointerByReference target, double quarticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code> */
	double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendQuartic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(Pointer target, double penticK);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendPentic(PointerByReference target, double penticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code> */
	double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendPentic(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(Pointer target, double sexticK);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(OpenMM_AmoebaOutOfPlaneBendForce*, double)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_setAmoebaGlobalOutOfPlaneBendSextic(PointerByReference target, double sexticK);
	/**
	 * Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(const OpenMM_AmoebaOutOfPlaneBendForce*)</code> */
	double OpenMM_AmoebaOutOfPlaneBendForce_getAmoebaGlobalOutOfPlaneBendSextic(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(OpenMM_AmoebaOutOfPlaneBendForce*, int, int, int, int, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(com.sun.jna.ptr.PointerByReference, int, int, int, int, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(Pointer target, int particle1, int particle2, int particle3, int particle4, double k);
	/** Original signature : <code>int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(OpenMM_AmoebaOutOfPlaneBendForce*, int, int, int, int, double)</code> */
	int OpenMM_AmoebaOutOfPlaneBendForce_addOutOfPlaneBend(PointerByReference target, int particle1, int particle2, int particle3, int particle4, double k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(const OpenMM_AmoebaOutOfPlaneBendForce*, int, int*, int*, int*, int*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference k);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(const OpenMM_AmoebaOutOfPlaneBendForce*, int, int*, int*, int*, int*, double*)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, DoubleBuffer k);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(const OpenMM_AmoebaOutOfPlaneBendForce*, int, int*, int*, int*, int*, double*)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_getOutOfPlaneBendParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(OpenMM_AmoebaOutOfPlaneBendForce*, int, int, int, int, int, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(Pointer target, int index, int particle1, int particle2, int particle3, int particle4, double k);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(OpenMM_AmoebaOutOfPlaneBendForce*, int, int, int, int, int, double)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_setOutOfPlaneBendParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, double k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(OpenMM_AmoebaOutOfPlaneBendForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(OpenMM_AmoebaOutOfPlaneBendForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaOutOfPlaneBendForce*, OpenMM_Boolean)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(Pointer target, int periodic);
	/** Original signature : <code>void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaOutOfPlaneBendForce*, OpenMM_Boolean)</code> */
	void OpenMM_AmoebaOutOfPlaneBendForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaOutOfPlaneBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaOutOfPlaneBendForce*)</code> */
	int OpenMM_AmoebaOutOfPlaneBendForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaPiTorsionForce<br>
	 * Original signature : <code>OpenMM_AmoebaPiTorsionForce* OpenMM_AmoebaPiTorsionForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaPiTorsionForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_destroy(OpenMM_AmoebaPiTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaPiTorsionForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaPiTorsionForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaPiTorsionForce_destroy(OpenMM_AmoebaPiTorsionForce*)</code> */
	void OpenMM_AmoebaPiTorsionForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(const OpenMM_AmoebaPiTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(const OpenMM_AmoebaPiTorsionForce*)</code> */
	int OpenMM_AmoebaPiTorsionForce_getNumPiTorsions(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaPiTorsionForce_addPiTorsion(OpenMM_AmoebaPiTorsionForce*, int, int, int, int, int, int, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaPiTorsionForce_addPiTorsion(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, int, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaPiTorsionForce_addPiTorsion(Pointer target, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k);
	/** Original signature : <code>int OpenMM_AmoebaPiTorsionForce_addPiTorsion(OpenMM_AmoebaPiTorsionForce*, int, int, int, int, int, int, double)</code> */
	int OpenMM_AmoebaPiTorsionForce_addPiTorsion(PointerByReference target, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(const OpenMM_AmoebaPiTorsionForce*, int, int*, int*, int*, int*, int*, int*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, IntByReference particle5, IntByReference particle6, DoubleByReference k);
	/** Original signature : <code>void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(const OpenMM_AmoebaPiTorsionForce*, int, int*, int*, int*, int*, int*, int*, double*)</code> */
	void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, IntBuffer particle5, IntBuffer particle6, DoubleBuffer k);
	/** Original signature : <code>void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(const OpenMM_AmoebaPiTorsionForce*, int, int*, int*, int*, int*, int*, int*, double*)</code> */
	void OpenMM_AmoebaPiTorsionForce_getPiTorsionParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, IntByReference particle5, IntByReference particle6, DoubleByReference k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(OpenMM_AmoebaPiTorsionForce*, int, int, int, int, int, int, int, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, int, int, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(Pointer target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k);
	/** Original signature : <code>void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(OpenMM_AmoebaPiTorsionForce*, int, int, int, int, int, int, int, double)</code> */
	void OpenMM_AmoebaPiTorsionForce_setPiTorsionParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(OpenMM_AmoebaPiTorsionForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaPiTorsionForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(OpenMM_AmoebaPiTorsionForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaPiTorsionForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaPiTorsionForce*, OpenMM_Boolean)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(Pointer target, int periodic);
	/** Original signature : <code>void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaPiTorsionForce*, OpenMM_Boolean)</code> */
	void OpenMM_AmoebaPiTorsionForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaPiTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaPiTorsionForce*)</code> */
	int OpenMM_AmoebaPiTorsionForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaStretchBendForce<br>
	 * Original signature : <code>OpenMM_AmoebaStretchBendForce* OpenMM_AmoebaStretchBendForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaStretchBendForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_destroy(OpenMM_AmoebaStretchBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchBendForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchBendForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaStretchBendForce_destroy(OpenMM_AmoebaStretchBendForce*)</code> */
	void OpenMM_AmoebaStretchBendForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaStretchBendForce_getNumStretchBends(const OpenMM_AmoebaStretchBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchBendForce_getNumStretchBends(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaStretchBendForce_getNumStretchBends(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaStretchBendForce_getNumStretchBends(const OpenMM_AmoebaStretchBendForce*)</code> */
	int OpenMM_AmoebaStretchBendForce_getNumStretchBends(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaStretchBendForce_addStretchBend(OpenMM_AmoebaStretchBendForce*, int, int, int, double, double, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchBendForce_addStretchBend(com.sun.jna.ptr.PointerByReference, int, int, int, double, double, double, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaStretchBendForce_addStretchBend(Pointer target, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2);
	/** Original signature : <code>int OpenMM_AmoebaStretchBendForce_addStretchBend(OpenMM_AmoebaStretchBendForce*, int, int, int, double, double, double, double, double)</code> */
	int OpenMM_AmoebaStretchBendForce_addStretchBend(PointerByReference target, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(const OpenMM_AmoebaStretchBendForce*, int, int*, int*, int*, double*, double*, double*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaStretchBendForce_getStretchBendParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaStretchBendForce_getStretchBendParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, DoubleByReference lengthAB, DoubleByReference lengthCB, DoubleByReference angle, DoubleByReference k1, DoubleByReference k2);
	/** Original signature : <code>void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(const OpenMM_AmoebaStretchBendForce*, int, int*, int*, int*, double*, double*, double*, double*, double*)</code> */
	void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, DoubleBuffer lengthAB, DoubleBuffer lengthCB, DoubleBuffer angle, DoubleBuffer k1, DoubleBuffer k2);
	/** Original signature : <code>void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(const OpenMM_AmoebaStretchBendForce*, int, int*, int*, int*, double*, double*, double*, double*, double*)</code> */
	void OpenMM_AmoebaStretchBendForce_getStretchBendParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, DoubleByReference lengthAB, DoubleByReference lengthCB, DoubleByReference angle, DoubleByReference k1, DoubleByReference k2);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(OpenMM_AmoebaStretchBendForce*, int, int, int, int, double, double, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchBendForce_setStretchBendParameters(com.sun.jna.ptr.PointerByReference, int, int, int, int, double, double, double, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(Pointer target, int index, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2);
	/** Original signature : <code>void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(OpenMM_AmoebaStretchBendForce*, int, int, int, int, double, double, double, double, double)</code> */
	void OpenMM_AmoebaStretchBendForce_setStretchBendParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_updateParametersInContext(OpenMM_AmoebaStretchBendForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchBendForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchBendForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaStretchBendForce_updateParametersInContext(OpenMM_AmoebaStretchBendForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaStretchBendForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaStretchBendForce*, OpenMM_Boolean)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(Pointer target, int periodic);
	/** Original signature : <code>void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaStretchBendForce*, OpenMM_Boolean)</code> */
	void OpenMM_AmoebaStretchBendForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaStretchBendForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaStretchBendForce*)</code> */
	int OpenMM_AmoebaStretchBendForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaStretchTorsionForce<br>
	 * Original signature : <code>OpenMM_AmoebaStretchTorsionForce* OpenMM_AmoebaStretchTorsionForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaStretchTorsionForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_destroy(OpenMM_AmoebaStretchTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchTorsionForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchTorsionForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_destroy(OpenMM_AmoebaStretchTorsionForce*)</code> */
	void OpenMM_AmoebaStretchTorsionForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(const OpenMM_AmoebaStretchTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(const OpenMM_AmoebaStretchTorsionForce*)</code> */
	int OpenMM_AmoebaStretchTorsionForce_getNumStretchTorsions(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(OpenMM_AmoebaStretchTorsionForce*, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(com.sun.jna.ptr.PointerByReference, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(Pointer target, int particle1, int particle2, int particle3, int particle4, double lengthBA, double lengthCB, double lengthDC, double k1, double k2, double k3, double k4, double k5, double k6, double k7, double k8, double k9);
	/** Original signature : <code>int OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(OpenMM_AmoebaStretchTorsionForce*, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double)</code> */
	int OpenMM_AmoebaStretchTorsionForce_addStretchTorsion(PointerByReference target, int particle1, int particle2, int particle3, int particle4, double lengthBA, double lengthCB, double lengthDC, double k1, double k2, double k3, double k4, double k5, double k6, double k7, double k8, double k9);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(const OpenMM_AmoebaStretchTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference lengthBA, DoubleByReference lengthCB, DoubleByReference lengthDC, DoubleByReference k1, DoubleByReference k2, DoubleByReference k3, DoubleByReference k4, DoubleByReference k5, DoubleByReference k6, DoubleByReference k7, DoubleByReference k8, DoubleByReference k9);
	/** Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(const OpenMM_AmoebaStretchTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*)</code> */
	void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, DoubleBuffer lengthBA, DoubleBuffer lengthCB, DoubleBuffer lengthDC, DoubleBuffer k1, DoubleBuffer k2, DoubleBuffer k3, DoubleBuffer k4, DoubleBuffer k5, DoubleBuffer k6, DoubleBuffer k7, DoubleBuffer k8, DoubleBuffer k9);
	/** Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(const OpenMM_AmoebaStretchTorsionForce*, int, int*, int*, int*, int*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*)</code> */
	void OpenMM_AmoebaStretchTorsionForce_getStretchTorsionParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, DoubleByReference lengthBA, DoubleByReference lengthCB, DoubleByReference lengthDC, DoubleByReference k1, DoubleByReference k2, DoubleByReference k3, DoubleByReference k4, DoubleByReference k5, DoubleByReference k6, DoubleByReference k7, DoubleByReference k8, DoubleByReference k9);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(OpenMM_AmoebaStretchTorsionForce*, int, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(Pointer target, int index, int particle1, int particle2, int particle3, int particle4, double lengthBA, double lengthCB, double lengthDC, double k1, double k2, double k3, double k4, double k5, double k6, double k7, double k8, double k9);
	/** Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(OpenMM_AmoebaStretchTorsionForce*, int, int, int, int, int, double, double, double, double, double, double, double, double, double, double, double, double)</code> */
	void OpenMM_AmoebaStretchTorsionForce_setStretchTorsionParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, double lengthBA, double lengthCB, double lengthDC, double k1, double k2, double k3, double k4, double k5, double k6, double k7, double k8, double k9);
	/**
	 * Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(OpenMM_AmoebaStretchTorsionForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(OpenMM_AmoebaStretchTorsionForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaStretchTorsionForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaStretchTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaStretchTorsionForce*)</code> */
	int OpenMM_AmoebaStretchTorsionForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaTorsionTorsionForce<br>
	 * Original signature : <code>OpenMM_AmoebaTorsionTorsionForce* OpenMM_AmoebaTorsionTorsionForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaTorsionTorsionForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_destroy(OpenMM_AmoebaTorsionTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaTorsionTorsionForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_destroy(OpenMM_AmoebaTorsionTorsionForce*)</code> */
	void OpenMM_AmoebaTorsionTorsionForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(const OpenMM_AmoebaTorsionTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(const OpenMM_AmoebaTorsionTorsionForce*)</code> */
	int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(const OpenMM_AmoebaTorsionTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(const OpenMM_AmoebaTorsionTorsionForce*)</code> */
	int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, int, int)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(Pointer target, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex);
	/** Original signature : <code>int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int)</code> */
	int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(PointerByReference target, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(const OpenMM_AmoebaTorsionTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(Pointer target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, IntByReference particle5, IntByReference chiralCheckAtomIndex, IntByReference gridIndex);
	/** Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(const OpenMM_AmoebaTorsionTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*)</code> */
	void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(PointerByReference target, int index, IntBuffer particle1, IntBuffer particle2, IntBuffer particle3, IntBuffer particle4, IntBuffer particle5, IntBuffer chiralCheckAtomIndex, IntBuffer gridIndex);
	/** Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(const OpenMM_AmoebaTorsionTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*)</code> */
	void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(PointerByReference target, int index, IntByReference particle1, IntByReference particle2, IntByReference particle3, IntByReference particle4, IntByReference particle5, IntByReference chiralCheckAtomIndex, IntByReference gridIndex);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, int, int, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(Pointer target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex);
	/** Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int, int)</code> */
	void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(PointerByReference target, int index, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex);
	/**
	 * Original signature : <code>OpenMM_3D_DoubleArray* OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(const OpenMM_AmoebaTorsionTorsionForce*, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	PointerByReference OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(Pointer target, int index);
	/** Original signature : <code>OpenMM_3D_DoubleArray* OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(const OpenMM_AmoebaTorsionTorsionForce*, int)</code> */
	PointerByReference OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(PointerByReference target, int index);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(OpenMM_AmoebaTorsionTorsionForce*, int, const OpenMM_3D_DoubleArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(Pointer target, int index, Pointer grid);
	/** Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(OpenMM_AmoebaTorsionTorsionForce*, int, const OpenMM_3D_DoubleArray*)</code> */
	void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(PointerByReference target, int index, PointerByReference grid);
	/**
	 * Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaTorsionTorsionForce*, OpenMM_Boolean)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(Pointer target, int periodic);
	/** Original signature : <code>void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaTorsionTorsionForce*, OpenMM_Boolean)</code> */
	void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(PointerByReference target, int periodic);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaTorsionTorsionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaTorsionTorsionForce*)</code> */
	int OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/** Original signature : <code>OpenMM_AmoebaVdwForce* OpenMM_AmoebaVdwForce_create()</code> */
	PointerByReference OpenMM_AmoebaVdwForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_destroy(OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_destroy(OpenMM_AmoebaVdwForce*)</code> */
	void OpenMM_AmoebaVdwForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_getNumParticles(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getNumParticles(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_getNumParticles(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaVdwForce_getNumParticles(const OpenMM_AmoebaVdwForce*)</code> */
	int OpenMM_AmoebaVdwForce_getNumParticles(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setParticleParameters(OpenMM_AmoebaVdwForce*, int, int, int, double, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setParticleParameters(com.sun.jna.ptr.PointerByReference, int, int, int, double, double, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setParticleParameters(Pointer target, int particleIndex, int parentIndex, int vdwprType, double sigma, double epsilon, double reductionFactor, double lambda);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setParticleParameters(OpenMM_AmoebaVdwForce*, int, int, int, double, double, double, double)</code> */
	void OpenMM_AmoebaVdwForce_setParticleParameters(PointerByReference target, int particleIndex, int parentIndex, int vdwprType, double sigma, double epsilon, double reductionFactor, double lambda);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_getParticleParameters(const OpenMM_AmoebaVdwForce*, int, int*, int*, double*, double*, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaVdwForce_getParticleParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaVdwForce_getParticleParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_getParticleParameters(Pointer target, int particleIndex, IntByReference parentIndex, IntByReference vdwprType, DoubleByReference sigma, DoubleByReference epsilon, DoubleByReference reductionFactor, DoubleByReference lambda);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_getParticleParameters(const OpenMM_AmoebaVdwForce*, int, int*, int*, double*, double*, double*, double*)</code> */
	void OpenMM_AmoebaVdwForce_getParticleParameters(PointerByReference target, int particleIndex, IntBuffer parentIndex, IntBuffer vdwprType, DoubleBuffer sigma, DoubleBuffer epsilon, DoubleBuffer reductionFactor, DoubleBuffer lambda);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_getParticleParameters(const OpenMM_AmoebaVdwForce*, int, int*, int*, double*, double*, double*, double*)</code> */
	void OpenMM_AmoebaVdwForce_getParticleParameters(PointerByReference target, int particleIndex, IntByReference parentIndex, IntByReference vdwprType, DoubleByReference sigma, DoubleByReference epsilon, DoubleByReference reductionFactor, DoubleByReference lambda);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_addParticle(OpenMM_AmoebaVdwForce*, int, int, double, double, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_addParticle(com.sun.jna.ptr.PointerByReference, int, int, double, double, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_addParticle(Pointer target, int parentIndex, int vdwprType, double sigma, double epsilon, double reductionFactor, double lambda);
	/** Original signature : <code>int OpenMM_AmoebaVdwForce_addParticle(OpenMM_AmoebaVdwForce*, int, int, double, double, double, double)</code> */
	int OpenMM_AmoebaVdwForce_addParticle(PointerByReference target, int parentIndex, int vdwprType, double sigma, double epsilon, double reductionFactor, double lambda);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(OpenMM_AmoebaVdwForce*)</code> */
	void OpenMM_AmoebaVdwForce_computeCombinedSigmaEpsilon(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_getNumVdwprTypes(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getNumVdwprTypes(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_getNumVdwprTypes(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaVdwForce_getNumVdwprTypes(const OpenMM_AmoebaVdwForce*)</code> */
	int OpenMM_AmoebaVdwForce_getNumVdwprTypes(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setNumVdwprTypes(OpenMM_AmoebaVdwForce*, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setNumVdwprTypes(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setNumVdwprTypes(Pointer target, int newNum);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setNumVdwprTypes(OpenMM_AmoebaVdwForce*, int)</code> */
	void OpenMM_AmoebaVdwForce_setNumVdwprTypes(PointerByReference target, int newNum);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_getNewVdwprType(const OpenMM_AmoebaVdwForce*, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getNewVdwprType(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_getNewVdwprType(Pointer target, int oldType);
	/** Original signature : <code>int OpenMM_AmoebaVdwForce_getNewVdwprType(const OpenMM_AmoebaVdwForce*, int)</code> */
	int OpenMM_AmoebaVdwForce_getNewVdwprType(PointerByReference target, int oldType);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_getOldVdwprType(const OpenMM_AmoebaVdwForce*, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getOldVdwprType(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_getOldVdwprType(Pointer target, int newType);
	/** Original signature : <code>int OpenMM_AmoebaVdwForce_getOldVdwprType(const OpenMM_AmoebaVdwForce*, int)</code> */
	int OpenMM_AmoebaVdwForce_getOldVdwprType(PointerByReference target, int newType);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setOldVdwprType(OpenMM_AmoebaVdwForce*, int, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setOldVdwprType(com.sun.jna.ptr.PointerByReference, int, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setOldVdwprType(Pointer target, int newType, int oldType);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setOldVdwprType(OpenMM_AmoebaVdwForce*, int, int)</code> */
	void OpenMM_AmoebaVdwForce_setOldVdwprType(PointerByReference target, int newType, int oldType);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_resize(OpenMM_AmoebaVdwForce*, int)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_resize(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_resize(Pointer target, int newSize);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_resize(OpenMM_AmoebaVdwForce*, int)</code> */
	void OpenMM_AmoebaVdwForce_resize(PointerByReference target, int newSize);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(OpenMM_AmoebaVdwForce*, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(com.sun.jna.ptr.PointerByReference, int, int, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(Pointer target, int oldtype1, int oldtype2, double combinedSigma, double combinedEpsilon);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(OpenMM_AmoebaVdwForce*, int, int, double, double)</code> */
	void OpenMM_AmoebaVdwForce_setVdwprParametersByOldTypes(PointerByReference target, int oldtype1, int oldtype2, double combinedSigma, double combinedEpsilon);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_addVdwprByOldTypes(OpenMM_AmoebaVdwForce*, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_addVdwprByOldTypes(com.sun.jna.ptr.PointerByReference, int, int, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_addVdwprByOldTypes(Pointer target, int oldtype1, int oldtype2, double combinedSigma, double combinedEpsilon);
	/** Original signature : <code>int OpenMM_AmoebaVdwForce_addVdwprByOldTypes(OpenMM_AmoebaVdwForce*, int, int, double, double)</code> */
	int OpenMM_AmoebaVdwForce_addVdwprByOldTypes(PointerByReference target, int oldtype1, int oldtype2, double combinedSigma, double combinedEpsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setVdwprParameters(OpenMM_AmoebaVdwForce*, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setVdwprParameters(com.sun.jna.ptr.PointerByReference, int, int, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setVdwprParameters(Pointer target, int ntype1, int ntype2, double combinedSigma, double combinedEpsilon);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setVdwprParameters(OpenMM_AmoebaVdwForce*, int, int, double, double)</code> */
	void OpenMM_AmoebaVdwForce_setVdwprParameters(PointerByReference target, int ntype1, int ntype2, double combinedSigma, double combinedEpsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_getVdwprParameters(const OpenMM_AmoebaVdwForce*, int, int, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaVdwForce_getVdwprParameters(com.sun.jna.ptr.PointerByReference, int, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaVdwForce_getVdwprParameters(com.sun.jna.ptr.PointerByReference, int, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_getVdwprParameters(Pointer target, int ntype1, int ntype2, DoubleByReference combinedSigma, DoubleByReference combinedEpsilon);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_getVdwprParameters(const OpenMM_AmoebaVdwForce*, int, int, double*, double*)</code> */
	void OpenMM_AmoebaVdwForce_getVdwprParameters(PointerByReference target, int ntype1, int ntype2, DoubleBuffer combinedSigma, DoubleBuffer combinedEpsilon);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_getVdwprParameters(const OpenMM_AmoebaVdwForce*, int, int, double*, double*)</code> */
	void OpenMM_AmoebaVdwForce_getVdwprParameters(PointerByReference target, int ntype1, int ntype2, DoubleByReference combinedSigma, DoubleByReference combinedEpsilon);
	/**
	 * Original signature : <code>int OpenMM_AmoebaVdwForce_addVdwpr(OpenMM_AmoebaVdwForce*, int, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_addVdwpr(com.sun.jna.ptr.PointerByReference, int, int, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_addVdwpr(Pointer target, int ntype1, int ntype2, double combinedSigma, double combinedEpsilon);
	/** Original signature : <code>int OpenMM_AmoebaVdwForce_addVdwpr(OpenMM_AmoebaVdwForce*, int, int, double, double)</code> */
	int OpenMM_AmoebaVdwForce_addVdwpr(PointerByReference target, int ntype1, int ntype2, double combinedSigma, double combinedEpsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaVdwForce_setSigmaCombiningRule(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #OpenMM_AmoebaVdwForce_setSigmaCombiningRule(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(Pointer target, Pointer sigmaCombiningRule);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code> */
	void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(PointerByReference target, String sigmaCombiningRule);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code> */
	void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(PointerByReference target, Pointer sigmaCombiningRule);
	/**
	 * Original signature : <code>char* OpenMM_AmoebaVdwForce_getSigmaCombiningRule(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getSigmaCombiningRule(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer OpenMM_AmoebaVdwForce_getSigmaCombiningRule(Pointer target);
	/** Original signature : <code>char* OpenMM_AmoebaVdwForce_getSigmaCombiningRule(const OpenMM_AmoebaVdwForce*)</code> */
	Pointer OpenMM_AmoebaVdwForce_getSigmaCombiningRule(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(Pointer target, Pointer epsilonCombiningRule);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code> */
	void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(PointerByReference target, String epsilonCombiningRule);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code> */
	void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(PointerByReference target, Pointer epsilonCombiningRule);
	/**
	 * Original signature : <code>char* OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(Pointer target);
	/** Original signature : <code>char* OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(const OpenMM_AmoebaVdwForce*)</code> */
	Pointer OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setFunctionalForm(OpenMM_AmoebaVdwForce*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaVdwForce_setFunctionalForm(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #OpenMM_AmoebaVdwForce_setFunctionalForm(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setFunctionalForm(Pointer target, Pointer functionalForm);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setFunctionalForm(OpenMM_AmoebaVdwForce*, const char*)</code> */
	void OpenMM_AmoebaVdwForce_setFunctionalForm(PointerByReference target, String functionalForm);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setFunctionalForm(OpenMM_AmoebaVdwForce*, const char*)</code> */
	void OpenMM_AmoebaVdwForce_setFunctionalForm(PointerByReference target, Pointer functionalForm);
	/**
	 * Original signature : <code>char* OpenMM_AmoebaVdwForce_getFunctionalForm(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getFunctionalForm(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer OpenMM_AmoebaVdwForce_getFunctionalForm(Pointer target);
	/** Original signature : <code>char* OpenMM_AmoebaVdwForce_getFunctionalForm(const OpenMM_AmoebaVdwForce*)</code> */
	Pointer OpenMM_AmoebaVdwForce_getFunctionalForm(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaVdwForce_getUseDispersionCorrection(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getUseDispersionCorrection(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_getUseDispersionCorrection(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaVdwForce_getUseDispersionCorrection(const OpenMM_AmoebaVdwForce*)</code> */
	int OpenMM_AmoebaVdwForce_getUseDispersionCorrection(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(OpenMM_AmoebaVdwForce*, OpenMM_Boolean)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setUseDispersionCorrection(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(Pointer target, int useCorrection);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(OpenMM_AmoebaVdwForce*, OpenMM_Boolean)</code> */
	void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(PointerByReference target, int useCorrection);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setParticleExclusions(OpenMM_AmoebaVdwForce*, int, const OpenMM_IntArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setParticleExclusions(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setParticleExclusions(Pointer target, int particleIndex, Pointer exclusions);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setParticleExclusions(OpenMM_AmoebaVdwForce*, int, const OpenMM_IntArray*)</code> */
	void OpenMM_AmoebaVdwForce_setParticleExclusions(PointerByReference target, int particleIndex, PointerByReference exclusions);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_getParticleExclusions(const OpenMM_AmoebaVdwForce*, int, OpenMM_IntArray*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getParticleExclusions(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_getParticleExclusions(Pointer target, int particleIndex, Pointer exclusions);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_getParticleExclusions(const OpenMM_AmoebaVdwForce*, int, OpenMM_IntArray*)</code> */
	void OpenMM_AmoebaVdwForce_getParticleExclusions(PointerByReference target, int particleIndex, PointerByReference exclusions);
	/**
	 * Original signature : <code>double OpenMM_AmoebaVdwForce_getCutoffDistance(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getCutoffDistance(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaVdwForce_getCutoffDistance(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaVdwForce_getCutoffDistance(const OpenMM_AmoebaVdwForce*)</code> */
	double OpenMM_AmoebaVdwForce_getCutoffDistance(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setCutoffDistance(OpenMM_AmoebaVdwForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setCutoffDistance(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setCutoffDistance(Pointer target, double distance);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setCutoffDistance(OpenMM_AmoebaVdwForce*, double)</code> */
	void OpenMM_AmoebaVdwForce_setCutoffDistance(PointerByReference target, double distance);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setCutoff(OpenMM_AmoebaVdwForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setCutoff(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setCutoff(Pointer target, double cutoff);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setCutoff(OpenMM_AmoebaVdwForce*, double)</code> */
	void OpenMM_AmoebaVdwForce_setCutoff(PointerByReference target, double cutoff);
	/**
	 * Original signature : <code>double OpenMM_AmoebaVdwForce_getCutoff(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getCutoff(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaVdwForce_getCutoff(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaVdwForce_getCutoff(const OpenMM_AmoebaVdwForce*)</code> */
	double OpenMM_AmoebaVdwForce_getCutoff(PointerByReference target);
	/**
	 * Original signature : <code>OpenMM_AmoebaVdwForce_NonbondedMethod OpenMM_AmoebaVdwForce_getNonbondedMethod(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_getNonbondedMethod(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_getNonbondedMethod(Pointer target);
	/** Original signature : <code>OpenMM_AmoebaVdwForce_NonbondedMethod OpenMM_AmoebaVdwForce_getNonbondedMethod(const OpenMM_AmoebaVdwForce*)</code> */
	int OpenMM_AmoebaVdwForce_getNonbondedMethod(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_setNonbondedMethod(OpenMM_AmoebaVdwForce*, OpenMM_AmoebaVdwForce_NonbondedMethod)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_setNonbondedMethod(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_setNonbondedMethod(Pointer target, int method);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_setNonbondedMethod(OpenMM_AmoebaVdwForce*, OpenMM_AmoebaVdwForce_NonbondedMethod)</code> */
	void OpenMM_AmoebaVdwForce_setNonbondedMethod(PointerByReference target, int method);
	/**
	 * Original signature : <code>void OpenMM_AmoebaVdwForce_updateParametersInContext(OpenMM_AmoebaVdwForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaVdwForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaVdwForce_updateParametersInContext(OpenMM_AmoebaVdwForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaVdwForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaVdwForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaVdwForce*)</code> */
	int OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(PointerByReference target);
	/**
	 * AmoebaWcaDispersionForce<br>
	 * Original signature : <code>OpenMM_AmoebaWcaDispersionForce* OpenMM_AmoebaWcaDispersionForce_create()</code>
	 */
	PointerByReference OpenMM_AmoebaWcaDispersionForce_create();
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_destroy(OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_destroy(Pointer target);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_destroy(OpenMM_AmoebaWcaDispersionForce*)</code> */
	void OpenMM_AmoebaWcaDispersionForce_destroy(PointerByReference target);
	/**
	 * Original signature : <code>int OpenMM_AmoebaWcaDispersionForce_getNumParticles(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getNumParticles(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaWcaDispersionForce_getNumParticles(Pointer target);
	/** Original signature : <code>int OpenMM_AmoebaWcaDispersionForce_getNumParticles(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	int OpenMM_AmoebaWcaDispersionForce_getNumParticles(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(OpenMM_AmoebaWcaDispersionForce*, int, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setParticleParameters(com.sun.jna.ptr.PointerByReference, int, double, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(Pointer target, int particleIndex, double radius, double epsilon);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(OpenMM_AmoebaWcaDispersionForce*, int, double, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(PointerByReference target, int particleIndex, double radius, double epsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(const OpenMM_AmoebaWcaDispersionForce*, int, double*, double*)</code><br>
	 * @deprecated use the safer methods {@link #OpenMM_AmoebaWcaDispersionForce_getParticleParameters(com.sun.jna.ptr.PointerByReference, int, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #OpenMM_AmoebaWcaDispersionForce_getParticleParameters(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(Pointer target, int particleIndex, DoubleByReference radius, DoubleByReference epsilon);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(const OpenMM_AmoebaWcaDispersionForce*, int, double*, double*)</code> */
	void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(PointerByReference target, int particleIndex, DoubleBuffer radius, DoubleBuffer epsilon);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(const OpenMM_AmoebaWcaDispersionForce*, int, double*, double*)</code> */
	void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(PointerByReference target, int particleIndex, DoubleByReference radius, DoubleByReference epsilon);
	/**
	 * Original signature : <code>int OpenMM_AmoebaWcaDispersionForce_addParticle(OpenMM_AmoebaWcaDispersionForce*, double, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_addParticle(com.sun.jna.ptr.PointerByReference, double, double)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaWcaDispersionForce_addParticle(Pointer target, double radius, double epsilon);
	/** Original signature : <code>int OpenMM_AmoebaWcaDispersionForce_addParticle(OpenMM_AmoebaWcaDispersionForce*, double, double)</code> */
	int OpenMM_AmoebaWcaDispersionForce_addParticle(PointerByReference target, double radius, double epsilon);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(OpenMM_AmoebaWcaDispersionForce*, OpenMM_Context*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(Pointer target, Pointer context);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(OpenMM_AmoebaWcaDispersionForce*, OpenMM_Context*)</code> */
	void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getEpso(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getEpso(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaWcaDispersionForce_getEpso(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getEpso(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	double OpenMM_AmoebaWcaDispersionForce_getEpso(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getEpsh(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getEpsh(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaWcaDispersionForce_getEpsh(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getEpsh(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	double OpenMM_AmoebaWcaDispersionForce_getEpsh(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getRmino(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getRmino(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaWcaDispersionForce_getRmino(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getRmino(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	double OpenMM_AmoebaWcaDispersionForce_getRmino(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getRminh(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getRminh(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaWcaDispersionForce_getRminh(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getRminh(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	double OpenMM_AmoebaWcaDispersionForce_getRminh(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getAwater(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getAwater(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaWcaDispersionForce_getAwater(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getAwater(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	double OpenMM_AmoebaWcaDispersionForce_getAwater(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getShctd(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getShctd(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaWcaDispersionForce_getShctd(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getShctd(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	double OpenMM_AmoebaWcaDispersionForce_getShctd(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getDispoff(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getDispoff(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaWcaDispersionForce_getDispoff(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getDispoff(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	double OpenMM_AmoebaWcaDispersionForce_getDispoff(PointerByReference target);
	/**
	 * Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getSlevy(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_getSlevy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double OpenMM_AmoebaWcaDispersionForce_getSlevy(Pointer target);
	/** Original signature : <code>double OpenMM_AmoebaWcaDispersionForce_getSlevy(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	double OpenMM_AmoebaWcaDispersionForce_getSlevy(PointerByReference target);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setEpso(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setEpso(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setEpso(Pointer target, double inputValue);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setEpso(OpenMM_AmoebaWcaDispersionForce*, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setEpso(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setEpsh(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setEpsh(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setEpsh(Pointer target, double inputValue);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setEpsh(OpenMM_AmoebaWcaDispersionForce*, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setEpsh(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setRmino(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setRmino(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setRmino(Pointer target, double inputValue);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setRmino(OpenMM_AmoebaWcaDispersionForce*, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setRmino(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setRminh(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setRminh(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setRminh(Pointer target, double inputValue);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setRminh(OpenMM_AmoebaWcaDispersionForce*, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setRminh(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setAwater(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setAwater(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setAwater(Pointer target, double inputValue);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setAwater(OpenMM_AmoebaWcaDispersionForce*, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setAwater(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setShctd(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setShctd(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setShctd(Pointer target, double inputValue);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setShctd(OpenMM_AmoebaWcaDispersionForce*, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setShctd(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setDispoff(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setDispoff(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setDispoff(Pointer target, double inputValue);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setDispoff(OpenMM_AmoebaWcaDispersionForce*, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setDispoff(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setSlevy(OpenMM_AmoebaWcaDispersionForce*, double)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_setSlevy(com.sun.jna.ptr.PointerByReference, double)} instead
	 */
	@Deprecated 
	void OpenMM_AmoebaWcaDispersionForce_setSlevy(Pointer target, double inputValue);
	/** Original signature : <code>void OpenMM_AmoebaWcaDispersionForce_setSlevy(OpenMM_AmoebaWcaDispersionForce*, double)</code> */
	void OpenMM_AmoebaWcaDispersionForce_setSlevy(PointerByReference target, double inputValue);
	/**
	 * Original signature : <code>OpenMM_Boolean OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaWcaDispersionForce*)</code><br>
	 * @deprecated use the safer method {@link #OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(Pointer target);
	/** Original signature : <code>OpenMM_Boolean OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaWcaDispersionForce*)</code> */
	int OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(PointerByReference target);
	public static class OpenMM_3D_DoubleArray extends PointerType {
		public OpenMM_3D_DoubleArray(Pointer address) {
			super(address);
		}
		public OpenMM_3D_DoubleArray() {
			super();
		}
	};
	public static class OpenMM_2D_IntArray extends PointerType {
		public OpenMM_2D_IntArray(Pointer address) {
			super(address);
		}
		public OpenMM_2D_IntArray() {
			super();
		}
	};
	public static class OpenMM_AmoebaInPlaneAngleForce extends PointerType {
		public OpenMM_AmoebaInPlaneAngleForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaInPlaneAngleForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaAngleForce extends PointerType {
		public OpenMM_AmoebaAngleForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaAngleForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaPiTorsionForce extends PointerType {
		public OpenMM_AmoebaPiTorsionForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaPiTorsionForce() {
			super();
		}
	};
	public static class OpenMM_Context extends PointerType {
		public OpenMM_Context(Pointer address) {
			super(address);
		}
		public OpenMM_Context() {
			super();
		}
	};
	public static class OpenMM_AmoebaMultipoleForce extends PointerType {
		public OpenMM_AmoebaMultipoleForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaMultipoleForce() {
			super();
		}
	};
	public static class OpenMM_Vec3Array extends PointerType {
		public OpenMM_Vec3Array(Pointer address) {
			super(address);
		}
		public OpenMM_Vec3Array() {
			super();
		}
	};
	public static class OpenMM_AmoebaWcaDispersionForce extends PointerType {
		public OpenMM_AmoebaWcaDispersionForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaWcaDispersionForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaAngleTorsionForce extends PointerType {
		public OpenMM_AmoebaAngleTorsionForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaAngleTorsionForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaOutOfPlaneBendForce extends PointerType {
		public OpenMM_AmoebaOutOfPlaneBendForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaOutOfPlaneBendForce() {
			super();
		}
	};
	public static class OpenMM_IntArray extends PointerType {
		public OpenMM_IntArray(Pointer address) {
			super(address);
		}
		public OpenMM_IntArray() {
			super();
		}
	};
	public static class OpenMM_AmoebaStretchTorsionForce extends PointerType {
		public OpenMM_AmoebaStretchTorsionForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaStretchTorsionForce() {
			super();
		}
	};
	public static class OpenMM_DoubleArray extends PointerType {
		public OpenMM_DoubleArray(Pointer address) {
			super(address);
		}
		public OpenMM_DoubleArray() {
			super();
		}
	};
	public static class OpenMM_AmoebaGeneralizedKirkwoodForce extends PointerType {
		public OpenMM_AmoebaGeneralizedKirkwoodForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaGeneralizedKirkwoodForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaBondForce extends PointerType {
		public OpenMM_AmoebaBondForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaBondForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaTorsionTorsionForce extends PointerType {
		public OpenMM_AmoebaTorsionTorsionForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaTorsionTorsionForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaStretchBendForce extends PointerType {
		public OpenMM_AmoebaStretchBendForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaStretchBendForce() {
			super();
		}
	};
	public static class OpenMM_AmoebaVdwForce extends PointerType {
		public OpenMM_AmoebaVdwForce(Pointer address) {
			super(address);
		}
		public OpenMM_AmoebaVdwForce() {
			super();
		}
	};
}
